
Test004-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004efc  08004efc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  08004f6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004f6c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8ba  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c0  00000000  00000000  0002e995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b01  00000000  00000000  00031a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018657  00000000  00000000  00032579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010663  00000000  00000000  0004abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bce8  00000000  00000000  0005b233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004498  00000000  00000000  000f6f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000fb3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e28 	.word	0x08004e28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004e28 	.word	0x08004e28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fc92 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f82a 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f98e 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f96c 	bl	8000868 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f940 	bl	8000814 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f88c 	bl	80006b0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000598:	f000 f8ee 	bl	8000778 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	ProgramStart("ADC-DMA");
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <main+0x4c>)
 800059e:	f000 fa17 	bl	80009d0 <ProgramStart>
  	HAL_TIM_Base_Start(&htim3);
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <main+0x50>)
 80005a4:	f002 fc14 	bl	8002dd0 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc1,val,2);
 80005a8:	2202      	movs	r2, #2
 80005aa:	4909      	ldr	r1, [pc, #36]	; (80005d0 <main+0x54>)
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x58>)
 80005ae:	f000 fd31 	bl	8001014 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("(%d ,%d) \r\n", val[0],val[1]);
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <main+0x54>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <main+0x54>)
 80005ba:	885b      	ldrh	r3, [r3, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x5c>)
 80005c0:	f003 fb8a 	bl	8003cd8 <iprintf>
  {
 80005c4:	e7f5      	b.n	80005b2 <main+0x36>
 80005c6:	bf00      	nop
 80005c8:	08004e40 	.word	0x08004e40
 80005cc:	2000012c 	.word	0x2000012c
 80005d0:	200001bc 	.word	0x200001bc
 80005d4:	20000084 	.word	0x20000084
 80005d8:	08004e48 	.word	0x08004e48

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fcda 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065a:	2304      	movs	r3, #4
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fecc 	bl	8002400 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066e:	f000 f997 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f002 f92e 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 f981 	bl	80009a0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006c4:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <MX_ADC1_Init+0xc4>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006d8:	2201      	movs	r2, #1
 80006da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC1_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_ADC1_Init+0xc0>)
 8000708:	2202      	movs	r2, #2
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_ADC1_Init+0xc0>)
 800070e:	2201      	movs	r2, #1
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_ADC1_Init+0xc0>)
 8000716:	2201      	movs	r2, #1
 8000718:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <MX_ADC1_Init+0xc0>)
 800071c:	f000 fc36 	bl	8000f8c <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000726:	f000 f93b 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_ADC1_Init+0xc0>)
 800073c:	f000 fd78 	bl	8001230 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000746:	f000 f92b 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074a:	2301      	movs	r3, #1
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC1_Init+0xc0>)
 8000758:	f000 fd6a 	bl	8001230 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000762:	f000 f91d 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000084 	.word	0x20000084
 8000774:	40012000 	.word	0x40012000

08000778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_TIM3_Init+0x94>)
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <MX_TIM3_Init+0x98>)
 8000798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_TIM3_Init+0x94>)
 800079c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80007a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_TIM3_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM3_Init+0x94>)
 80007aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_TIM3_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_TIM3_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM3_Init+0x94>)
 80007be:	f002 fab7 	bl	8002d30 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007c8:	f000 f8ea 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_TIM3_Init+0x94>)
 80007da:	f002 fb53 	bl	8002e84 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007e4:	f000 f8dc 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007e8:	2320      	movs	r3, #32
 80007ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_TIM3_Init+0x94>)
 80007f6:	f002 fd33 	bl	8003260 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000800:	f000 f8ce 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000012c 	.word	0x2000012c
 8000810:	40000400 	.word	0x40000400

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART2_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800084c:	f002 fd76 	bl	800333c <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f8a3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000174 	.word	0x20000174
 8000864:	40004400 	.word	0x40004400

08000868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_DMA_Init+0x3c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <MX_DMA_Init+0x3c>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_DMA_Init+0x3c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2038      	movs	r0, #56	; 0x38
 8000890:	f001 f859 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000894:	2038      	movs	r0, #56	; 0x38
 8000896:	f001 f872 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <MX_GPIO_Init+0xec>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a33      	ldr	r2, [pc, #204]	; (8000994 <MX_GPIO_Init+0xec>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <MX_GPIO_Init+0xec>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_GPIO_Init+0xec>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <MX_GPIO_Init+0xec>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <MX_GPIO_Init+0xec>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a25      	ldr	r2, [pc, #148]	; (8000994 <MX_GPIO_Init+0xec>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <MX_GPIO_Init+0xec>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_GPIO_Init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_GPIO_Init+0xec>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_GPIO_Init+0xec>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <MX_GPIO_Init+0xf0>)
 8000934:	f001 fd4a 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_GPIO_Init+0xf4>)
 8000950:	f001 fba0 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	480b      	ldr	r0, [pc, #44]	; (8000998 <MX_GPIO_Init+0xf0>)
 800096c:	f001 fb92 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : axis_Z_Pin */
  GPIO_InitStruct.Pin = axis_Z_Pin;
 8000970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(axis_Z_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0xf0>)
 8000986:	f001 fb85 	bl	8002094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020800 	.word	0x40020800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <__io_putchar>:
//I2C_HandleTypeDef *hi2c = NULL;

//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"

int __io_putchar(int ch) // Lowest output Function
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	230a      	movs	r3, #10
 80009b8:	2201      	movs	r2, #1
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <__io_putchar+0x20>)
 80009bc:	f002 fd0e 	bl	80033dc <HAL_UART_Transmit>
   return ch;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000174 	.word	0x20000174

080009d0 <ProgramStart>:
void ProgramStart(char *str)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 80009d8:	f000 f826 	bl	8000a28 <cls>
   Cursor(0,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f82c 	bl	8000a3c <Cursor>
   printf("Program Name - %s\r\n", str);
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <ProgramStart+0x30>)
 80009e8:	f003 f976 	bl	8003cd8 <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <ProgramStart+0x34>)
 80009ee:	f003 f9d9 	bl	8003da4 <puts>
   standby();
 80009f2:	f000 f809 	bl	8000a08 <standby>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	08004e54 	.word	0x08004e54
 8000a04:	08004e68 	.word	0x08004e68

08000a08 <standby>:

void standby()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000a0c:	bf00      	nop
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <standby+0x1c>)
 8000a14:	f001 fcc2 	bl	800239c <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f7      	bne.n	8000a0e <standby+0x6>
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40020800 	.word	0x40020800

08000a28 <cls>:

void cls() // 화면 clear
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
   printf("\033[2J");
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <cls+0x10>)
 8000a2e:	f003 f953 	bl	8003cd8 <iprintf>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	08004e8c 	.word	0x08004e8c

08000a3c <Cursor>:

void Cursor(int x, int y)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 8000a46:	f107 000c 	add.w	r0, r7, #12
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	4906      	ldr	r1, [pc, #24]	; (8000a68 <Cursor+0x2c>)
 8000a50:	f003 f9b0 	bl	8003db4 <siprintf>
   puts(buf);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 f9a3 	bl	8003da4 <puts>
}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	08004e94 	.word	0x08004e94

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aaa:	2007      	movs	r0, #7
 8000aac:	f000 ff40 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d157      	bne.n	8000b8e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a2d      	ldr	r2, [pc, #180]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b16:	2303      	movs	r3, #3
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <HAL_ADC_MspInit+0xe4>)
 8000b2a:	f001 fab3 	bl	8002094 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_ADC_MspInit+0xec>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b74:	f000 ff1e 	bl	80019b4 <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b7e:	f7ff ff0f 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_ADC_MspInit+0xe8>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012000 	.word	0x40012000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	200000cc 	.word	0x200000cc
 8000ba8:	40026410 	.word	0x40026410

08000bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10d      	bne.n	8000bda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_TIM_Base_MspInit+0x40>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_TIM_Base_MspInit+0x40>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_TIM_Base_MspInit+0x40>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40000400 	.word	0x40000400
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_UART_MspInit+0x8c>)
 8000c66:	f001 fa15 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f93e 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA2_Stream0_IRQHandler+0x10>)
 8000cda:	f000 ff71 	bl	8001bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000cc 	.word	0x200000cc

08000ce8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
  }

  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe35 	bl	80009ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
  }
  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f003 f924 	bl	8004040 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200001c0 	.word	0x200001c0
 8000e2c:	20000318 	.word	0x20000318

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f003 f8e3 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb79 	bl	800057c <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e98:	08004f04 	.word	0x08004f04
  ldr r2, =_sbss
 8000e9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea0:	20000314 	.word	0x20000314

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fd2d 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fdc6 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd45 	bl	800199a <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fd0d 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200001c4 	.word	0x200001c4

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001c4 	.word	0x200001c4

08000f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e033      	b.n	800100a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d109      	bne.n	8000fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fd86 	bl	8000abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d118      	bne.n	8000ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fd2:	f023 0302 	bic.w	r3, r3, #2
 8000fd6:	f043 0202 	orr.w	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fa58 	bl	8001494 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f023 0303 	bic.w	r3, r3, #3
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffa:	e001      	b.n	8001000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Start_DMA+0x1e>
 800102e:	2302      	movs	r3, #2
 8001030:	e0ce      	b.n	80011d0 <HAL_ADC_Start_DMA+0x1bc>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d018      	beq.n	800107a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001058:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_ADC_Start_DMA+0x1c4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a5f      	ldr	r2, [pc, #380]	; (80011dc <HAL_ADC_Start_DMA+0x1c8>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0c9a      	lsrs	r2, r3, #18
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800106c:	e002      	b.n	8001074 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	3b01      	subs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001088:	d107      	bne.n	800109a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001098:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	f040 8086 	bne.w	80011b6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e8:	d106      	bne.n	80010f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f023 0206 	bic.w	r2, r3, #6
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
 80010f6:	e002      	b.n	80010fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_ADC_Start_DMA+0x1cc>)
 8001108:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110e:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <HAL_ADC_Start_DMA+0x1d0>)
 8001110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	4a34      	ldr	r2, [pc, #208]	; (80011e8 <HAL_ADC_Start_DMA+0x1d4>)
 8001118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_ADC_Start_DMA+0x1d8>)
 8001120:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800112a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800113a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800114a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	334c      	adds	r3, #76	; 0x4c
 8001156:	4619      	mov	r1, r3
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f000 fcd8 	bl	8001b10 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10f      	bne.n	800118c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d129      	bne.n	80011ce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	e020      	b.n	80011ce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_ADC_Start_DMA+0x1dc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11b      	bne.n	80011ce <HAL_ADC_Start_DMA+0x1ba>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d114      	bne.n	80011ce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	e00b      	b.n	80011ce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f043 0210 	orr.w	r2, r3, #16
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	40012300 	.word	0x40012300
 80011e4:	0800168d 	.word	0x0800168d
 80011e8:	08001747 	.word	0x08001747
 80011ec:	08001763 	.word	0x08001763
 80011f0:	40012000 	.word	0x40012000

080011f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1c>
 8001248:	2302      	movs	r3, #2
 800124a:	e113      	b.n	8001474 <HAL_ADC_ConfigChannel+0x244>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b09      	cmp	r3, #9
 800125a:	d925      	bls.n	80012a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	3b1e      	subs	r3, #30
 8001272:	2207      	movs	r2, #7
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43da      	mvns	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	400a      	ands	r2, r1
 8001280:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68d9      	ldr	r1, [r3, #12]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	4603      	mov	r3, r0
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4403      	add	r3, r0
 800129a:	3b1e      	subs	r3, #30
 800129c:	409a      	lsls	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	e022      	b.n	80012ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	2207      	movs	r2, #7
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6919      	ldr	r1, [r3, #16]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4403      	add	r3, r0
 80012e4:	409a      	lsls	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d824      	bhi.n	8001340 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b05      	subs	r3, #5
 8001308:	221f      	movs	r2, #31
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	400a      	ands	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b05      	subs	r3, #5
 8001332:	fa00 f203 	lsl.w	r2, r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
 800133e:	e04c      	b.n	80013da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d824      	bhi.n	8001392 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	3b23      	subs	r3, #35	; 0x23
 800135a:	221f      	movs	r2, #31
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b23      	subs	r3, #35	; 0x23
 8001384:	fa00 f203 	lsl.w	r2, r0, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
 8001390:	e023      	b.n	80013da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b41      	subs	r3, #65	; 0x41
 80013a4:	221f      	movs	r2, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b41      	subs	r3, #65	; 0x41
 80013ce:	fa00 f203 	lsl.w	r2, r0, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_ADC_ConfigChannel+0x250>)
 80013dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a28      	ldr	r2, [pc, #160]	; (8001484 <HAL_ADC_ConfigChannel+0x254>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d10f      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1d8>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b12      	cmp	r3, #18
 80013ee:	d10b      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_ADC_ConfigChannel+0x254>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12b      	bne.n	800146a <HAL_ADC_ConfigChannel+0x23a>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <HAL_ADC_ConfigChannel+0x258>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_ADC_ConfigChannel+0x1f4>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b11      	cmp	r3, #17
 8001422:	d122      	bne.n	800146a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_ADC_ConfigChannel+0x258>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d111      	bne.n	800146a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_ADC_ConfigChannel+0x25c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a11      	ldr	r2, [pc, #68]	; (8001490 <HAL_ADC_ConfigChannel+0x260>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9a      	lsrs	r2, r3, #18
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800145c:	e002      	b.n	8001464 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3b01      	subs	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f9      	bne.n	800145e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40012300 	.word	0x40012300
 8001484:	40012000 	.word	0x40012000
 8001488:	10000012 	.word	0x10000012
 800148c:	20000000 	.word	0x20000000
 8001490:	431bde83 	.word	0x431bde83

08001494 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149c:	4b79      	ldr	r3, [pc, #484]	; (8001684 <ADC_Init+0x1f0>)
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	021a      	lsls	r2, r3, #8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6899      	ldr	r1, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	4a58      	ldr	r2, [pc, #352]	; (8001688 <ADC_Init+0x1f4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d022      	beq.n	8001572 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800153a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800155c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e00f      	b.n	8001592 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001590:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0202 	bic.w	r2, r2, #2
 80015a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6899      	ldr	r1, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e1b      	ldrb	r3, [r3, #24]
 80015ac:	005a      	lsls	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01b      	beq.n	80015f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6859      	ldr	r1, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	3b01      	subs	r3, #1
 80015ec:	035a      	lsls	r2, r3, #13
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	e007      	b.n	8001608 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	3b01      	subs	r3, #1
 8001624:	051a      	lsls	r2, r3, #20
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800163c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800164a:	025a      	lsls	r2, r3, #9
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6899      	ldr	r1, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	029a      	lsls	r2, r3, #10
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40012300 	.word	0x40012300
 8001688:	0f000001 	.word	0x0f000001

0800168c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d13c      	bne.n	8001720 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d12b      	bne.n	8001718 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d127      	bne.n	8001718 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d119      	bne.n	8001718 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0220 	bic.w	r2, r2, #32
 80016f2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff fd6b 	bl	80011f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800171e:	e00e      	b.n	800173e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fd75 	bl	800121c <HAL_ADC_ErrorCallback>
}
 8001732:	e004      	b.n	800173e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fd57 	bl	8001208 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f043 0204 	orr.w	r2, r3, #4
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff fd4a 	bl	800121c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fad8 	bl	8000f74 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e099      	b.n	8001b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f0:	e00f      	b.n	8001a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f2:	f7ff fabf 	bl	8000f74 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d908      	bls.n	8001a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e078      	b.n	8001b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e8      	bne.n	80019f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_DMA_Init+0x158>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d107      	bne.n	8001a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4313      	orrs	r3, r2
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d117      	bne.n	8001ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa6f 	bl	8001f9c <DMA_CheckFifoParam>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e016      	b.n	8001b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fa26 	bl	8001f30 <DMA_CalcBaseAndBitshift>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	223f      	movs	r2, #63	; 0x3f
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	f010803f 	.word	0xf010803f

08001b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Start_IT+0x26>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e040      	b.n	8001bb8 <HAL_DMA_Start_IT+0xa8>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12f      	bne.n	8001baa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f9b8 	bl	8001ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	223f      	movs	r2, #63	; 0x3f
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0216 	orr.w	r2, r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e005      	b.n	8001bb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bcc:	4b8e      	ldr	r3, [pc, #568]	; (8001e08 <HAL_DMA_IRQHandler+0x248>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a8e      	ldr	r2, [pc, #568]	; (8001e0c <HAL_DMA_IRQHandler+0x24c>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	2208      	movs	r2, #8
 8001bec:	409a      	lsls	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01a      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0204 	bic.w	r2, r2, #4
 8001c12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	2208      	movs	r2, #8
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	2201      	movs	r2, #1
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d012      	beq.n	8001c62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2201      	movs	r2, #1
 8001c50:	409a      	lsls	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	2204      	movs	r2, #4
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d012      	beq.n	8001c98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	2204      	movs	r2, #4
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f043 0204 	orr.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d043      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d03c      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2210      	movs	r2, #16
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d018      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d108      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d024      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
 8001cee:	e01f      	b.n	8001d30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
 8001d00:	e016      	b.n	8001d30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0208 	bic.w	r2, r2, #8
 8001d1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2220      	movs	r2, #32
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 808f 	beq.w	8001e60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8087 	beq.w	8001e60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2220      	movs	r2, #32
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d136      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0216 	bic.w	r2, r2, #22
 8001d78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x1da>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0208 	bic.w	r2, r2, #8
 8001da8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	223f      	movs	r2, #63	; 0x3f
 8001db0:	409a      	lsls	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d07e      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
        }
        return;
 8001dd6:	e079      	b.n	8001ecc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10d      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d031      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e02c      	b.n	8001e60 <HAL_DMA_IRQHandler+0x2a0>
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d023      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e01e      	b.n	8001e60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10f      	bne.n	8001e50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0210 	bic.w	r2, r2, #16
 8001e3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d032      	beq.n	8001ece <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2205      	movs	r2, #5
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d307      	bcc.n	8001ea8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f2      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x2cc>
 8001ea6:	e000      	b.n	8001eaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ea8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
 8001eca:	e000      	b.n	8001ece <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ecc:	bf00      	nop
    }
  }
}
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d108      	bne.n	8001f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f12:	e007      	b.n	8001f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3b10      	subs	r3, #16
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <DMA_CalcBaseAndBitshift+0x64>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <DMA_CalcBaseAndBitshift+0x68>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d909      	bls.n	8001f72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f70:	e007      	b.n	8001f82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	aaaaaaab 	.word	0xaaaaaaab
 8001f98:	08004eb8 	.word	0x08004eb8

08001f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d11f      	bne.n	8001ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d856      	bhi.n	800206a <DMA_CheckFifoParam+0xce>
 8001fbc:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <DMA_CheckFifoParam+0x28>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fe7 	.word	0x08001fe7
 8001fcc:	08001fd5 	.word	0x08001fd5
 8001fd0:	0800206b 	.word	0x0800206b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d046      	beq.n	800206e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe4:	e043      	b.n	800206e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fee:	d140      	bne.n	8002072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff4:	e03d      	b.n	8002072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffe:	d121      	bne.n	8002044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d837      	bhi.n	8002076 <DMA_CheckFifoParam+0xda>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <DMA_CheckFifoParam+0x70>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	0800201d 	.word	0x0800201d
 8002010:	08002023 	.word	0x08002023
 8002014:	0800201d 	.word	0x0800201d
 8002018:	08002035 	.word	0x08002035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      break;
 8002020:	e030      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d025      	beq.n	800207a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002032:	e022      	b.n	800207a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800203c:	d11f      	bne.n	800207e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002042:	e01c      	b.n	800207e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d903      	bls.n	8002052 <DMA_CheckFifoParam+0xb6>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d003      	beq.n	8002058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002050:	e018      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      break;
 8002056:	e015      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      break;
 8002068:	e00b      	b.n	8002082 <DMA_CheckFifoParam+0xe6>
      break;
 800206a:	bf00      	nop
 800206c:	e00a      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      break;
 800206e:	bf00      	nop
 8002070:	e008      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      break;
 8002072:	bf00      	nop
 8002074:	e006      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e004      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e002      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      break;   
 800207e:	bf00      	nop
 8002080:	e000      	b.n	8002084 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
    }
  } 
  
  return status; 
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e159      	b.n	8002364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8148 	bne.w	800235e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d005      	beq.n	80020e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d017      	beq.n	8002184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a2 	beq.w	800235e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_GPIO_Init+0x2e8>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a49      	ldr	r2, [pc, #292]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x202>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x1fe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a47      	ldr	r2, [pc, #284]	; (800238c <HAL_GPIO_Init+0x2f8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x1fa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_GPIO_Init+0x2fc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x1f6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a45      	ldr	r2, [pc, #276]	; (8002394 <HAL_GPIO_Init+0x300>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x1f2>
 8002282:	2304      	movs	r3, #4
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002286:	2307      	movs	r3, #7
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_GPIO_Init+0x304>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_GPIO_Init+0x304>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f aea2 	bls.w	80020b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e267      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d075      	beq.n	800250a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002432:	2b08      	cmp	r3, #8
 8002434:	d112      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b7e      	ldr	r3, [pc, #504]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05b      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d157      	bne.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e242      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x74>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6c      	ldr	r2, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002498:	4b69      	ldr	r3, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a68      	ldr	r2, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b66      	ldr	r3, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a65      	ldr	r2, [pc, #404]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fd5c 	bl	8000f74 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fd58 	bl	8000f74 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e207      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd48 	bl	8000f74 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fd44 	bl	8000f74 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1f3      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b51      	ldr	r3, [pc, #324]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1c7      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4937      	ldr	r1, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x244>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fcfd 	bl	8000f74 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe fcf9 	bl	8000f74 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1a8      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4925      	ldr	r1, [pc, #148]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x244>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fcdc 	bl	8000f74 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe fcd8 	bl	8000f74 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e187      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d036      	beq.n	8002658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x248>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe fcbc 	bl	8000f74 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7fe fcb8 	bl	8000f74 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e167      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x200>
 800261e:	e01b      	b.n	8002658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x248>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe fca5 	bl	8000f74 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00e      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fca1 	bl	8000f74 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d907      	bls.n	800264c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e150      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002640:	40023800 	.word	0x40023800
 8002644:	42470000 	.word	0x42470000
 8002648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ea      	bne.n	800262e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8097 	beq.w	8002794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b7d      	ldr	r3, [pc, #500]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a7c      	ldr	r2, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b7a      	ldr	r3, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b77      	ldr	r3, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b74      	ldr	r3, [pc, #464]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a73      	ldr	r2, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fc61 	bl	8000f74 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe fc5d 	bl	8000f74 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e10c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x2ea>
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a63      	ldr	r2, [pc, #396]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x30c>
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a5b      	ldr	r2, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 800270c:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe fc22 	bl	8000f74 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fc1e 	bl	8000f74 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0cb      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCC_OscConfig+0x334>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe fc0c 	bl	8000f74 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fc08 	bl	8000f74 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0b5      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4a38      	ldr	r2, [pc, #224]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a1 	beq.w	80028e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d05c      	beq.n	8002864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d141      	bne.n	8002836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_RCC_OscConfig+0x478>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fbdc 	bl	8000f74 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fbd8 	bl	8000f74 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e087      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	491b      	ldr	r1, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x478>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fbb1 	bl	8000f74 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe fbad 	bl	8000f74 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e05c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x416>
 8002834:	e054      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fb9a 	bl	8000f74 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fb96 	bl	8000f74 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e045      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
 8002862:	e03d      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e038      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
 8002878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x4ec>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d028      	beq.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d121      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d11a      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fac8 	bl	8000f74 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe fac4 	bl	8000f74 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fa28 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08004ea0 	.word	0x08004ea0
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac0:	b094      	sub	sp, #80	; 0x50
 8002ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad4:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d00d      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x40>
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	f200 80e1 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aee:	e0db      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af4:	e0db      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af6:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afa:	e0d8      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b40:	0150      	lsls	r0, r2, #5
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4621      	mov	r1, r4
 8002b48:	1a51      	subs	r1, r2, r1
 8002b4a:	6139      	str	r1, [r7, #16]
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b60:	4659      	mov	r1, fp
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	018a      	lsls	r2, r1, #6
 8002b6e:	4651      	mov	r1, sl
 8002b70:	ebb2 0801 	subs.w	r8, r2, r1
 8002b74:	4659      	mov	r1, fp
 8002b76:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	4623      	mov	r3, r4
 8002b94:	eb18 0303 	adds.w	r3, r8, r3
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	eb49 0303 	adc.w	r3, r9, r3
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bae:	4629      	mov	r1, r5
 8002bb0:	024b      	lsls	r3, r1, #9
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb8:	4621      	mov	r1, r4
 8002bba:	024a      	lsls	r2, r1, #9
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bcc:	f7fd fb58 	bl	8000280 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd8:	e058      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	4611      	mov	r1, r2
 8002be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	f04f 0000 	mov.w	r0, #0
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	0159      	lsls	r1, r3, #5
 8002c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c06:	0150      	lsls	r0, r2, #5
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c12:	4649      	mov	r1, r9
 8002c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c30:	eb63 050b 	sbc.w	r5, r3, fp
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	00eb      	lsls	r3, r5, #3
 8002c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c42:	00e2      	lsls	r2, r4, #3
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	4643      	mov	r3, r8
 8002c4a:	18e3      	adds	r3, r4, r3
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	464b      	mov	r3, r9
 8002c50:	eb45 0303 	adc.w	r3, r5, r3
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c62:	4629      	mov	r1, r5
 8002c64:	028b      	lsls	r3, r1, #10
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	028a      	lsls	r2, r1, #10
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	61fa      	str	r2, [r7, #28]
 8002c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c80:	f7fd fafe 	bl	8000280 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3750      	adds	r7, #80	; 0x50
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08004eb0 	.word	0x08004eb0

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08004eb0 	.word	0x08004eb0

08002d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e041      	b.n	8002dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd ff28 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f000 f950 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d001      	beq.n	8002de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e03c      	b.n	8002e62 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_TIM_Base_Start+0xa0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d013      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_TIM_Base_Start+0xa4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_TIM_Base_Start+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_TIM_Base_Start+0xac>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <HAL_TIM_Base_Start+0xb0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d111      	bne.n	8002e50 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d010      	beq.n	8002e60 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4e:	e007      	b.n	8002e60 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40014000 	.word	0x40014000

08002e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0b4      	b.n	800300a <HAL_TIM_ConfigClockSource+0x186>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed8:	d03e      	beq.n	8002f58 <HAL_TIM_ConfigClockSource+0xd4>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	f200 8087 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	f000 8086 	beq.w	8002ff6 <HAL_TIM_ConfigClockSource+0x172>
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	d87f      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b70      	cmp	r3, #112	; 0x70
 8002ef2:	d01a      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0xa6>
 8002ef4:	2b70      	cmp	r3, #112	; 0x70
 8002ef6:	d87b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b60      	cmp	r3, #96	; 0x60
 8002efa:	d050      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x11a>
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d877      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b50      	cmp	r3, #80	; 0x50
 8002f02:	d03c      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0xfa>
 8002f04:	2b50      	cmp	r3, #80	; 0x50
 8002f06:	d873      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d058      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x13a>
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d86f      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d064      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	2b30      	cmp	r3, #48	; 0x30
 8002f16:	d86b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d060      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d867      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d05c      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d05a      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f28:	e062      	b.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	f000 f971 	bl	8003220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
      break;
 8002f56:	e04f      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	f000 f95a 	bl	8003220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f7a:	609a      	str	r2, [r3, #8]
      break;
 8002f7c:	e03c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 f8ce 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2150      	movs	r1, #80	; 0x50
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f927 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e02c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f8ed 	bl	800318a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2160      	movs	r1, #96	; 0x60
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f917 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e01c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f8ae 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2140      	movs	r1, #64	; 0x40
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f907 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e00c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 f8fe 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <TIM_Base_SetConfig+0xfc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a37      	ldr	r2, [pc, #220]	; (8003114 <TIM_Base_SetConfig+0x100>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a36      	ldr	r2, [pc, #216]	; (8003118 <TIM_Base_SetConfig+0x104>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a35      	ldr	r2, [pc, #212]	; (800311c <TIM_Base_SetConfig+0x108>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <TIM_Base_SetConfig+0xfc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01b      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d017      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a28      	ldr	r2, [pc, #160]	; (8003114 <TIM_Base_SetConfig+0x100>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <TIM_Base_SetConfig+0x104>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00f      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a26      	ldr	r2, [pc, #152]	; (800311c <TIM_Base_SetConfig+0x108>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <TIM_Base_SetConfig+0x10c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <TIM_Base_SetConfig+0x110>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_Base_SetConfig+0x8a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <TIM_Base_SetConfig+0x114>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d108      	bne.n	80030b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <TIM_Base_SetConfig+0xfc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d105      	bne.n	8003102 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]
  }
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40014000 	.word	0x40014000
 8003124:	40014400 	.word	0x40014400
 8003128:	40014800 	.word	0x40014800

0800312c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0201 	bic.w	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f023 030a 	bic.w	r3, r3, #10
 8003168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	621a      	str	r2, [r3, #32]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 0210 	bic.w	r2, r3, #16
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	f043 0307 	orr.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	431a      	orrs	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003274:	2302      	movs	r3, #2
 8003276:	e050      	b.n	800331a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d013      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10c      	bne.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40010000 	.word	0x40010000
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800
 8003334:	40000c00 	.word	0x40000c00
 8003338:	40014000 	.word	0x40014000

0800333c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e042      	b.n	80033d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fc44 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f973 	bl	800366c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d175      	bne.n	80034e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Transmit+0x2c>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e06e      	b.n	80034ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2221      	movs	r2, #33	; 0x21
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800341a:	f7fd fdab 	bl	8000f74 <HAL_GetTick>
 800341e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d108      	bne.n	8003448 <HAL_UART_Transmit+0x6c>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e003      	b.n	8003450 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003450:	e02e      	b.n	80034b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f848 	bl	80034f2 <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e03a      	b.n	80034ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3302      	adds	r3, #2
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e007      	b.n	80034a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3301      	adds	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1cb      	bne.n	8003452 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f814 	bl	80034f2 <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e006      	b.n	80034ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003502:	e03b      	b.n	800357c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d037      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fd fd32 	bl	8000f74 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	6a3a      	ldr	r2, [r7, #32]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <UART_WaitOnFlagUntilTimeout+0x30>
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e03a      	b.n	800359c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d020      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x8a>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d01d      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b08      	cmp	r3, #8
 800354c:	d116      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f81d 	bl	80035a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2208      	movs	r2, #8
 800356e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e00f      	b.n	800359c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d0b4      	beq.n	8003504 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b095      	sub	sp, #84	; 0x54
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035cc:	643a      	str	r2, [r7, #64]	; 0x40
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e5      	bne.n	80035ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3314      	adds	r3, #20
 80035e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003600:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b01      	cmp	r3, #1
 800361a:	d119      	bne.n	8003650 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	60bb      	str	r3, [r7, #8]
   return(result);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 0310 	bic.w	r3, r3, #16
 8003632:	647b      	str	r3, [r7, #68]	; 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800363c:	61ba      	str	r2, [r7, #24]
 800363e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6979      	ldr	r1, [r7, #20]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	613b      	str	r3, [r7, #16]
   return(result);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800365e:	bf00      	nop
 8003660:	3754      	adds	r7, #84	; 0x54
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b0c0      	sub	sp, #256	; 0x100
 8003672:	af00      	add	r7, sp, #0
 8003674:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	ea40 0301 	orr.w	r3, r0, r1
 8003694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c4:	f021 010c 	bic.w	r1, r1, #12
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036d2:	430b      	orrs	r3, r1
 80036d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	6999      	ldr	r1, [r3, #24]
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	ea40 0301 	orr.w	r3, r0, r1
 80036f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <UART_SetConfig+0x2cc>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d005      	beq.n	800370c <UART_SetConfig+0xa0>
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b8d      	ldr	r3, [pc, #564]	; (800393c <UART_SetConfig+0x2d0>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d104      	bne.n	8003716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800370c:	f7ff fafc 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8003710:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003714:	e003      	b.n	800371e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003716:	f7ff fae3 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800371a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	f040 810c 	bne.w	8003944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800372c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003730:	2200      	movs	r2, #0
 8003732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003736:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800373a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800373e:	4622      	mov	r2, r4
 8003740:	462b      	mov	r3, r5
 8003742:	1891      	adds	r1, r2, r2
 8003744:	65b9      	str	r1, [r7, #88]	; 0x58
 8003746:	415b      	adcs	r3, r3
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800374e:	4621      	mov	r1, r4
 8003750:	eb12 0801 	adds.w	r8, r2, r1
 8003754:	4629      	mov	r1, r5
 8003756:	eb43 0901 	adc.w	r9, r3, r1
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800376e:	4690      	mov	r8, r2
 8003770:	4699      	mov	r9, r3
 8003772:	4623      	mov	r3, r4
 8003774:	eb18 0303 	adds.w	r3, r8, r3
 8003778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800377c:	462b      	mov	r3, r5
 800377e:	eb49 0303 	adc.w	r3, r9, r3
 8003782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003792:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800379a:	460b      	mov	r3, r1
 800379c:	18db      	adds	r3, r3, r3
 800379e:	653b      	str	r3, [r7, #80]	; 0x50
 80037a0:	4613      	mov	r3, r2
 80037a2:	eb42 0303 	adc.w	r3, r2, r3
 80037a6:	657b      	str	r3, [r7, #84]	; 0x54
 80037a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037b0:	f7fc fd66 	bl	8000280 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4b61      	ldr	r3, [pc, #388]	; (8003940 <UART_SetConfig+0x2d4>)
 80037ba:	fba3 2302 	umull	r2, r3, r3, r2
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	011c      	lsls	r4, r3, #4
 80037c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037d4:	4642      	mov	r2, r8
 80037d6:	464b      	mov	r3, r9
 80037d8:	1891      	adds	r1, r2, r2
 80037da:	64b9      	str	r1, [r7, #72]	; 0x48
 80037dc:	415b      	adcs	r3, r3
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037e4:	4641      	mov	r1, r8
 80037e6:	eb12 0a01 	adds.w	sl, r2, r1
 80037ea:	4649      	mov	r1, r9
 80037ec:	eb43 0b01 	adc.w	fp, r3, r1
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003804:	4692      	mov	sl, r2
 8003806:	469b      	mov	fp, r3
 8003808:	4643      	mov	r3, r8
 800380a:	eb1a 0303 	adds.w	r3, sl, r3
 800380e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003812:	464b      	mov	r3, r9
 8003814:	eb4b 0303 	adc.w	r3, fp, r3
 8003818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003828:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800382c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003830:	460b      	mov	r3, r1
 8003832:	18db      	adds	r3, r3, r3
 8003834:	643b      	str	r3, [r7, #64]	; 0x40
 8003836:	4613      	mov	r3, r2
 8003838:	eb42 0303 	adc.w	r3, r2, r3
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
 800383e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003846:	f7fc fd1b 	bl	8000280 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4611      	mov	r1, r2
 8003850:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <UART_SetConfig+0x2d4>)
 8003852:	fba3 2301 	umull	r2, r3, r3, r1
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2264      	movs	r2, #100	; 0x64
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	1acb      	subs	r3, r1, r3
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <UART_SetConfig+0x2d4>)
 8003868:	fba3 2302 	umull	r2, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003874:	441c      	add	r4, r3
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003880:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003890:	415b      	adcs	r3, r3
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003898:	4641      	mov	r1, r8
 800389a:	1851      	adds	r1, r2, r1
 800389c:	6339      	str	r1, [r7, #48]	; 0x30
 800389e:	4649      	mov	r1, r9
 80038a0:	414b      	adcs	r3, r1
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038b0:	4659      	mov	r1, fp
 80038b2:	00cb      	lsls	r3, r1, #3
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ba:	4651      	mov	r1, sl
 80038bc:	00ca      	lsls	r2, r1, #3
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	4642      	mov	r2, r8
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038cc:	464b      	mov	r3, r9
 80038ce:	460a      	mov	r2, r1
 80038d0:	eb42 0303 	adc.w	r3, r2, r3
 80038d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038ec:	460b      	mov	r3, r1
 80038ee:	18db      	adds	r3, r3, r3
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	4613      	mov	r3, r2
 80038f4:	eb42 0303 	adc.w	r3, r2, r3
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003902:	f7fc fcbd 	bl	8000280 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <UART_SetConfig+0x2d4>)
 800390c:	fba3 1302 	umull	r1, r3, r3, r2
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	2164      	movs	r1, #100	; 0x64
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	3332      	adds	r3, #50	; 0x32
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <UART_SetConfig+0x2d4>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	f003 0207 	and.w	r2, r3, #7
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4422      	add	r2, r4
 8003932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003934:	e106      	b.n	8003b44 <UART_SetConfig+0x4d8>
 8003936:	bf00      	nop
 8003938:	40011000 	.word	0x40011000
 800393c:	40011400 	.word	0x40011400
 8003940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003948:	2200      	movs	r2, #0
 800394a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800394e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003956:	4642      	mov	r2, r8
 8003958:	464b      	mov	r3, r9
 800395a:	1891      	adds	r1, r2, r2
 800395c:	6239      	str	r1, [r7, #32]
 800395e:	415b      	adcs	r3, r3
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003966:	4641      	mov	r1, r8
 8003968:	1854      	adds	r4, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb43 0501 	adc.w	r5, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	00eb      	lsls	r3, r5, #3
 800397a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397e:	00e2      	lsls	r2, r4, #3
 8003980:	4614      	mov	r4, r2
 8003982:	461d      	mov	r5, r3
 8003984:	4643      	mov	r3, r8
 8003986:	18e3      	adds	r3, r4, r3
 8003988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800398c:	464b      	mov	r3, r9
 800398e:	eb45 0303 	adc.w	r3, r5, r3
 8003992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039b2:	4629      	mov	r1, r5
 80039b4:	008b      	lsls	r3, r1, #2
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039bc:	4621      	mov	r1, r4
 80039be:	008a      	lsls	r2, r1, #2
 80039c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039c4:	f7fc fc5c 	bl	8000280 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4b60      	ldr	r3, [pc, #384]	; (8003b50 <UART_SetConfig+0x4e4>)
 80039ce:	fba3 2302 	umull	r2, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	011c      	lsls	r4, r3, #4
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039e8:	4642      	mov	r2, r8
 80039ea:	464b      	mov	r3, r9
 80039ec:	1891      	adds	r1, r2, r2
 80039ee:	61b9      	str	r1, [r7, #24]
 80039f0:	415b      	adcs	r3, r3
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f8:	4641      	mov	r1, r8
 80039fa:	1851      	adds	r1, r2, r1
 80039fc:	6139      	str	r1, [r7, #16]
 80039fe:	4649      	mov	r1, r9
 8003a00:	414b      	adcs	r3, r1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a10:	4659      	mov	r1, fp
 8003a12:	00cb      	lsls	r3, r1, #3
 8003a14:	4651      	mov	r1, sl
 8003a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	00ca      	lsls	r2, r1, #3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	4642      	mov	r2, r8
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	460a      	mov	r2, r1
 8003a30:	eb42 0303 	adc.w	r3, r2, r3
 8003a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a50:	4649      	mov	r1, r9
 8003a52:	008b      	lsls	r3, r1, #2
 8003a54:	4641      	mov	r1, r8
 8003a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	008a      	lsls	r2, r1, #2
 8003a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a62:	f7fc fc0d 	bl	8000280 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <UART_SetConfig+0x4e4>)
 8003a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2264      	movs	r2, #100	; 0x64
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	1acb      	subs	r3, r1, r3
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	3332      	adds	r3, #50	; 0x32
 8003a80:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <UART_SetConfig+0x4e4>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8c:	441c      	add	r4, r3
 8003a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a92:	2200      	movs	r2, #0
 8003a94:	673b      	str	r3, [r7, #112]	; 0x70
 8003a96:	677a      	str	r2, [r7, #116]	; 0x74
 8003a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ade:	464b      	mov	r3, r9
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	eb42 0303 	adc.w	r3, r2, r3
 8003ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	663b      	str	r3, [r7, #96]	; 0x60
 8003af2:	667a      	str	r2, [r7, #100]	; 0x64
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b00:	4649      	mov	r1, r9
 8003b02:	008b      	lsls	r3, r1, #2
 8003b04:	4641      	mov	r1, r8
 8003b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	008a      	lsls	r2, r1, #2
 8003b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b12:	f7fc fbb5 	bl	8000280 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <UART_SetConfig+0x4e4>)
 8003b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2164      	movs	r1, #100	; 0x64
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	3332      	adds	r3, #50	; 0x32
 8003b2e:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <UART_SetConfig+0x4e4>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4422      	add	r2, r4
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b50:	51eb851f 	.word	0x51eb851f

08003b54 <std>:
 8003b54:	2300      	movs	r3, #0
 8003b56:	b510      	push	{r4, lr}
 8003b58:	4604      	mov	r4, r0
 8003b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b62:	6083      	str	r3, [r0, #8]
 8003b64:	8181      	strh	r1, [r0, #12]
 8003b66:	6643      	str	r3, [r0, #100]	; 0x64
 8003b68:	81c2      	strh	r2, [r0, #14]
 8003b6a:	6183      	str	r3, [r0, #24]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	2208      	movs	r2, #8
 8003b70:	305c      	adds	r0, #92	; 0x5c
 8003b72:	f000 fa17 	bl	8003fa4 <memset>
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <std+0x58>)
 8003b78:	6263      	str	r3, [r4, #36]	; 0x24
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <std+0x5c>)
 8003b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <std+0x60>)
 8003b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <std+0x64>)
 8003b84:	6323      	str	r3, [r4, #48]	; 0x30
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <std+0x68>)
 8003b88:	6224      	str	r4, [r4, #32]
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d006      	beq.n	8003b9c <std+0x48>
 8003b8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003b92:	4294      	cmp	r4, r2
 8003b94:	d002      	beq.n	8003b9c <std+0x48>
 8003b96:	33d0      	adds	r3, #208	; 0xd0
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	d105      	bne.n	8003ba8 <std+0x54>
 8003b9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba4:	f000 ba76 	b.w	8004094 <__retarget_lock_init_recursive>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	08003df5 	.word	0x08003df5
 8003bb0:	08003e17 	.word	0x08003e17
 8003bb4:	08003e4f 	.word	0x08003e4f
 8003bb8:	08003e73 	.word	0x08003e73
 8003bbc:	200001c8 	.word	0x200001c8

08003bc0 <stdio_exit_handler>:
 8003bc0:	4a02      	ldr	r2, [pc, #8]	; (8003bcc <stdio_exit_handler+0xc>)
 8003bc2:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <stdio_exit_handler+0x10>)
 8003bc4:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <stdio_exit_handler+0x14>)
 8003bc6:	f000 b869 	b.w	8003c9c <_fwalk_sglue>
 8003bca:	bf00      	nop
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	08004bf1 	.word	0x08004bf1
 8003bd4:	20000018 	.word	0x20000018

08003bd8 <cleanup_stdio>:
 8003bd8:	6841      	ldr	r1, [r0, #4]
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <cleanup_stdio+0x34>)
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	b510      	push	{r4, lr}
 8003be0:	4604      	mov	r4, r0
 8003be2:	d001      	beq.n	8003be8 <cleanup_stdio+0x10>
 8003be4:	f001 f804 	bl	8004bf0 <_fflush_r>
 8003be8:	68a1      	ldr	r1, [r4, #8]
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <cleanup_stdio+0x38>)
 8003bec:	4299      	cmp	r1, r3
 8003bee:	d002      	beq.n	8003bf6 <cleanup_stdio+0x1e>
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f000 fffd 	bl	8004bf0 <_fflush_r>
 8003bf6:	68e1      	ldr	r1, [r4, #12]
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <cleanup_stdio+0x3c>)
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	d004      	beq.n	8003c08 <cleanup_stdio+0x30>
 8003bfe:	4620      	mov	r0, r4
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c04:	f000 bff4 	b.w	8004bf0 <_fflush_r>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200001c8 	.word	0x200001c8
 8003c10:	20000230 	.word	0x20000230
 8003c14:	20000298 	.word	0x20000298

08003c18 <global_stdio_init.part.0>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <global_stdio_init.part.0+0x30>)
 8003c1c:	4c0b      	ldr	r4, [pc, #44]	; (8003c4c <global_stdio_init.part.0+0x34>)
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <global_stdio_init.part.0+0x38>)
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	4620      	mov	r0, r4
 8003c24:	2200      	movs	r2, #0
 8003c26:	2104      	movs	r1, #4
 8003c28:	f7ff ff94 	bl	8003b54 <std>
 8003c2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c30:	2201      	movs	r2, #1
 8003c32:	2109      	movs	r1, #9
 8003c34:	f7ff ff8e 	bl	8003b54 <std>
 8003c38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c42:	2112      	movs	r1, #18
 8003c44:	f7ff bf86 	b.w	8003b54 <std>
 8003c48:	20000300 	.word	0x20000300
 8003c4c:	200001c8 	.word	0x200001c8
 8003c50:	08003bc1 	.word	0x08003bc1

08003c54 <__sfp_lock_acquire>:
 8003c54:	4801      	ldr	r0, [pc, #4]	; (8003c5c <__sfp_lock_acquire+0x8>)
 8003c56:	f000 ba1e 	b.w	8004096 <__retarget_lock_acquire_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	20000309 	.word	0x20000309

08003c60 <__sfp_lock_release>:
 8003c60:	4801      	ldr	r0, [pc, #4]	; (8003c68 <__sfp_lock_release+0x8>)
 8003c62:	f000 ba19 	b.w	8004098 <__retarget_lock_release_recursive>
 8003c66:	bf00      	nop
 8003c68:	20000309 	.word	0x20000309

08003c6c <__sinit>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4604      	mov	r4, r0
 8003c70:	f7ff fff0 	bl	8003c54 <__sfp_lock_acquire>
 8003c74:	6a23      	ldr	r3, [r4, #32]
 8003c76:	b11b      	cbz	r3, 8003c80 <__sinit+0x14>
 8003c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c7c:	f7ff bff0 	b.w	8003c60 <__sfp_lock_release>
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <__sinit+0x28>)
 8003c82:	6223      	str	r3, [r4, #32]
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <__sinit+0x2c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f5      	bne.n	8003c78 <__sinit+0xc>
 8003c8c:	f7ff ffc4 	bl	8003c18 <global_stdio_init.part.0>
 8003c90:	e7f2      	b.n	8003c78 <__sinit+0xc>
 8003c92:	bf00      	nop
 8003c94:	08003bd9 	.word	0x08003bd9
 8003c98:	20000300 	.word	0x20000300

08003c9c <_fwalk_sglue>:
 8003c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	4688      	mov	r8, r1
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cac:	f1b9 0901 	subs.w	r9, r9, #1
 8003cb0:	d505      	bpl.n	8003cbe <_fwalk_sglue+0x22>
 8003cb2:	6824      	ldr	r4, [r4, #0]
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d1f7      	bne.n	8003ca8 <_fwalk_sglue+0xc>
 8003cb8:	4630      	mov	r0, r6
 8003cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d907      	bls.n	8003cd4 <_fwalk_sglue+0x38>
 8003cc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	d003      	beq.n	8003cd4 <_fwalk_sglue+0x38>
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4638      	mov	r0, r7
 8003cd0:	47c0      	blx	r8
 8003cd2:	4306      	orrs	r6, r0
 8003cd4:	3568      	adds	r5, #104	; 0x68
 8003cd6:	e7e9      	b.n	8003cac <_fwalk_sglue+0x10>

08003cd8 <iprintf>:
 8003cd8:	b40f      	push	{r0, r1, r2, r3}
 8003cda:	b507      	push	{r0, r1, r2, lr}
 8003cdc:	4906      	ldr	r1, [pc, #24]	; (8003cf8 <iprintf+0x20>)
 8003cde:	ab04      	add	r3, sp, #16
 8003ce0:	6808      	ldr	r0, [r1, #0]
 8003ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce6:	6881      	ldr	r1, [r0, #8]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	f000 fc51 	bl	8004590 <_vfiprintf_r>
 8003cee:	b003      	add	sp, #12
 8003cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf4:	b004      	add	sp, #16
 8003cf6:	4770      	bx	lr
 8003cf8:	20000064 	.word	0x20000064

08003cfc <_puts_r>:
 8003cfc:	6a03      	ldr	r3, [r0, #32]
 8003cfe:	b570      	push	{r4, r5, r6, lr}
 8003d00:	6884      	ldr	r4, [r0, #8]
 8003d02:	4605      	mov	r5, r0
 8003d04:	460e      	mov	r6, r1
 8003d06:	b90b      	cbnz	r3, 8003d0c <_puts_r+0x10>
 8003d08:	f7ff ffb0 	bl	8003c6c <__sinit>
 8003d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d0e:	07db      	lsls	r3, r3, #31
 8003d10:	d405      	bmi.n	8003d1e <_puts_r+0x22>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	0598      	lsls	r0, r3, #22
 8003d16:	d402      	bmi.n	8003d1e <_puts_r+0x22>
 8003d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d1a:	f000 f9bc 	bl	8004096 <__retarget_lock_acquire_recursive>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	0719      	lsls	r1, r3, #28
 8003d22:	d513      	bpl.n	8003d4c <_puts_r+0x50>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	b18b      	cbz	r3, 8003d4c <_puts_r+0x50>
 8003d28:	3e01      	subs	r6, #1
 8003d2a:	68a3      	ldr	r3, [r4, #8]
 8003d2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60a3      	str	r3, [r4, #8]
 8003d34:	b9e9      	cbnz	r1, 8003d72 <_puts_r+0x76>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da2e      	bge.n	8003d98 <_puts_r+0x9c>
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	210a      	movs	r1, #10
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 f89b 	bl	8003e7a <__swbuf_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d007      	beq.n	8003d58 <_puts_r+0x5c>
 8003d48:	250a      	movs	r5, #10
 8003d4a:	e007      	b.n	8003d5c <_puts_r+0x60>
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 f8d0 	bl	8003ef4 <__swsetup_r>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d0e7      	beq.n	8003d28 <_puts_r+0x2c>
 8003d58:	f04f 35ff 	mov.w	r5, #4294967295
 8003d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d5e:	07da      	lsls	r2, r3, #31
 8003d60:	d405      	bmi.n	8003d6e <_puts_r+0x72>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	059b      	lsls	r3, r3, #22
 8003d66:	d402      	bmi.n	8003d6e <_puts_r+0x72>
 8003d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d6a:	f000 f995 	bl	8004098 <__retarget_lock_release_recursive>
 8003d6e:	4628      	mov	r0, r5
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da04      	bge.n	8003d80 <_puts_r+0x84>
 8003d76:	69a2      	ldr	r2, [r4, #24]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	dc06      	bgt.n	8003d8a <_puts_r+0x8e>
 8003d7c:	290a      	cmp	r1, #10
 8003d7e:	d004      	beq.n	8003d8a <_puts_r+0x8e>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	6022      	str	r2, [r4, #0]
 8003d86:	7019      	strb	r1, [r3, #0]
 8003d88:	e7cf      	b.n	8003d2a <_puts_r+0x2e>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f874 	bl	8003e7a <__swbuf_r>
 8003d92:	3001      	adds	r0, #1
 8003d94:	d1c9      	bne.n	8003d2a <_puts_r+0x2e>
 8003d96:	e7df      	b.n	8003d58 <_puts_r+0x5c>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	250a      	movs	r5, #10
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	6022      	str	r2, [r4, #0]
 8003da0:	701d      	strb	r5, [r3, #0]
 8003da2:	e7db      	b.n	8003d5c <_puts_r+0x60>

08003da4 <puts>:
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <puts+0xc>)
 8003da6:	4601      	mov	r1, r0
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	f7ff bfa7 	b.w	8003cfc <_puts_r>
 8003dae:	bf00      	nop
 8003db0:	20000064 	.word	0x20000064

08003db4 <siprintf>:
 8003db4:	b40e      	push	{r1, r2, r3}
 8003db6:	b500      	push	{lr}
 8003db8:	b09c      	sub	sp, #112	; 0x70
 8003dba:	ab1d      	add	r3, sp, #116	; 0x74
 8003dbc:	9002      	str	r0, [sp, #8]
 8003dbe:	9006      	str	r0, [sp, #24]
 8003dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc4:	4809      	ldr	r0, [pc, #36]	; (8003dec <siprintf+0x38>)
 8003dc6:	9107      	str	r1, [sp, #28]
 8003dc8:	9104      	str	r1, [sp, #16]
 8003dca:	4909      	ldr	r1, [pc, #36]	; (8003df0 <siprintf+0x3c>)
 8003dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd0:	9105      	str	r1, [sp, #20]
 8003dd2:	6800      	ldr	r0, [r0, #0]
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	a902      	add	r1, sp, #8
 8003dd8:	f000 fab2 	bl	8004340 <_svfiprintf_r>
 8003ddc:	9b02      	ldr	r3, [sp, #8]
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	b01c      	add	sp, #112	; 0x70
 8003de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de8:	b003      	add	sp, #12
 8003dea:	4770      	bx	lr
 8003dec:	20000064 	.word	0x20000064
 8003df0:	ffff0208 	.word	0xffff0208

08003df4 <__sread>:
 8003df4:	b510      	push	{r4, lr}
 8003df6:	460c      	mov	r4, r1
 8003df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfc:	f000 f8fc 	bl	8003ff8 <_read_r>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	bfab      	itete	ge
 8003e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e06:	89a3      	ldrhlt	r3, [r4, #12]
 8003e08:	181b      	addge	r3, r3, r0
 8003e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e0e:	bfac      	ite	ge
 8003e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e12:	81a3      	strhlt	r3, [r4, #12]
 8003e14:	bd10      	pop	{r4, pc}

08003e16 <__swrite>:
 8003e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1a:	461f      	mov	r7, r3
 8003e1c:	898b      	ldrh	r3, [r1, #12]
 8003e1e:	05db      	lsls	r3, r3, #23
 8003e20:	4605      	mov	r5, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	4616      	mov	r6, r2
 8003e26:	d505      	bpl.n	8003e34 <__swrite+0x1e>
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f000 f8d0 	bl	8003fd4 <_lseek_r>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	4632      	mov	r2, r6
 8003e42:	463b      	mov	r3, r7
 8003e44:	4628      	mov	r0, r5
 8003e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4a:	f000 b8e7 	b.w	800401c <_write_r>

08003e4e <__sseek>:
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	460c      	mov	r4, r1
 8003e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e56:	f000 f8bd 	bl	8003fd4 <_lseek_r>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	bf15      	itete	ne
 8003e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e6a:	81a3      	strheq	r3, [r4, #12]
 8003e6c:	bf18      	it	ne
 8003e6e:	81a3      	strhne	r3, [r4, #12]
 8003e70:	bd10      	pop	{r4, pc}

08003e72 <__sclose>:
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 b89d 	b.w	8003fb4 <_close_r>

08003e7a <__swbuf_r>:
 8003e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7c:	460e      	mov	r6, r1
 8003e7e:	4614      	mov	r4, r2
 8003e80:	4605      	mov	r5, r0
 8003e82:	b118      	cbz	r0, 8003e8c <__swbuf_r+0x12>
 8003e84:	6a03      	ldr	r3, [r0, #32]
 8003e86:	b90b      	cbnz	r3, 8003e8c <__swbuf_r+0x12>
 8003e88:	f7ff fef0 	bl	8003c6c <__sinit>
 8003e8c:	69a3      	ldr	r3, [r4, #24]
 8003e8e:	60a3      	str	r3, [r4, #8]
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	071a      	lsls	r2, r3, #28
 8003e94:	d525      	bpl.n	8003ee2 <__swbuf_r+0x68>
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	b31b      	cbz	r3, 8003ee2 <__swbuf_r+0x68>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	6922      	ldr	r2, [r4, #16]
 8003e9e:	1a98      	subs	r0, r3, r2
 8003ea0:	6963      	ldr	r3, [r4, #20]
 8003ea2:	b2f6      	uxtb	r6, r6
 8003ea4:	4283      	cmp	r3, r0
 8003ea6:	4637      	mov	r7, r6
 8003ea8:	dc04      	bgt.n	8003eb4 <__swbuf_r+0x3a>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 fe9f 	bl	8004bf0 <_fflush_r>
 8003eb2:	b9e0      	cbnz	r0, 8003eee <__swbuf_r+0x74>
 8003eb4:	68a3      	ldr	r3, [r4, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	6022      	str	r2, [r4, #0]
 8003ec0:	701e      	strb	r6, [r3, #0]
 8003ec2:	6962      	ldr	r2, [r4, #20]
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d004      	beq.n	8003ed4 <__swbuf_r+0x5a>
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	07db      	lsls	r3, r3, #31
 8003ece:	d506      	bpl.n	8003ede <__swbuf_r+0x64>
 8003ed0:	2e0a      	cmp	r6, #10
 8003ed2:	d104      	bne.n	8003ede <__swbuf_r+0x64>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 fe8a 	bl	8004bf0 <_fflush_r>
 8003edc:	b938      	cbnz	r0, 8003eee <__swbuf_r+0x74>
 8003ede:	4638      	mov	r0, r7
 8003ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 f805 	bl	8003ef4 <__swsetup_r>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0d5      	beq.n	8003e9a <__swbuf_r+0x20>
 8003eee:	f04f 37ff 	mov.w	r7, #4294967295
 8003ef2:	e7f4      	b.n	8003ede <__swbuf_r+0x64>

08003ef4 <__swsetup_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <__swsetup_r+0xac>)
 8003ef8:	4605      	mov	r5, r0
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	460c      	mov	r4, r1
 8003efe:	b118      	cbz	r0, 8003f08 <__swsetup_r+0x14>
 8003f00:	6a03      	ldr	r3, [r0, #32]
 8003f02:	b90b      	cbnz	r3, 8003f08 <__swsetup_r+0x14>
 8003f04:	f7ff feb2 	bl	8003c6c <__sinit>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f0e:	0718      	lsls	r0, r3, #28
 8003f10:	d422      	bmi.n	8003f58 <__swsetup_r+0x64>
 8003f12:	06d9      	lsls	r1, r3, #27
 8003f14:	d407      	bmi.n	8003f26 <__swsetup_r+0x32>
 8003f16:	2309      	movs	r3, #9
 8003f18:	602b      	str	r3, [r5, #0]
 8003f1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	e034      	b.n	8003f90 <__swsetup_r+0x9c>
 8003f26:	0758      	lsls	r0, r3, #29
 8003f28:	d512      	bpl.n	8003f50 <__swsetup_r+0x5c>
 8003f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f2c:	b141      	cbz	r1, 8003f40 <__swsetup_r+0x4c>
 8003f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f32:	4299      	cmp	r1, r3
 8003f34:	d002      	beq.n	8003f3c <__swsetup_r+0x48>
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 f8b0 	bl	800409c <_free_r>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	f043 0308 	orr.w	r3, r3, #8
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	b94b      	cbnz	r3, 8003f70 <__swsetup_r+0x7c>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f66:	d003      	beq.n	8003f70 <__swsetup_r+0x7c>
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fe8e 	bl	8004c8c <__smakebuf_r>
 8003f70:	89a0      	ldrh	r0, [r4, #12]
 8003f72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f76:	f010 0301 	ands.w	r3, r0, #1
 8003f7a:	d00a      	beq.n	8003f92 <__swsetup_r+0x9e>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60a3      	str	r3, [r4, #8]
 8003f80:	6963      	ldr	r3, [r4, #20]
 8003f82:	425b      	negs	r3, r3
 8003f84:	61a3      	str	r3, [r4, #24]
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	b943      	cbnz	r3, 8003f9c <__swsetup_r+0xa8>
 8003f8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f8e:	d1c4      	bne.n	8003f1a <__swsetup_r+0x26>
 8003f90:	bd38      	pop	{r3, r4, r5, pc}
 8003f92:	0781      	lsls	r1, r0, #30
 8003f94:	bf58      	it	pl
 8003f96:	6963      	ldrpl	r3, [r4, #20]
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	e7f4      	b.n	8003f86 <__swsetup_r+0x92>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e7f7      	b.n	8003f90 <__swsetup_r+0x9c>
 8003fa0:	20000064 	.word	0x20000064

08003fa4 <memset>:
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <_close_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4d06      	ldr	r5, [pc, #24]	; (8003fd0 <_close_r+0x1c>)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f7fc fecb 	bl	8000d5a <_close>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d102      	bne.n	8003fce <_close_r+0x1a>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	b103      	cbz	r3, 8003fce <_close_r+0x1a>
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	20000304 	.word	0x20000304

08003fd4 <_lseek_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d07      	ldr	r5, [pc, #28]	; (8003ff4 <_lseek_r+0x20>)
 8003fd8:	4604      	mov	r4, r0
 8003fda:	4608      	mov	r0, r1
 8003fdc:	4611      	mov	r1, r2
 8003fde:	2200      	movs	r2, #0
 8003fe0:	602a      	str	r2, [r5, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f7fc fee0 	bl	8000da8 <_lseek>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_lseek_r+0x1e>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_lseek_r+0x1e>
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	20000304 	.word	0x20000304

08003ff8 <_read_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4d07      	ldr	r5, [pc, #28]	; (8004018 <_read_r+0x20>)
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	4608      	mov	r0, r1
 8004000:	4611      	mov	r1, r2
 8004002:	2200      	movs	r2, #0
 8004004:	602a      	str	r2, [r5, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f7fc fe6e 	bl	8000ce8 <_read>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_read_r+0x1e>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_read_r+0x1e>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	20000304 	.word	0x20000304

0800401c <_write_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d07      	ldr	r5, [pc, #28]	; (800403c <_write_r+0x20>)
 8004020:	4604      	mov	r4, r0
 8004022:	4608      	mov	r0, r1
 8004024:	4611      	mov	r1, r2
 8004026:	2200      	movs	r2, #0
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f7fc fe79 	bl	8000d22 <_write>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_write_r+0x1e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_write_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	20000304 	.word	0x20000304

08004040 <__errno>:
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <__errno+0x8>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000064 	.word	0x20000064

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4d0d      	ldr	r5, [pc, #52]	; (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2600      	movs	r6, #0
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4d0b      	ldr	r5, [pc, #44]	; (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	; (8004090 <__libc_init_array+0x44>)
 8004060:	f000 fee2 	bl	8004e28 <_init>
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2600      	movs	r6, #0
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f855 3b04 	ldr.w	r3, [r5], #4
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f855 3b04 	ldr.w	r3, [r5], #4
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	08004efc 	.word	0x08004efc
 8004088:	08004efc 	.word	0x08004efc
 800408c:	08004efc 	.word	0x08004efc
 8004090:	08004f00 	.word	0x08004f00

08004094 <__retarget_lock_init_recursive>:
 8004094:	4770      	bx	lr

08004096 <__retarget_lock_acquire_recursive>:
 8004096:	4770      	bx	lr

08004098 <__retarget_lock_release_recursive>:
 8004098:	4770      	bx	lr
	...

0800409c <_free_r>:
 800409c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800409e:	2900      	cmp	r1, #0
 80040a0:	d044      	beq.n	800412c <_free_r+0x90>
 80040a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a6:	9001      	str	r0, [sp, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f1a1 0404 	sub.w	r4, r1, #4
 80040ae:	bfb8      	it	lt
 80040b0:	18e4      	addlt	r4, r4, r3
 80040b2:	f000 f8df 	bl	8004274 <__malloc_lock>
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <_free_r+0x94>)
 80040b8:	9801      	ldr	r0, [sp, #4]
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	b933      	cbnz	r3, 80040cc <_free_r+0x30>
 80040be:	6063      	str	r3, [r4, #4]
 80040c0:	6014      	str	r4, [r2, #0]
 80040c2:	b003      	add	sp, #12
 80040c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040c8:	f000 b8da 	b.w	8004280 <__malloc_unlock>
 80040cc:	42a3      	cmp	r3, r4
 80040ce:	d908      	bls.n	80040e2 <_free_r+0x46>
 80040d0:	6825      	ldr	r5, [r4, #0]
 80040d2:	1961      	adds	r1, r4, r5
 80040d4:	428b      	cmp	r3, r1
 80040d6:	bf01      	itttt	eq
 80040d8:	6819      	ldreq	r1, [r3, #0]
 80040da:	685b      	ldreq	r3, [r3, #4]
 80040dc:	1949      	addeq	r1, r1, r5
 80040de:	6021      	streq	r1, [r4, #0]
 80040e0:	e7ed      	b.n	80040be <_free_r+0x22>
 80040e2:	461a      	mov	r2, r3
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b10b      	cbz	r3, 80040ec <_free_r+0x50>
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d9fa      	bls.n	80040e2 <_free_r+0x46>
 80040ec:	6811      	ldr	r1, [r2, #0]
 80040ee:	1855      	adds	r5, r2, r1
 80040f0:	42a5      	cmp	r5, r4
 80040f2:	d10b      	bne.n	800410c <_free_r+0x70>
 80040f4:	6824      	ldr	r4, [r4, #0]
 80040f6:	4421      	add	r1, r4
 80040f8:	1854      	adds	r4, r2, r1
 80040fa:	42a3      	cmp	r3, r4
 80040fc:	6011      	str	r1, [r2, #0]
 80040fe:	d1e0      	bne.n	80040c2 <_free_r+0x26>
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	6053      	str	r3, [r2, #4]
 8004106:	440c      	add	r4, r1
 8004108:	6014      	str	r4, [r2, #0]
 800410a:	e7da      	b.n	80040c2 <_free_r+0x26>
 800410c:	d902      	bls.n	8004114 <_free_r+0x78>
 800410e:	230c      	movs	r3, #12
 8004110:	6003      	str	r3, [r0, #0]
 8004112:	e7d6      	b.n	80040c2 <_free_r+0x26>
 8004114:	6825      	ldr	r5, [r4, #0]
 8004116:	1961      	adds	r1, r4, r5
 8004118:	428b      	cmp	r3, r1
 800411a:	bf04      	itt	eq
 800411c:	6819      	ldreq	r1, [r3, #0]
 800411e:	685b      	ldreq	r3, [r3, #4]
 8004120:	6063      	str	r3, [r4, #4]
 8004122:	bf04      	itt	eq
 8004124:	1949      	addeq	r1, r1, r5
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	6054      	str	r4, [r2, #4]
 800412a:	e7ca      	b.n	80040c2 <_free_r+0x26>
 800412c:	b003      	add	sp, #12
 800412e:	bd30      	pop	{r4, r5, pc}
 8004130:	2000030c 	.word	0x2000030c

08004134 <sbrk_aligned>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4e0e      	ldr	r6, [pc, #56]	; (8004170 <sbrk_aligned+0x3c>)
 8004138:	460c      	mov	r4, r1
 800413a:	6831      	ldr	r1, [r6, #0]
 800413c:	4605      	mov	r5, r0
 800413e:	b911      	cbnz	r1, 8004146 <sbrk_aligned+0x12>
 8004140:	f000 fe1c 	bl	8004d7c <_sbrk_r>
 8004144:	6030      	str	r0, [r6, #0]
 8004146:	4621      	mov	r1, r4
 8004148:	4628      	mov	r0, r5
 800414a:	f000 fe17 	bl	8004d7c <_sbrk_r>
 800414e:	1c43      	adds	r3, r0, #1
 8004150:	d00a      	beq.n	8004168 <sbrk_aligned+0x34>
 8004152:	1cc4      	adds	r4, r0, #3
 8004154:	f024 0403 	bic.w	r4, r4, #3
 8004158:	42a0      	cmp	r0, r4
 800415a:	d007      	beq.n	800416c <sbrk_aligned+0x38>
 800415c:	1a21      	subs	r1, r4, r0
 800415e:	4628      	mov	r0, r5
 8004160:	f000 fe0c 	bl	8004d7c <_sbrk_r>
 8004164:	3001      	adds	r0, #1
 8004166:	d101      	bne.n	800416c <sbrk_aligned+0x38>
 8004168:	f04f 34ff 	mov.w	r4, #4294967295
 800416c:	4620      	mov	r0, r4
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	20000310 	.word	0x20000310

08004174 <_malloc_r>:
 8004174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004178:	1ccd      	adds	r5, r1, #3
 800417a:	f025 0503 	bic.w	r5, r5, #3
 800417e:	3508      	adds	r5, #8
 8004180:	2d0c      	cmp	r5, #12
 8004182:	bf38      	it	cc
 8004184:	250c      	movcc	r5, #12
 8004186:	2d00      	cmp	r5, #0
 8004188:	4607      	mov	r7, r0
 800418a:	db01      	blt.n	8004190 <_malloc_r+0x1c>
 800418c:	42a9      	cmp	r1, r5
 800418e:	d905      	bls.n	800419c <_malloc_r+0x28>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	2600      	movs	r6, #0
 8004196:	4630      	mov	r0, r6
 8004198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800419c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004270 <_malloc_r+0xfc>
 80041a0:	f000 f868 	bl	8004274 <__malloc_lock>
 80041a4:	f8d8 3000 	ldr.w	r3, [r8]
 80041a8:	461c      	mov	r4, r3
 80041aa:	bb5c      	cbnz	r4, 8004204 <_malloc_r+0x90>
 80041ac:	4629      	mov	r1, r5
 80041ae:	4638      	mov	r0, r7
 80041b0:	f7ff ffc0 	bl	8004134 <sbrk_aligned>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	4604      	mov	r4, r0
 80041b8:	d155      	bne.n	8004266 <_malloc_r+0xf2>
 80041ba:	f8d8 4000 	ldr.w	r4, [r8]
 80041be:	4626      	mov	r6, r4
 80041c0:	2e00      	cmp	r6, #0
 80041c2:	d145      	bne.n	8004250 <_malloc_r+0xdc>
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	d048      	beq.n	800425a <_malloc_r+0xe6>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	4631      	mov	r1, r6
 80041cc:	4638      	mov	r0, r7
 80041ce:	eb04 0903 	add.w	r9, r4, r3
 80041d2:	f000 fdd3 	bl	8004d7c <_sbrk_r>
 80041d6:	4581      	cmp	r9, r0
 80041d8:	d13f      	bne.n	800425a <_malloc_r+0xe6>
 80041da:	6821      	ldr	r1, [r4, #0]
 80041dc:	1a6d      	subs	r5, r5, r1
 80041de:	4629      	mov	r1, r5
 80041e0:	4638      	mov	r0, r7
 80041e2:	f7ff ffa7 	bl	8004134 <sbrk_aligned>
 80041e6:	3001      	adds	r0, #1
 80041e8:	d037      	beq.n	800425a <_malloc_r+0xe6>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	442b      	add	r3, r5
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	f8d8 3000 	ldr.w	r3, [r8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d038      	beq.n	800426a <_malloc_r+0xf6>
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	42a2      	cmp	r2, r4
 80041fc:	d12b      	bne.n	8004256 <_malloc_r+0xe2>
 80041fe:	2200      	movs	r2, #0
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e00f      	b.n	8004224 <_malloc_r+0xb0>
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	1b52      	subs	r2, r2, r5
 8004208:	d41f      	bmi.n	800424a <_malloc_r+0xd6>
 800420a:	2a0b      	cmp	r2, #11
 800420c:	d917      	bls.n	800423e <_malloc_r+0xca>
 800420e:	1961      	adds	r1, r4, r5
 8004210:	42a3      	cmp	r3, r4
 8004212:	6025      	str	r5, [r4, #0]
 8004214:	bf18      	it	ne
 8004216:	6059      	strne	r1, [r3, #4]
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	bf08      	it	eq
 800421c:	f8c8 1000 	streq.w	r1, [r8]
 8004220:	5162      	str	r2, [r4, r5]
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	4638      	mov	r0, r7
 8004226:	f104 060b 	add.w	r6, r4, #11
 800422a:	f000 f829 	bl	8004280 <__malloc_unlock>
 800422e:	f026 0607 	bic.w	r6, r6, #7
 8004232:	1d23      	adds	r3, r4, #4
 8004234:	1af2      	subs	r2, r6, r3
 8004236:	d0ae      	beq.n	8004196 <_malloc_r+0x22>
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	50a3      	str	r3, [r4, r2]
 800423c:	e7ab      	b.n	8004196 <_malloc_r+0x22>
 800423e:	42a3      	cmp	r3, r4
 8004240:	6862      	ldr	r2, [r4, #4]
 8004242:	d1dd      	bne.n	8004200 <_malloc_r+0x8c>
 8004244:	f8c8 2000 	str.w	r2, [r8]
 8004248:	e7ec      	b.n	8004224 <_malloc_r+0xb0>
 800424a:	4623      	mov	r3, r4
 800424c:	6864      	ldr	r4, [r4, #4]
 800424e:	e7ac      	b.n	80041aa <_malloc_r+0x36>
 8004250:	4634      	mov	r4, r6
 8004252:	6876      	ldr	r6, [r6, #4]
 8004254:	e7b4      	b.n	80041c0 <_malloc_r+0x4c>
 8004256:	4613      	mov	r3, r2
 8004258:	e7cc      	b.n	80041f4 <_malloc_r+0x80>
 800425a:	230c      	movs	r3, #12
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4638      	mov	r0, r7
 8004260:	f000 f80e 	bl	8004280 <__malloc_unlock>
 8004264:	e797      	b.n	8004196 <_malloc_r+0x22>
 8004266:	6025      	str	r5, [r4, #0]
 8004268:	e7dc      	b.n	8004224 <_malloc_r+0xb0>
 800426a:	605b      	str	r3, [r3, #4]
 800426c:	deff      	udf	#255	; 0xff
 800426e:	bf00      	nop
 8004270:	2000030c 	.word	0x2000030c

08004274 <__malloc_lock>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__malloc_lock+0x8>)
 8004276:	f7ff bf0e 	b.w	8004096 <__retarget_lock_acquire_recursive>
 800427a:	bf00      	nop
 800427c:	20000308 	.word	0x20000308

08004280 <__malloc_unlock>:
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <__malloc_unlock+0x8>)
 8004282:	f7ff bf09 	b.w	8004098 <__retarget_lock_release_recursive>
 8004286:	bf00      	nop
 8004288:	20000308 	.word	0x20000308

0800428c <__ssputs_r>:
 800428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004290:	688e      	ldr	r6, [r1, #8]
 8004292:	461f      	mov	r7, r3
 8004294:	42be      	cmp	r6, r7
 8004296:	680b      	ldr	r3, [r1, #0]
 8004298:	4682      	mov	sl, r0
 800429a:	460c      	mov	r4, r1
 800429c:	4690      	mov	r8, r2
 800429e:	d82c      	bhi.n	80042fa <__ssputs_r+0x6e>
 80042a0:	898a      	ldrh	r2, [r1, #12]
 80042a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042a6:	d026      	beq.n	80042f6 <__ssputs_r+0x6a>
 80042a8:	6965      	ldr	r5, [r4, #20]
 80042aa:	6909      	ldr	r1, [r1, #16]
 80042ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042b0:	eba3 0901 	sub.w	r9, r3, r1
 80042b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042b8:	1c7b      	adds	r3, r7, #1
 80042ba:	444b      	add	r3, r9
 80042bc:	106d      	asrs	r5, r5, #1
 80042be:	429d      	cmp	r5, r3
 80042c0:	bf38      	it	cc
 80042c2:	461d      	movcc	r5, r3
 80042c4:	0553      	lsls	r3, r2, #21
 80042c6:	d527      	bpl.n	8004318 <__ssputs_r+0x8c>
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7ff ff53 	bl	8004174 <_malloc_r>
 80042ce:	4606      	mov	r6, r0
 80042d0:	b360      	cbz	r0, 800432c <__ssputs_r+0xa0>
 80042d2:	6921      	ldr	r1, [r4, #16]
 80042d4:	464a      	mov	r2, r9
 80042d6:	f000 fd61 	bl	8004d9c <memcpy>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	6126      	str	r6, [r4, #16]
 80042e8:	6165      	str	r5, [r4, #20]
 80042ea:	444e      	add	r6, r9
 80042ec:	eba5 0509 	sub.w	r5, r5, r9
 80042f0:	6026      	str	r6, [r4, #0]
 80042f2:	60a5      	str	r5, [r4, #8]
 80042f4:	463e      	mov	r6, r7
 80042f6:	42be      	cmp	r6, r7
 80042f8:	d900      	bls.n	80042fc <__ssputs_r+0x70>
 80042fa:	463e      	mov	r6, r7
 80042fc:	6820      	ldr	r0, [r4, #0]
 80042fe:	4632      	mov	r2, r6
 8004300:	4641      	mov	r1, r8
 8004302:	f000 fcff 	bl	8004d04 <memmove>
 8004306:	68a3      	ldr	r3, [r4, #8]
 8004308:	1b9b      	subs	r3, r3, r6
 800430a:	60a3      	str	r3, [r4, #8]
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	4433      	add	r3, r6
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	2000      	movs	r0, #0
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	462a      	mov	r2, r5
 800431a:	f000 fd4d 	bl	8004db8 <_realloc_r>
 800431e:	4606      	mov	r6, r0
 8004320:	2800      	cmp	r0, #0
 8004322:	d1e0      	bne.n	80042e6 <__ssputs_r+0x5a>
 8004324:	6921      	ldr	r1, [r4, #16]
 8004326:	4650      	mov	r0, sl
 8004328:	f7ff feb8 	bl	800409c <_free_r>
 800432c:	230c      	movs	r3, #12
 800432e:	f8ca 3000 	str.w	r3, [sl]
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	f04f 30ff 	mov.w	r0, #4294967295
 800433e:	e7e9      	b.n	8004314 <__ssputs_r+0x88>

08004340 <_svfiprintf_r>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	4698      	mov	r8, r3
 8004346:	898b      	ldrh	r3, [r1, #12]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	b09d      	sub	sp, #116	; 0x74
 800434c:	4607      	mov	r7, r0
 800434e:	460d      	mov	r5, r1
 8004350:	4614      	mov	r4, r2
 8004352:	d50e      	bpl.n	8004372 <_svfiprintf_r+0x32>
 8004354:	690b      	ldr	r3, [r1, #16]
 8004356:	b963      	cbnz	r3, 8004372 <_svfiprintf_r+0x32>
 8004358:	2140      	movs	r1, #64	; 0x40
 800435a:	f7ff ff0b 	bl	8004174 <_malloc_r>
 800435e:	6028      	str	r0, [r5, #0]
 8004360:	6128      	str	r0, [r5, #16]
 8004362:	b920      	cbnz	r0, 800436e <_svfiprintf_r+0x2e>
 8004364:	230c      	movs	r3, #12
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	e0d0      	b.n	8004510 <_svfiprintf_r+0x1d0>
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	616b      	str	r3, [r5, #20]
 8004372:	2300      	movs	r3, #0
 8004374:	9309      	str	r3, [sp, #36]	; 0x24
 8004376:	2320      	movs	r3, #32
 8004378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800437c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004380:	2330      	movs	r3, #48	; 0x30
 8004382:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004528 <_svfiprintf_r+0x1e8>
 8004386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800438a:	f04f 0901 	mov.w	r9, #1
 800438e:	4623      	mov	r3, r4
 8004390:	469a      	mov	sl, r3
 8004392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004396:	b10a      	cbz	r2, 800439c <_svfiprintf_r+0x5c>
 8004398:	2a25      	cmp	r2, #37	; 0x25
 800439a:	d1f9      	bne.n	8004390 <_svfiprintf_r+0x50>
 800439c:	ebba 0b04 	subs.w	fp, sl, r4
 80043a0:	d00b      	beq.n	80043ba <_svfiprintf_r+0x7a>
 80043a2:	465b      	mov	r3, fp
 80043a4:	4622      	mov	r2, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	4638      	mov	r0, r7
 80043aa:	f7ff ff6f 	bl	800428c <__ssputs_r>
 80043ae:	3001      	adds	r0, #1
 80043b0:	f000 80a9 	beq.w	8004506 <_svfiprintf_r+0x1c6>
 80043b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b6:	445a      	add	r2, fp
 80043b8:	9209      	str	r2, [sp, #36]	; 0x24
 80043ba:	f89a 3000 	ldrb.w	r3, [sl]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80a1 	beq.w	8004506 <_svfiprintf_r+0x1c6>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ce:	f10a 0a01 	add.w	sl, sl, #1
 80043d2:	9304      	str	r3, [sp, #16]
 80043d4:	9307      	str	r3, [sp, #28]
 80043d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043da:	931a      	str	r3, [sp, #104]	; 0x68
 80043dc:	4654      	mov	r4, sl
 80043de:	2205      	movs	r2, #5
 80043e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e4:	4850      	ldr	r0, [pc, #320]	; (8004528 <_svfiprintf_r+0x1e8>)
 80043e6:	f7fb fefb 	bl	80001e0 <memchr>
 80043ea:	9a04      	ldr	r2, [sp, #16]
 80043ec:	b9d8      	cbnz	r0, 8004426 <_svfiprintf_r+0xe6>
 80043ee:	06d0      	lsls	r0, r2, #27
 80043f0:	bf44      	itt	mi
 80043f2:	2320      	movmi	r3, #32
 80043f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f8:	0711      	lsls	r1, r2, #28
 80043fa:	bf44      	itt	mi
 80043fc:	232b      	movmi	r3, #43	; 0x2b
 80043fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004402:	f89a 3000 	ldrb.w	r3, [sl]
 8004406:	2b2a      	cmp	r3, #42	; 0x2a
 8004408:	d015      	beq.n	8004436 <_svfiprintf_r+0xf6>
 800440a:	9a07      	ldr	r2, [sp, #28]
 800440c:	4654      	mov	r4, sl
 800440e:	2000      	movs	r0, #0
 8004410:	f04f 0c0a 	mov.w	ip, #10
 8004414:	4621      	mov	r1, r4
 8004416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800441a:	3b30      	subs	r3, #48	; 0x30
 800441c:	2b09      	cmp	r3, #9
 800441e:	d94d      	bls.n	80044bc <_svfiprintf_r+0x17c>
 8004420:	b1b0      	cbz	r0, 8004450 <_svfiprintf_r+0x110>
 8004422:	9207      	str	r2, [sp, #28]
 8004424:	e014      	b.n	8004450 <_svfiprintf_r+0x110>
 8004426:	eba0 0308 	sub.w	r3, r0, r8
 800442a:	fa09 f303 	lsl.w	r3, r9, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	9304      	str	r3, [sp, #16]
 8004432:	46a2      	mov	sl, r4
 8004434:	e7d2      	b.n	80043dc <_svfiprintf_r+0x9c>
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	1d19      	adds	r1, r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	9103      	str	r1, [sp, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfbb      	ittet	lt
 8004442:	425b      	neglt	r3, r3
 8004444:	f042 0202 	orrlt.w	r2, r2, #2
 8004448:	9307      	strge	r3, [sp, #28]
 800444a:	9307      	strlt	r3, [sp, #28]
 800444c:	bfb8      	it	lt
 800444e:	9204      	strlt	r2, [sp, #16]
 8004450:	7823      	ldrb	r3, [r4, #0]
 8004452:	2b2e      	cmp	r3, #46	; 0x2e
 8004454:	d10c      	bne.n	8004470 <_svfiprintf_r+0x130>
 8004456:	7863      	ldrb	r3, [r4, #1]
 8004458:	2b2a      	cmp	r3, #42	; 0x2a
 800445a:	d134      	bne.n	80044c6 <_svfiprintf_r+0x186>
 800445c:	9b03      	ldr	r3, [sp, #12]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	9203      	str	r2, [sp, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	bfb8      	it	lt
 8004468:	f04f 33ff 	movlt.w	r3, #4294967295
 800446c:	3402      	adds	r4, #2
 800446e:	9305      	str	r3, [sp, #20]
 8004470:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004538 <_svfiprintf_r+0x1f8>
 8004474:	7821      	ldrb	r1, [r4, #0]
 8004476:	2203      	movs	r2, #3
 8004478:	4650      	mov	r0, sl
 800447a:	f7fb feb1 	bl	80001e0 <memchr>
 800447e:	b138      	cbz	r0, 8004490 <_svfiprintf_r+0x150>
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	eba0 000a 	sub.w	r0, r0, sl
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	4082      	lsls	r2, r0
 800448a:	4313      	orrs	r3, r2
 800448c:	3401      	adds	r4, #1
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004494:	4825      	ldr	r0, [pc, #148]	; (800452c <_svfiprintf_r+0x1ec>)
 8004496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800449a:	2206      	movs	r2, #6
 800449c:	f7fb fea0 	bl	80001e0 <memchr>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d038      	beq.n	8004516 <_svfiprintf_r+0x1d6>
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <_svfiprintf_r+0x1f0>)
 80044a6:	bb1b      	cbnz	r3, 80044f0 <_svfiprintf_r+0x1b0>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	3307      	adds	r3, #7
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	3308      	adds	r3, #8
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b6:	4433      	add	r3, r6
 80044b8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ba:	e768      	b.n	800438e <_svfiprintf_r+0x4e>
 80044bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c0:	460c      	mov	r4, r1
 80044c2:	2001      	movs	r0, #1
 80044c4:	e7a6      	b.n	8004414 <_svfiprintf_r+0xd4>
 80044c6:	2300      	movs	r3, #0
 80044c8:	3401      	adds	r4, #1
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	4620      	mov	r0, r4
 80044d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d8:	3a30      	subs	r2, #48	; 0x30
 80044da:	2a09      	cmp	r2, #9
 80044dc:	d903      	bls.n	80044e6 <_svfiprintf_r+0x1a6>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0c6      	beq.n	8004470 <_svfiprintf_r+0x130>
 80044e2:	9105      	str	r1, [sp, #20]
 80044e4:	e7c4      	b.n	8004470 <_svfiprintf_r+0x130>
 80044e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ea:	4604      	mov	r4, r0
 80044ec:	2301      	movs	r3, #1
 80044ee:	e7f0      	b.n	80044d2 <_svfiprintf_r+0x192>
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	462a      	mov	r2, r5
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <_svfiprintf_r+0x1f4>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4638      	mov	r0, r7
 80044fc:	f3af 8000 	nop.w
 8004500:	1c42      	adds	r2, r0, #1
 8004502:	4606      	mov	r6, r0
 8004504:	d1d6      	bne.n	80044b4 <_svfiprintf_r+0x174>
 8004506:	89ab      	ldrh	r3, [r5, #12]
 8004508:	065b      	lsls	r3, r3, #25
 800450a:	f53f af2d 	bmi.w	8004368 <_svfiprintf_r+0x28>
 800450e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004510:	b01d      	add	sp, #116	; 0x74
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004516:	ab03      	add	r3, sp, #12
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	462a      	mov	r2, r5
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <_svfiprintf_r+0x1f4>)
 800451e:	a904      	add	r1, sp, #16
 8004520:	4638      	mov	r0, r7
 8004522:	f000 f9bd 	bl	80048a0 <_printf_i>
 8004526:	e7eb      	b.n	8004500 <_svfiprintf_r+0x1c0>
 8004528:	08004ec0 	.word	0x08004ec0
 800452c:	08004eca 	.word	0x08004eca
 8004530:	00000000 	.word	0x00000000
 8004534:	0800428d 	.word	0x0800428d
 8004538:	08004ec6 	.word	0x08004ec6

0800453c <__sfputc_r>:
 800453c:	6893      	ldr	r3, [r2, #8]
 800453e:	3b01      	subs	r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	b410      	push	{r4}
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	da08      	bge.n	800455a <__sfputc_r+0x1e>
 8004548:	6994      	ldr	r4, [r2, #24]
 800454a:	42a3      	cmp	r3, r4
 800454c:	db01      	blt.n	8004552 <__sfputc_r+0x16>
 800454e:	290a      	cmp	r1, #10
 8004550:	d103      	bne.n	800455a <__sfputc_r+0x1e>
 8004552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004556:	f7ff bc90 	b.w	8003e7a <__swbuf_r>
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	1c58      	adds	r0, r3, #1
 800455e:	6010      	str	r0, [r2, #0]
 8004560:	7019      	strb	r1, [r3, #0]
 8004562:	4608      	mov	r0, r1
 8004564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004568:	4770      	bx	lr

0800456a <__sfputs_r>:
 800456a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456c:	4606      	mov	r6, r0
 800456e:	460f      	mov	r7, r1
 8004570:	4614      	mov	r4, r2
 8004572:	18d5      	adds	r5, r2, r3
 8004574:	42ac      	cmp	r4, r5
 8004576:	d101      	bne.n	800457c <__sfputs_r+0x12>
 8004578:	2000      	movs	r0, #0
 800457a:	e007      	b.n	800458c <__sfputs_r+0x22>
 800457c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004580:	463a      	mov	r2, r7
 8004582:	4630      	mov	r0, r6
 8004584:	f7ff ffda 	bl	800453c <__sfputc_r>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d1f3      	bne.n	8004574 <__sfputs_r+0xa>
 800458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004590 <_vfiprintf_r>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	460d      	mov	r5, r1
 8004596:	b09d      	sub	sp, #116	; 0x74
 8004598:	4614      	mov	r4, r2
 800459a:	4698      	mov	r8, r3
 800459c:	4606      	mov	r6, r0
 800459e:	b118      	cbz	r0, 80045a8 <_vfiprintf_r+0x18>
 80045a0:	6a03      	ldr	r3, [r0, #32]
 80045a2:	b90b      	cbnz	r3, 80045a8 <_vfiprintf_r+0x18>
 80045a4:	f7ff fb62 	bl	8003c6c <__sinit>
 80045a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045aa:	07d9      	lsls	r1, r3, #31
 80045ac:	d405      	bmi.n	80045ba <_vfiprintf_r+0x2a>
 80045ae:	89ab      	ldrh	r3, [r5, #12]
 80045b0:	059a      	lsls	r2, r3, #22
 80045b2:	d402      	bmi.n	80045ba <_vfiprintf_r+0x2a>
 80045b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045b6:	f7ff fd6e 	bl	8004096 <__retarget_lock_acquire_recursive>
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	071b      	lsls	r3, r3, #28
 80045be:	d501      	bpl.n	80045c4 <_vfiprintf_r+0x34>
 80045c0:	692b      	ldr	r3, [r5, #16]
 80045c2:	b99b      	cbnz	r3, 80045ec <_vfiprintf_r+0x5c>
 80045c4:	4629      	mov	r1, r5
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7ff fc94 	bl	8003ef4 <__swsetup_r>
 80045cc:	b170      	cbz	r0, 80045ec <_vfiprintf_r+0x5c>
 80045ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045d0:	07dc      	lsls	r4, r3, #31
 80045d2:	d504      	bpl.n	80045de <_vfiprintf_r+0x4e>
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	b01d      	add	sp, #116	; 0x74
 80045da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045de:	89ab      	ldrh	r3, [r5, #12]
 80045e0:	0598      	lsls	r0, r3, #22
 80045e2:	d4f7      	bmi.n	80045d4 <_vfiprintf_r+0x44>
 80045e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045e6:	f7ff fd57 	bl	8004098 <__retarget_lock_release_recursive>
 80045ea:	e7f3      	b.n	80045d4 <_vfiprintf_r+0x44>
 80045ec:	2300      	movs	r3, #0
 80045ee:	9309      	str	r3, [sp, #36]	; 0x24
 80045f0:	2320      	movs	r3, #32
 80045f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80045fa:	2330      	movs	r3, #48	; 0x30
 80045fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80047b0 <_vfiprintf_r+0x220>
 8004600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004604:	f04f 0901 	mov.w	r9, #1
 8004608:	4623      	mov	r3, r4
 800460a:	469a      	mov	sl, r3
 800460c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004610:	b10a      	cbz	r2, 8004616 <_vfiprintf_r+0x86>
 8004612:	2a25      	cmp	r2, #37	; 0x25
 8004614:	d1f9      	bne.n	800460a <_vfiprintf_r+0x7a>
 8004616:	ebba 0b04 	subs.w	fp, sl, r4
 800461a:	d00b      	beq.n	8004634 <_vfiprintf_r+0xa4>
 800461c:	465b      	mov	r3, fp
 800461e:	4622      	mov	r2, r4
 8004620:	4629      	mov	r1, r5
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ffa1 	bl	800456a <__sfputs_r>
 8004628:	3001      	adds	r0, #1
 800462a:	f000 80a9 	beq.w	8004780 <_vfiprintf_r+0x1f0>
 800462e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004630:	445a      	add	r2, fp
 8004632:	9209      	str	r2, [sp, #36]	; 0x24
 8004634:	f89a 3000 	ldrb.w	r3, [sl]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80a1 	beq.w	8004780 <_vfiprintf_r+0x1f0>
 800463e:	2300      	movs	r3, #0
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004648:	f10a 0a01 	add.w	sl, sl, #1
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	9307      	str	r3, [sp, #28]
 8004650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004654:	931a      	str	r3, [sp, #104]	; 0x68
 8004656:	4654      	mov	r4, sl
 8004658:	2205      	movs	r2, #5
 800465a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465e:	4854      	ldr	r0, [pc, #336]	; (80047b0 <_vfiprintf_r+0x220>)
 8004660:	f7fb fdbe 	bl	80001e0 <memchr>
 8004664:	9a04      	ldr	r2, [sp, #16]
 8004666:	b9d8      	cbnz	r0, 80046a0 <_vfiprintf_r+0x110>
 8004668:	06d1      	lsls	r1, r2, #27
 800466a:	bf44      	itt	mi
 800466c:	2320      	movmi	r3, #32
 800466e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004672:	0713      	lsls	r3, r2, #28
 8004674:	bf44      	itt	mi
 8004676:	232b      	movmi	r3, #43	; 0x2b
 8004678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800467c:	f89a 3000 	ldrb.w	r3, [sl]
 8004680:	2b2a      	cmp	r3, #42	; 0x2a
 8004682:	d015      	beq.n	80046b0 <_vfiprintf_r+0x120>
 8004684:	9a07      	ldr	r2, [sp, #28]
 8004686:	4654      	mov	r4, sl
 8004688:	2000      	movs	r0, #0
 800468a:	f04f 0c0a 	mov.w	ip, #10
 800468e:	4621      	mov	r1, r4
 8004690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004694:	3b30      	subs	r3, #48	; 0x30
 8004696:	2b09      	cmp	r3, #9
 8004698:	d94d      	bls.n	8004736 <_vfiprintf_r+0x1a6>
 800469a:	b1b0      	cbz	r0, 80046ca <_vfiprintf_r+0x13a>
 800469c:	9207      	str	r2, [sp, #28]
 800469e:	e014      	b.n	80046ca <_vfiprintf_r+0x13a>
 80046a0:	eba0 0308 	sub.w	r3, r0, r8
 80046a4:	fa09 f303 	lsl.w	r3, r9, r3
 80046a8:	4313      	orrs	r3, r2
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	46a2      	mov	sl, r4
 80046ae:	e7d2      	b.n	8004656 <_vfiprintf_r+0xc6>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	1d19      	adds	r1, r3, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	9103      	str	r1, [sp, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfbb      	ittet	lt
 80046bc:	425b      	neglt	r3, r3
 80046be:	f042 0202 	orrlt.w	r2, r2, #2
 80046c2:	9307      	strge	r3, [sp, #28]
 80046c4:	9307      	strlt	r3, [sp, #28]
 80046c6:	bfb8      	it	lt
 80046c8:	9204      	strlt	r2, [sp, #16]
 80046ca:	7823      	ldrb	r3, [r4, #0]
 80046cc:	2b2e      	cmp	r3, #46	; 0x2e
 80046ce:	d10c      	bne.n	80046ea <_vfiprintf_r+0x15a>
 80046d0:	7863      	ldrb	r3, [r4, #1]
 80046d2:	2b2a      	cmp	r3, #42	; 0x2a
 80046d4:	d134      	bne.n	8004740 <_vfiprintf_r+0x1b0>
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	9203      	str	r2, [sp, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfb8      	it	lt
 80046e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046e6:	3402      	adds	r4, #2
 80046e8:	9305      	str	r3, [sp, #20]
 80046ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80047c0 <_vfiprintf_r+0x230>
 80046ee:	7821      	ldrb	r1, [r4, #0]
 80046f0:	2203      	movs	r2, #3
 80046f2:	4650      	mov	r0, sl
 80046f4:	f7fb fd74 	bl	80001e0 <memchr>
 80046f8:	b138      	cbz	r0, 800470a <_vfiprintf_r+0x17a>
 80046fa:	9b04      	ldr	r3, [sp, #16]
 80046fc:	eba0 000a 	sub.w	r0, r0, sl
 8004700:	2240      	movs	r2, #64	; 0x40
 8004702:	4082      	lsls	r2, r0
 8004704:	4313      	orrs	r3, r2
 8004706:	3401      	adds	r4, #1
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800470e:	4829      	ldr	r0, [pc, #164]	; (80047b4 <_vfiprintf_r+0x224>)
 8004710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004714:	2206      	movs	r2, #6
 8004716:	f7fb fd63 	bl	80001e0 <memchr>
 800471a:	2800      	cmp	r0, #0
 800471c:	d03f      	beq.n	800479e <_vfiprintf_r+0x20e>
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <_vfiprintf_r+0x228>)
 8004720:	bb1b      	cbnz	r3, 800476a <_vfiprintf_r+0x1da>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	3307      	adds	r3, #7
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	3308      	adds	r3, #8
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004730:	443b      	add	r3, r7
 8004732:	9309      	str	r3, [sp, #36]	; 0x24
 8004734:	e768      	b.n	8004608 <_vfiprintf_r+0x78>
 8004736:	fb0c 3202 	mla	r2, ip, r2, r3
 800473a:	460c      	mov	r4, r1
 800473c:	2001      	movs	r0, #1
 800473e:	e7a6      	b.n	800468e <_vfiprintf_r+0xfe>
 8004740:	2300      	movs	r3, #0
 8004742:	3401      	adds	r4, #1
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 0c0a 	mov.w	ip, #10
 800474c:	4620      	mov	r0, r4
 800474e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004752:	3a30      	subs	r2, #48	; 0x30
 8004754:	2a09      	cmp	r2, #9
 8004756:	d903      	bls.n	8004760 <_vfiprintf_r+0x1d0>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0c6      	beq.n	80046ea <_vfiprintf_r+0x15a>
 800475c:	9105      	str	r1, [sp, #20]
 800475e:	e7c4      	b.n	80046ea <_vfiprintf_r+0x15a>
 8004760:	fb0c 2101 	mla	r1, ip, r1, r2
 8004764:	4604      	mov	r4, r0
 8004766:	2301      	movs	r3, #1
 8004768:	e7f0      	b.n	800474c <_vfiprintf_r+0x1bc>
 800476a:	ab03      	add	r3, sp, #12
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	462a      	mov	r2, r5
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <_vfiprintf_r+0x22c>)
 8004772:	a904      	add	r1, sp, #16
 8004774:	4630      	mov	r0, r6
 8004776:	f3af 8000 	nop.w
 800477a:	4607      	mov	r7, r0
 800477c:	1c78      	adds	r0, r7, #1
 800477e:	d1d6      	bne.n	800472e <_vfiprintf_r+0x19e>
 8004780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004782:	07d9      	lsls	r1, r3, #31
 8004784:	d405      	bmi.n	8004792 <_vfiprintf_r+0x202>
 8004786:	89ab      	ldrh	r3, [r5, #12]
 8004788:	059a      	lsls	r2, r3, #22
 800478a:	d402      	bmi.n	8004792 <_vfiprintf_r+0x202>
 800478c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800478e:	f7ff fc83 	bl	8004098 <__retarget_lock_release_recursive>
 8004792:	89ab      	ldrh	r3, [r5, #12]
 8004794:	065b      	lsls	r3, r3, #25
 8004796:	f53f af1d 	bmi.w	80045d4 <_vfiprintf_r+0x44>
 800479a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800479c:	e71c      	b.n	80045d8 <_vfiprintf_r+0x48>
 800479e:	ab03      	add	r3, sp, #12
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	462a      	mov	r2, r5
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <_vfiprintf_r+0x22c>)
 80047a6:	a904      	add	r1, sp, #16
 80047a8:	4630      	mov	r0, r6
 80047aa:	f000 f879 	bl	80048a0 <_printf_i>
 80047ae:	e7e4      	b.n	800477a <_vfiprintf_r+0x1ea>
 80047b0:	08004ec0 	.word	0x08004ec0
 80047b4:	08004eca 	.word	0x08004eca
 80047b8:	00000000 	.word	0x00000000
 80047bc:	0800456b 	.word	0x0800456b
 80047c0:	08004ec6 	.word	0x08004ec6

080047c4 <_printf_common>:
 80047c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	4616      	mov	r6, r2
 80047ca:	4699      	mov	r9, r3
 80047cc:	688a      	ldr	r2, [r1, #8]
 80047ce:	690b      	ldr	r3, [r1, #16]
 80047d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bfb8      	it	lt
 80047d8:	4613      	movlt	r3, r2
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e0:	4607      	mov	r7, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	b10a      	cbz	r2, 80047ea <_printf_common+0x26>
 80047e6:	3301      	adds	r3, #1
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	0699      	lsls	r1, r3, #26
 80047ee:	bf42      	ittt	mi
 80047f0:	6833      	ldrmi	r3, [r6, #0]
 80047f2:	3302      	addmi	r3, #2
 80047f4:	6033      	strmi	r3, [r6, #0]
 80047f6:	6825      	ldr	r5, [r4, #0]
 80047f8:	f015 0506 	ands.w	r5, r5, #6
 80047fc:	d106      	bne.n	800480c <_printf_common+0x48>
 80047fe:	f104 0a19 	add.w	sl, r4, #25
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	6832      	ldr	r2, [r6, #0]
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	42ab      	cmp	r3, r5
 800480a:	dc26      	bgt.n	800485a <_printf_common+0x96>
 800480c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004810:	1e13      	subs	r3, r2, #0
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	bf18      	it	ne
 8004816:	2301      	movne	r3, #1
 8004818:	0692      	lsls	r2, r2, #26
 800481a:	d42b      	bmi.n	8004874 <_printf_common+0xb0>
 800481c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d01e      	beq.n	8004868 <_printf_common+0xa4>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	6922      	ldr	r2, [r4, #16]
 800482e:	f003 0306 	and.w	r3, r3, #6
 8004832:	2b04      	cmp	r3, #4
 8004834:	bf02      	ittt	eq
 8004836:	68e5      	ldreq	r5, [r4, #12]
 8004838:	6833      	ldreq	r3, [r6, #0]
 800483a:	1aed      	subeq	r5, r5, r3
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	bf0c      	ite	eq
 8004840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004844:	2500      	movne	r5, #0
 8004846:	4293      	cmp	r3, r2
 8004848:	bfc4      	itt	gt
 800484a:	1a9b      	subgt	r3, r3, r2
 800484c:	18ed      	addgt	r5, r5, r3
 800484e:	2600      	movs	r6, #0
 8004850:	341a      	adds	r4, #26
 8004852:	42b5      	cmp	r5, r6
 8004854:	d11a      	bne.n	800488c <_printf_common+0xc8>
 8004856:	2000      	movs	r0, #0
 8004858:	e008      	b.n	800486c <_printf_common+0xa8>
 800485a:	2301      	movs	r3, #1
 800485c:	4652      	mov	r2, sl
 800485e:	4649      	mov	r1, r9
 8004860:	4638      	mov	r0, r7
 8004862:	47c0      	blx	r8
 8004864:	3001      	adds	r0, #1
 8004866:	d103      	bne.n	8004870 <_printf_common+0xac>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004870:	3501      	adds	r5, #1
 8004872:	e7c6      	b.n	8004802 <_printf_common+0x3e>
 8004874:	18e1      	adds	r1, r4, r3
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	2030      	movs	r0, #48	; 0x30
 800487a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800487e:	4422      	add	r2, r4
 8004880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004888:	3302      	adds	r3, #2
 800488a:	e7c7      	b.n	800481c <_printf_common+0x58>
 800488c:	2301      	movs	r3, #1
 800488e:	4622      	mov	r2, r4
 8004890:	4649      	mov	r1, r9
 8004892:	4638      	mov	r0, r7
 8004894:	47c0      	blx	r8
 8004896:	3001      	adds	r0, #1
 8004898:	d0e6      	beq.n	8004868 <_printf_common+0xa4>
 800489a:	3601      	adds	r6, #1
 800489c:	e7d9      	b.n	8004852 <_printf_common+0x8e>
	...

080048a0 <_printf_i>:
 80048a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	7e0f      	ldrb	r7, [r1, #24]
 80048a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048a8:	2f78      	cmp	r7, #120	; 0x78
 80048aa:	4691      	mov	r9, r2
 80048ac:	4680      	mov	r8, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	469a      	mov	sl, r3
 80048b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048b6:	d807      	bhi.n	80048c8 <_printf_i+0x28>
 80048b8:	2f62      	cmp	r7, #98	; 0x62
 80048ba:	d80a      	bhi.n	80048d2 <_printf_i+0x32>
 80048bc:	2f00      	cmp	r7, #0
 80048be:	f000 80d4 	beq.w	8004a6a <_printf_i+0x1ca>
 80048c2:	2f58      	cmp	r7, #88	; 0x58
 80048c4:	f000 80c0 	beq.w	8004a48 <_printf_i+0x1a8>
 80048c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048d0:	e03a      	b.n	8004948 <_printf_i+0xa8>
 80048d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048d6:	2b15      	cmp	r3, #21
 80048d8:	d8f6      	bhi.n	80048c8 <_printf_i+0x28>
 80048da:	a101      	add	r1, pc, #4	; (adr r1, 80048e0 <_printf_i+0x40>)
 80048dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048e0:	08004939 	.word	0x08004939
 80048e4:	0800494d 	.word	0x0800494d
 80048e8:	080048c9 	.word	0x080048c9
 80048ec:	080048c9 	.word	0x080048c9
 80048f0:	080048c9 	.word	0x080048c9
 80048f4:	080048c9 	.word	0x080048c9
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	080048c9 	.word	0x080048c9
 8004900:	080048c9 	.word	0x080048c9
 8004904:	080048c9 	.word	0x080048c9
 8004908:	080048c9 	.word	0x080048c9
 800490c:	08004a51 	.word	0x08004a51
 8004910:	08004979 	.word	0x08004979
 8004914:	08004a0b 	.word	0x08004a0b
 8004918:	080048c9 	.word	0x080048c9
 800491c:	080048c9 	.word	0x080048c9
 8004920:	08004a73 	.word	0x08004a73
 8004924:	080048c9 	.word	0x080048c9
 8004928:	08004979 	.word	0x08004979
 800492c:	080048c9 	.word	0x080048c9
 8004930:	080048c9 	.word	0x080048c9
 8004934:	08004a13 	.word	0x08004a13
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004948:	2301      	movs	r3, #1
 800494a:	e09f      	b.n	8004a8c <_printf_i+0x1ec>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	682b      	ldr	r3, [r5, #0]
 8004950:	0607      	lsls	r7, r0, #24
 8004952:	f103 0104 	add.w	r1, r3, #4
 8004956:	6029      	str	r1, [r5, #0]
 8004958:	d501      	bpl.n	800495e <_printf_i+0xbe>
 800495a:	681e      	ldr	r6, [r3, #0]
 800495c:	e003      	b.n	8004966 <_printf_i+0xc6>
 800495e:	0646      	lsls	r6, r0, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0xba>
 8004962:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004966:	2e00      	cmp	r6, #0
 8004968:	da03      	bge.n	8004972 <_printf_i+0xd2>
 800496a:	232d      	movs	r3, #45	; 0x2d
 800496c:	4276      	negs	r6, r6
 800496e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004972:	485a      	ldr	r0, [pc, #360]	; (8004adc <_printf_i+0x23c>)
 8004974:	230a      	movs	r3, #10
 8004976:	e012      	b.n	800499e <_printf_i+0xfe>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	1d19      	adds	r1, r3, #4
 800497e:	6029      	str	r1, [r5, #0]
 8004980:	0605      	lsls	r5, r0, #24
 8004982:	d501      	bpl.n	8004988 <_printf_i+0xe8>
 8004984:	681e      	ldr	r6, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0xee>
 8004988:	0641      	lsls	r1, r0, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0xe4>
 800498c:	881e      	ldrh	r6, [r3, #0]
 800498e:	4853      	ldr	r0, [pc, #332]	; (8004adc <_printf_i+0x23c>)
 8004990:	2f6f      	cmp	r7, #111	; 0x6f
 8004992:	bf0c      	ite	eq
 8004994:	2308      	moveq	r3, #8
 8004996:	230a      	movne	r3, #10
 8004998:	2100      	movs	r1, #0
 800499a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800499e:	6865      	ldr	r5, [r4, #4]
 80049a0:	60a5      	str	r5, [r4, #8]
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	bfa2      	ittt	ge
 80049a6:	6821      	ldrge	r1, [r4, #0]
 80049a8:	f021 0104 	bicge.w	r1, r1, #4
 80049ac:	6021      	strge	r1, [r4, #0]
 80049ae:	b90e      	cbnz	r6, 80049b4 <_printf_i+0x114>
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	d04b      	beq.n	8004a4c <_printf_i+0x1ac>
 80049b4:	4615      	mov	r5, r2
 80049b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ba:	fb03 6711 	mls	r7, r3, r1, r6
 80049be:	5dc7      	ldrb	r7, [r0, r7]
 80049c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049c4:	4637      	mov	r7, r6
 80049c6:	42bb      	cmp	r3, r7
 80049c8:	460e      	mov	r6, r1
 80049ca:	d9f4      	bls.n	80049b6 <_printf_i+0x116>
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d10b      	bne.n	80049e8 <_printf_i+0x148>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07de      	lsls	r6, r3, #31
 80049d4:	d508      	bpl.n	80049e8 <_printf_i+0x148>
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	4299      	cmp	r1, r3
 80049dc:	bfde      	ittt	le
 80049de:	2330      	movle	r3, #48	; 0x30
 80049e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049e8:	1b52      	subs	r2, r2, r5
 80049ea:	6122      	str	r2, [r4, #16]
 80049ec:	f8cd a000 	str.w	sl, [sp]
 80049f0:	464b      	mov	r3, r9
 80049f2:	aa03      	add	r2, sp, #12
 80049f4:	4621      	mov	r1, r4
 80049f6:	4640      	mov	r0, r8
 80049f8:	f7ff fee4 	bl	80047c4 <_printf_common>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d14a      	bne.n	8004a96 <_printf_i+0x1f6>
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	b004      	add	sp, #16
 8004a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f043 0320 	orr.w	r3, r3, #32
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	4833      	ldr	r0, [pc, #204]	; (8004ae0 <_printf_i+0x240>)
 8004a14:	2778      	movs	r7, #120	; 0x78
 8004a16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	6829      	ldr	r1, [r5, #0]
 8004a1e:	061f      	lsls	r7, r3, #24
 8004a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a24:	d402      	bmi.n	8004a2c <_printf_i+0x18c>
 8004a26:	065f      	lsls	r7, r3, #25
 8004a28:	bf48      	it	mi
 8004a2a:	b2b6      	uxthmi	r6, r6
 8004a2c:	07df      	lsls	r7, r3, #31
 8004a2e:	bf48      	it	mi
 8004a30:	f043 0320 	orrmi.w	r3, r3, #32
 8004a34:	6029      	str	r1, [r5, #0]
 8004a36:	bf48      	it	mi
 8004a38:	6023      	strmi	r3, [r4, #0]
 8004a3a:	b91e      	cbnz	r6, 8004a44 <_printf_i+0x1a4>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f023 0320 	bic.w	r3, r3, #32
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	2310      	movs	r3, #16
 8004a46:	e7a7      	b.n	8004998 <_printf_i+0xf8>
 8004a48:	4824      	ldr	r0, [pc, #144]	; (8004adc <_printf_i+0x23c>)
 8004a4a:	e7e4      	b.n	8004a16 <_printf_i+0x176>
 8004a4c:	4615      	mov	r5, r2
 8004a4e:	e7bd      	b.n	80049cc <_printf_i+0x12c>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	6826      	ldr	r6, [r4, #0]
 8004a54:	6961      	ldr	r1, [r4, #20]
 8004a56:	1d18      	adds	r0, r3, #4
 8004a58:	6028      	str	r0, [r5, #0]
 8004a5a:	0635      	lsls	r5, r6, #24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	d501      	bpl.n	8004a64 <_printf_i+0x1c4>
 8004a60:	6019      	str	r1, [r3, #0]
 8004a62:	e002      	b.n	8004a6a <_printf_i+0x1ca>
 8004a64:	0670      	lsls	r0, r6, #25
 8004a66:	d5fb      	bpl.n	8004a60 <_printf_i+0x1c0>
 8004a68:	8019      	strh	r1, [r3, #0]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	4615      	mov	r5, r2
 8004a70:	e7bc      	b.n	80049ec <_printf_i+0x14c>
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	1d1a      	adds	r2, r3, #4
 8004a76:	602a      	str	r2, [r5, #0]
 8004a78:	681d      	ldr	r5, [r3, #0]
 8004a7a:	6862      	ldr	r2, [r4, #4]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f7fb fbae 	bl	80001e0 <memchr>
 8004a84:	b108      	cbz	r0, 8004a8a <_printf_i+0x1ea>
 8004a86:	1b40      	subs	r0, r0, r5
 8004a88:	6060      	str	r0, [r4, #4]
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a94:	e7aa      	b.n	80049ec <_printf_i+0x14c>
 8004a96:	6923      	ldr	r3, [r4, #16]
 8004a98:	462a      	mov	r2, r5
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	47d0      	blx	sl
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d0ad      	beq.n	8004a00 <_printf_i+0x160>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	079b      	lsls	r3, r3, #30
 8004aa8:	d413      	bmi.n	8004ad2 <_printf_i+0x232>
 8004aaa:	68e0      	ldr	r0, [r4, #12]
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	4298      	cmp	r0, r3
 8004ab0:	bfb8      	it	lt
 8004ab2:	4618      	movlt	r0, r3
 8004ab4:	e7a6      	b.n	8004a04 <_printf_i+0x164>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4632      	mov	r2, r6
 8004aba:	4649      	mov	r1, r9
 8004abc:	4640      	mov	r0, r8
 8004abe:	47d0      	blx	sl
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d09d      	beq.n	8004a00 <_printf_i+0x160>
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	68e3      	ldr	r3, [r4, #12]
 8004ac8:	9903      	ldr	r1, [sp, #12]
 8004aca:	1a5b      	subs	r3, r3, r1
 8004acc:	42ab      	cmp	r3, r5
 8004ace:	dcf2      	bgt.n	8004ab6 <_printf_i+0x216>
 8004ad0:	e7eb      	b.n	8004aaa <_printf_i+0x20a>
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	f104 0619 	add.w	r6, r4, #25
 8004ad8:	e7f5      	b.n	8004ac6 <_printf_i+0x226>
 8004ada:	bf00      	nop
 8004adc:	08004ed1 	.word	0x08004ed1
 8004ae0:	08004ee2 	.word	0x08004ee2

08004ae4 <__sflush_r>:
 8004ae4:	898a      	ldrh	r2, [r1, #12]
 8004ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	4605      	mov	r5, r0
 8004aec:	0710      	lsls	r0, r2, #28
 8004aee:	460c      	mov	r4, r1
 8004af0:	d458      	bmi.n	8004ba4 <__sflush_r+0xc0>
 8004af2:	684b      	ldr	r3, [r1, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dc05      	bgt.n	8004b04 <__sflush_r+0x20>
 8004af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dc02      	bgt.n	8004b04 <__sflush_r+0x20>
 8004afe:	2000      	movs	r0, #0
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d0f9      	beq.n	8004afe <__sflush_r+0x1a>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b10:	682f      	ldr	r7, [r5, #0]
 8004b12:	6a21      	ldr	r1, [r4, #32]
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	d032      	beq.n	8004b7e <__sflush_r+0x9a>
 8004b18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	075a      	lsls	r2, r3, #29
 8004b1e:	d505      	bpl.n	8004b2c <__sflush_r+0x48>
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	1ac0      	subs	r0, r0, r3
 8004b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b26:	b10b      	cbz	r3, 8004b2c <__sflush_r+0x48>
 8004b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b2a:	1ac0      	subs	r0, r0, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b32:	6a21      	ldr	r1, [r4, #32]
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b0      	blx	r6
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	d106      	bne.n	8004b4c <__sflush_r+0x68>
 8004b3e:	6829      	ldr	r1, [r5, #0]
 8004b40:	291d      	cmp	r1, #29
 8004b42:	d82b      	bhi.n	8004b9c <__sflush_r+0xb8>
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <__sflush_r+0x108>)
 8004b46:	410a      	asrs	r2, r1
 8004b48:	07d6      	lsls	r6, r2, #31
 8004b4a:	d427      	bmi.n	8004b9c <__sflush_r+0xb8>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	6062      	str	r2, [r4, #4]
 8004b50:	04d9      	lsls	r1, r3, #19
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	d504      	bpl.n	8004b62 <__sflush_r+0x7e>
 8004b58:	1c42      	adds	r2, r0, #1
 8004b5a:	d101      	bne.n	8004b60 <__sflush_r+0x7c>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b903      	cbnz	r3, 8004b62 <__sflush_r+0x7e>
 8004b60:	6560      	str	r0, [r4, #84]	; 0x54
 8004b62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b64:	602f      	str	r7, [r5, #0]
 8004b66:	2900      	cmp	r1, #0
 8004b68:	d0c9      	beq.n	8004afe <__sflush_r+0x1a>
 8004b6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d002      	beq.n	8004b78 <__sflush_r+0x94>
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7ff fa92 	bl	800409c <_free_r>
 8004b78:	2000      	movs	r0, #0
 8004b7a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b7c:	e7c0      	b.n	8004b00 <__sflush_r+0x1c>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b0      	blx	r6
 8004b84:	1c41      	adds	r1, r0, #1
 8004b86:	d1c8      	bne.n	8004b1a <__sflush_r+0x36>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0c5      	beq.n	8004b1a <__sflush_r+0x36>
 8004b8e:	2b1d      	cmp	r3, #29
 8004b90:	d001      	beq.n	8004b96 <__sflush_r+0xb2>
 8004b92:	2b16      	cmp	r3, #22
 8004b94:	d101      	bne.n	8004b9a <__sflush_r+0xb6>
 8004b96:	602f      	str	r7, [r5, #0]
 8004b98:	e7b1      	b.n	8004afe <__sflush_r+0x1a>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7ad      	b.n	8004b00 <__sflush_r+0x1c>
 8004ba4:	690f      	ldr	r7, [r1, #16]
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	d0a9      	beq.n	8004afe <__sflush_r+0x1a>
 8004baa:	0793      	lsls	r3, r2, #30
 8004bac:	680e      	ldr	r6, [r1, #0]
 8004bae:	bf08      	it	eq
 8004bb0:	694b      	ldreq	r3, [r1, #20]
 8004bb2:	600f      	str	r7, [r1, #0]
 8004bb4:	bf18      	it	ne
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	eba6 0807 	sub.w	r8, r6, r7
 8004bbc:	608b      	str	r3, [r1, #8]
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	dd9c      	ble.n	8004afe <__sflush_r+0x1a>
 8004bc4:	6a21      	ldr	r1, [r4, #32]
 8004bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bc8:	4643      	mov	r3, r8
 8004bca:	463a      	mov	r2, r7
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b0      	blx	r6
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	dc06      	bgt.n	8004be2 <__sflush_r+0xfe>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	e78e      	b.n	8004b00 <__sflush_r+0x1c>
 8004be2:	4407      	add	r7, r0
 8004be4:	eba8 0800 	sub.w	r8, r8, r0
 8004be8:	e7e9      	b.n	8004bbe <__sflush_r+0xda>
 8004bea:	bf00      	nop
 8004bec:	dfbffffe 	.word	0xdfbffffe

08004bf0 <_fflush_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	690b      	ldr	r3, [r1, #16]
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	b913      	cbnz	r3, 8004c00 <_fflush_r+0x10>
 8004bfa:	2500      	movs	r5, #0
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	b118      	cbz	r0, 8004c0a <_fflush_r+0x1a>
 8004c02:	6a03      	ldr	r3, [r0, #32]
 8004c04:	b90b      	cbnz	r3, 8004c0a <_fflush_r+0x1a>
 8004c06:	f7ff f831 	bl	8003c6c <__sinit>
 8004c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f3      	beq.n	8004bfa <_fflush_r+0xa>
 8004c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c14:	07d0      	lsls	r0, r2, #31
 8004c16:	d404      	bmi.n	8004c22 <_fflush_r+0x32>
 8004c18:	0599      	lsls	r1, r3, #22
 8004c1a:	d402      	bmi.n	8004c22 <_fflush_r+0x32>
 8004c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c1e:	f7ff fa3a 	bl	8004096 <__retarget_lock_acquire_recursive>
 8004c22:	4628      	mov	r0, r5
 8004c24:	4621      	mov	r1, r4
 8004c26:	f7ff ff5d 	bl	8004ae4 <__sflush_r>
 8004c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c2c:	07da      	lsls	r2, r3, #31
 8004c2e:	4605      	mov	r5, r0
 8004c30:	d4e4      	bmi.n	8004bfc <_fflush_r+0xc>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	059b      	lsls	r3, r3, #22
 8004c36:	d4e1      	bmi.n	8004bfc <_fflush_r+0xc>
 8004c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3a:	f7ff fa2d 	bl	8004098 <__retarget_lock_release_recursive>
 8004c3e:	e7dd      	b.n	8004bfc <_fflush_r+0xc>

08004c40 <__swhatbuf_r>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	460c      	mov	r4, r1
 8004c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	b096      	sub	sp, #88	; 0x58
 8004c4c:	4615      	mov	r5, r2
 8004c4e:	461e      	mov	r6, r3
 8004c50:	da0d      	bge.n	8004c6e <__swhatbuf_r+0x2e>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c62:	2340      	movne	r3, #64	; 0x40
 8004c64:	2000      	movs	r0, #0
 8004c66:	6031      	str	r1, [r6, #0]
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	b016      	add	sp, #88	; 0x58
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	466a      	mov	r2, sp
 8004c70:	f000 f862 	bl	8004d38 <_fstat_r>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	dbec      	blt.n	8004c52 <__swhatbuf_r+0x12>
 8004c78:	9901      	ldr	r1, [sp, #4]
 8004c7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c82:	4259      	negs	r1, r3
 8004c84:	4159      	adcs	r1, r3
 8004c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8a:	e7eb      	b.n	8004c64 <__swhatbuf_r+0x24>

08004c8c <__smakebuf_r>:
 8004c8c:	898b      	ldrh	r3, [r1, #12]
 8004c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c90:	079d      	lsls	r5, r3, #30
 8004c92:	4606      	mov	r6, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	d507      	bpl.n	8004ca8 <__smakebuf_r+0x1c>
 8004c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	6163      	str	r3, [r4, #20]
 8004ca4:	b002      	add	sp, #8
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	ab01      	add	r3, sp, #4
 8004caa:	466a      	mov	r2, sp
 8004cac:	f7ff ffc8 	bl	8004c40 <__swhatbuf_r>
 8004cb0:	9900      	ldr	r1, [sp, #0]
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7ff fa5d 	bl	8004174 <_malloc_r>
 8004cba:	b948      	cbnz	r0, 8004cd0 <__smakebuf_r+0x44>
 8004cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc0:	059a      	lsls	r2, r3, #22
 8004cc2:	d4ef      	bmi.n	8004ca4 <__smakebuf_r+0x18>
 8004cc4:	f023 0303 	bic.w	r3, r3, #3
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	81a3      	strh	r3, [r4, #12]
 8004cce:	e7e3      	b.n	8004c98 <__smakebuf_r+0xc>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	6020      	str	r0, [r4, #0]
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	9b00      	ldr	r3, [sp, #0]
 8004cdc:	6163      	str	r3, [r4, #20]
 8004cde:	9b01      	ldr	r3, [sp, #4]
 8004ce0:	6120      	str	r0, [r4, #16]
 8004ce2:	b15b      	cbz	r3, 8004cfc <__smakebuf_r+0x70>
 8004ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f837 	bl	8004d5c <_isatty_r>
 8004cee:	b128      	cbz	r0, 8004cfc <__smakebuf_r+0x70>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	431d      	orrs	r5, r3
 8004d00:	81a5      	strh	r5, [r4, #12]
 8004d02:	e7cf      	b.n	8004ca4 <__smakebuf_r+0x18>

08004d04 <memmove>:
 8004d04:	4288      	cmp	r0, r1
 8004d06:	b510      	push	{r4, lr}
 8004d08:	eb01 0402 	add.w	r4, r1, r2
 8004d0c:	d902      	bls.n	8004d14 <memmove+0x10>
 8004d0e:	4284      	cmp	r4, r0
 8004d10:	4623      	mov	r3, r4
 8004d12:	d807      	bhi.n	8004d24 <memmove+0x20>
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	42a1      	cmp	r1, r4
 8004d18:	d008      	beq.n	8004d2c <memmove+0x28>
 8004d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d22:	e7f8      	b.n	8004d16 <memmove+0x12>
 8004d24:	4402      	add	r2, r0
 8004d26:	4601      	mov	r1, r0
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	d100      	bne.n	8004d2e <memmove+0x2a>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d36:	e7f7      	b.n	8004d28 <memmove+0x24>

08004d38 <_fstat_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d07      	ldr	r5, [pc, #28]	; (8004d58 <_fstat_r+0x20>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	602b      	str	r3, [r5, #0]
 8004d46:	f7fc f814 	bl	8000d72 <_fstat>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	d102      	bne.n	8004d54 <_fstat_r+0x1c>
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	b103      	cbz	r3, 8004d54 <_fstat_r+0x1c>
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	bd38      	pop	{r3, r4, r5, pc}
 8004d56:	bf00      	nop
 8004d58:	20000304 	.word	0x20000304

08004d5c <_isatty_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <_isatty_r+0x1c>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fc f813 	bl	8000d92 <_isatty>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_isatty_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_isatty_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	20000304 	.word	0x20000304

08004d7c <_sbrk_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d06      	ldr	r5, [pc, #24]	; (8004d98 <_sbrk_r+0x1c>)
 8004d80:	2300      	movs	r3, #0
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	f7fc f81c 	bl	8000dc4 <_sbrk>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_sbrk_r+0x1a>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_sbrk_r+0x1a>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	20000304 	.word	0x20000304

08004d9c <memcpy>:
 8004d9c:	440a      	add	r2, r1
 8004d9e:	4291      	cmp	r1, r2
 8004da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004da4:	d100      	bne.n	8004da8 <memcpy+0xc>
 8004da6:	4770      	bx	lr
 8004da8:	b510      	push	{r4, lr}
 8004daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004db2:	4291      	cmp	r1, r2
 8004db4:	d1f9      	bne.n	8004daa <memcpy+0xe>
 8004db6:	bd10      	pop	{r4, pc}

08004db8 <_realloc_r>:
 8004db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	460e      	mov	r6, r1
 8004dc2:	b921      	cbnz	r1, 8004dce <_realloc_r+0x16>
 8004dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc8:	4611      	mov	r1, r2
 8004dca:	f7ff b9d3 	b.w	8004174 <_malloc_r>
 8004dce:	b92a      	cbnz	r2, 8004ddc <_realloc_r+0x24>
 8004dd0:	f7ff f964 	bl	800409c <_free_r>
 8004dd4:	4625      	mov	r5, r4
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ddc:	f000 f81b 	bl	8004e16 <_malloc_usable_size_r>
 8004de0:	4284      	cmp	r4, r0
 8004de2:	4607      	mov	r7, r0
 8004de4:	d802      	bhi.n	8004dec <_realloc_r+0x34>
 8004de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dea:	d812      	bhi.n	8004e12 <_realloc_r+0x5a>
 8004dec:	4621      	mov	r1, r4
 8004dee:	4640      	mov	r0, r8
 8004df0:	f7ff f9c0 	bl	8004174 <_malloc_r>
 8004df4:	4605      	mov	r5, r0
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d0ed      	beq.n	8004dd6 <_realloc_r+0x1e>
 8004dfa:	42bc      	cmp	r4, r7
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4631      	mov	r1, r6
 8004e00:	bf28      	it	cs
 8004e02:	463a      	movcs	r2, r7
 8004e04:	f7ff ffca 	bl	8004d9c <memcpy>
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f7ff f946 	bl	800409c <_free_r>
 8004e10:	e7e1      	b.n	8004dd6 <_realloc_r+0x1e>
 8004e12:	4635      	mov	r5, r6
 8004e14:	e7df      	b.n	8004dd6 <_realloc_r+0x1e>

08004e16 <_malloc_usable_size_r>:
 8004e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e1a:	1f18      	subs	r0, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bfbc      	itt	lt
 8004e20:	580b      	ldrlt	r3, [r1, r0]
 8004e22:	18c0      	addlt	r0, r0, r3
 8004e24:	4770      	bx	lr
	...

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr
