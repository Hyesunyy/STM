
Test003-UART-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d4  080043d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043dc  080043dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080043e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  0800444c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800444c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fd1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4c  00000000  00000000  000290ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ed  00000000  00000000  0002b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164b7  00000000  00000000  0002b9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e1d  00000000  00000000  00041e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087954  00000000  00000000  0004bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027f4  00000000  00000000  000d35e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d5ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042f8 	.word	0x080042f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080042f8 	.word	0x080042f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <GetBuffer>:
#define MAX_BUF  100

char Buf[100];
int head = 0, tail = 0;
int GetBuffer(char *bb)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	int ret = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
	tail = MAX_BUF - huart2.hdmarx->Instance->NDTR; //NDTR: 잔여버퍼사이즈/ tail 값 구하는 과정
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <GetBuffer+0xbc>)
 800058a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000594:	461a      	mov	r2, r3
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <GetBuffer+0xc0>)
 8000598:	601a      	str	r2, [r3, #0]
	if(head == tail)return 0;
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <GetBuffer+0xc4>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <GetBuffer+0xc0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d101      	bne.n	80005aa <GetBuffer+0x2e>
 80005a6:	2300      	movs	r3, #0
 80005a8:	e041      	b.n	800062e <GetBuffer+0xb2>
	if(head < tail)//순방향
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <GetBuffer+0xc4>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <GetBuffer+0xc0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	da14      	bge.n	80005e0 <GetBuffer+0x64>
	{
		memcpy(bb, Buf+head , tail - head); //destinaion , source , size
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <GetBuffer+0xc4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <GetBuffer+0xc8>)
 80005be:	18d1      	adds	r1, r2, r3
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <GetBuffer+0xc0>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <GetBuffer+0xc4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f002 ffcc 	bl	800356a <memcpy>
		ret = tail - head;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <GetBuffer+0xc0>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <GetBuffer+0xc4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e01c      	b.n	800061a <GetBuffer+0x9e>
	}
	else //역방향
	{
		memcpy(bb, Buf , MAX_BUF - head);
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <GetBuffer+0xc4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80005e8:	461a      	mov	r2, r3
 80005ea:	4916      	ldr	r1, [pc, #88]	; (8000644 <GetBuffer+0xc8>)
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f002 ffbc 	bl	800356a <memcpy>
		memcpy(bb + MAX_BUF - head, Buf , tail);
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <GetBuffer+0xc4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <GetBuffer+0xc0>)
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	4910      	ldr	r1, [pc, #64]	; (8000644 <GetBuffer+0xc8>)
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ffb0 	bl	800356a <memcpy>
		ret = MAX_BUF - head + tail;  // #total Byte
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <GetBuffer+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <GetBuffer+0xc0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
	}
	head = tail; //두 값을 같게 맞춰주기
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <GetBuffer+0xc0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <GetBuffer+0xc4>)
 8000620:	6013      	str	r3, [r2, #0]
	bb[ret] = 0; // *(bb+ret) = 0과 같다.
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	return ret;
 800062c:	68fb      	ldr	r3, [r7, #12]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000084 	.word	0x20000084
 800063c:	20000194 	.word	0x20000194
 8000640:	20000190 	.word	0x20000190
 8000644:	2000012c 	.word	0x2000012c

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09a      	sub	sp, #104	; 0x68
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fb67 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f827 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8d9 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 800065a:	f000 f8b7 	bl	80007cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f88b 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   ProgramStart("UART-DMA");
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0x4c>)
 8000664:	f000 f958 	bl	8000918 <ProgramStart>
   HAL_UART_Receive_DMA(&huart2,Buf, MAX_BUF);
 8000668:	2264      	movs	r2, #100	; 0x64
 800066a:	490b      	ldr	r1, [pc, #44]	; (8000698 <main+0x50>)
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <main+0x54>)
 800066e:	f001 ff98 	bl	80025a2 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  char bb[100];
   while (1)
  {
	  //GetBuffer(bb);
	  if(GetBuffer(bb)>0) //입력이 있을 때만 출력하기 위해 입력 개수가 양수일 때망 출력
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff81 	bl	800057c <GetBuffer>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	dd04      	ble.n	800068a <main+0x42>
	  {
		  printf("Received Data : %s\r\n",bb);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <main+0x58>)
 8000686:	f002 fd8f 	bl	80031a8 <iprintf>

	  }
	  HAL_Delay(500); //1sec
 800068a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068e:	f000 fbb9 	bl	8000e04 <HAL_Delay>
	  if(GetBuffer(bb)>0) //입력이 있을 때만 출력하기 위해 입력 개수가 양수일 때망 출력
 8000692:	e7ee      	b.n	8000672 <main+0x2a>
 8000694:	08004310 	.word	0x08004310
 8000698:	2000012c 	.word	0x2000012c
 800069c:	20000084 	.word	0x20000084
 80006a0:	0800431c 	.word	0x0800431c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fede 	bl	8003474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000722:	2304      	movs	r3, #4
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f9c6 	bl	8001abc <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000736:	f000 f8d7 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc28 	bl	8001fac <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 f8c1 	bl	80008e8 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 fe1c 	bl	80023ec <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f895 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000084 	.word	0x20000084
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_DMA_Init+0x3c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <MX_DMA_Init+0x3c>)
 80007dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_DMA_Init+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f000 fc05 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f000 fc1e 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <MX_GPIO_Init+0xd0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a25      	ldr	r2, [pc, #148]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1e      	ldr	r2, [pc, #120]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4812      	ldr	r0, [pc, #72]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000898:	f001 f8f6 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_GPIO_Init+0xd8>)
 80008b4:	f000 ff4c 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b8:	2320      	movs	r3, #32
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 ff3e 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020800 	.word	0x40020800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <__io_putchar>:
//I2C_HandleTypeDef *hi2c = NULL;

//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"

int __io_putchar(int ch) // Lowest output Function
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	230a      	movs	r3, #10
 8000900:	2201      	movs	r2, #1
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <__io_putchar+0x20>)
 8000904:	f001 fdc2 	bl	800248c <HAL_UART_Transmit>
   return ch;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000084 	.word	0x20000084

08000918 <ProgramStart>:
void ProgramStart(char *str)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 8000920:	f000 f826 	bl	8000970 <cls>
   Cursor(0,0);
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f82c 	bl	8000984 <Cursor>
   printf("Program Name - %s\r\n", str);
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <ProgramStart+0x30>)
 8000930:	f002 fc3a 	bl	80031a8 <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <ProgramStart+0x34>)
 8000936:	f002 fc9d 	bl	8003274 <puts>
   standby();
 800093a:	f000 f809 	bl	8000950 <standby>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08004334 	.word	0x08004334
 800094c:	08004348 	.word	0x08004348

08000950 <standby>:

void standby()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000954:	bf00      	nop
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <standby+0x1c>)
 800095c:	f001 f87c 	bl	8001a58 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f7      	bne.n	8000956 <standby+0x6>
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020800 	.word	0x40020800

08000970 <cls>:

void cls() // 화면 clear
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
   printf("\033[2J");
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <cls+0x10>)
 8000976:	f002 fc17 	bl	80031a8 <iprintf>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800436c 	.word	0x0800436c

08000984 <Cursor>:

void Cursor(int x, int y)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 800098e:	f107 000c 	add.w	r0, r7, #12
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	4906      	ldr	r1, [pc, #24]	; (80009b0 <Cursor+0x2c>)
 8000998:	f002 fc74 	bl	8003284 <siprintf>
   puts(buf);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fc67 	bl	8003274 <puts>
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08004374 	.word	0x08004374

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 fafa 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a30      	ldr	r2, [pc, #192]	; (8000ae4 <HAL_UART_MspInit+0xe0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d15a      	bne.n	8000adc <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_UART_MspInit+0xe4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	481c      	ldr	r0, [pc, #112]	; (8000aec <HAL_UART_MspInit+0xe8>)
 8000a7a:	f000 fe69 	bl	8001750 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0xf0>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000ac2:	f000 fad5 	bl	8001070 <HAL_DMA_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000acc:	f7ff ff0c 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000ad4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_UART_MspInit+0xec>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	200000cc 	.word	0x200000cc
 8000af4:	40026088 	.word	0x40026088

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f93e 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <DMA1_Stream5_IRQHandler+0x10>)
 8000b52:	f000 fb93 	bl	800127c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000cc 	.word	0x200000cc

08000b60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b72:	f3af 8000 	nop.w
 8000b76:	4601      	mov	r1, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf0      	blt.n	8000b72 <_read+0x12>
  }

  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fe9d 	bl	80008f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
  }
  return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f002 fc50 	bl	8003510 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000198 	.word	0x20000198
 8000ca4:	200002f0 	.word	0x200002f0

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd0:	f7ff ffea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	; (8000d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f002 fc0f 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fca3 	bl	8000648 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d10:	080043e4 	.word	0x080043e4
  ldr r2, =_sbss
 8000d14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d18:	200002ec 	.word	0x200002ec

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f94f 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fe2e 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f967 	bl	8001056 <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f92f 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	2000019c 	.word	0x2000019c

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000019c 	.word	0x2000019c

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff feb6 	bl	8000dec <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e099      	b.n	80011c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ac:	e00f      	b.n	80010ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ae:	f7ff fe9d 	bl	8000dec <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d908      	bls.n	80010ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e078      	b.n	80011c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e8      	bne.n	80010ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_DMA_Init+0x158>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	2b04      	cmp	r3, #4
 8001126:	d107      	bne.n	8001138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4313      	orrs	r3, r2
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4313      	orrs	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f023 0307 	bic.w	r3, r3, #7
 800114e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	2b04      	cmp	r3, #4
 8001160:	d117      	bne.n	8001192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fa6f 	bl	8001658 <DMA_CheckFifoParam>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800118e:	2301      	movs	r3, #1
 8001190:	e016      	b.n	80011c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fa26 	bl	80015ec <DMA_CalcBaseAndBitshift>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	223f      	movs	r2, #63	; 0x3f
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	f010803f 	.word	0xf010803f

080011cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_DMA_Start_IT+0x26>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e040      	b.n	8001274 <HAL_DMA_Start_IT+0xa8>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d12f      	bne.n	8001266 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2202      	movs	r2, #2
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f9b8 	bl	8001590 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	223f      	movs	r2, #63	; 0x3f
 8001226:	409a      	lsls	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0216 	orr.w	r2, r2, #22
 800123a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0208 	orr.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e005      	b.n	8001272 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800126e:	2302      	movs	r3, #2
 8001270:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001288:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <HAL_DMA_IRQHandler+0x248>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a8e      	ldr	r2, [pc, #568]	; (80014c8 <HAL_DMA_IRQHandler+0x24c>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0a9b      	lsrs	r3, r3, #10
 8001294:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a6:	2208      	movs	r2, #8
 80012a8:	409a      	lsls	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01a      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0204 	bic.w	r2, r2, #4
 80012ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d4:	2208      	movs	r2, #8
 80012d6:	409a      	lsls	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	2201      	movs	r2, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d012      	beq.n	800131e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130a:	2201      	movs	r2, #1
 800130c:	409a      	lsls	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	f043 0202 	orr.w	r2, r3, #2
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2204      	movs	r2, #4
 8001324:	409a      	lsls	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d012      	beq.n	8001354 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	2204      	movs	r2, #4
 8001342:	409a      	lsls	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	f043 0204 	orr.w	r2, r3, #4
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	2210      	movs	r2, #16
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d043      	beq.n	80013ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d03c      	beq.n	80013ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	2210      	movs	r2, #16
 8001378:	409a      	lsls	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d108      	bne.n	80013ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d024      	beq.n	80013ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
 80013aa:	e01f      	b.n	80013ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d01b      	beq.n	80013ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
 80013bc:	e016      	b.n	80013ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d107      	bne.n	80013dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0208 	bic.w	r2, r2, #8
 80013da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	2220      	movs	r2, #32
 80013f2:	409a      	lsls	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 808f 	beq.w	800151c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8087 	beq.w	800151c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	2220      	movs	r2, #32
 8001414:	409a      	lsls	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b05      	cmp	r3, #5
 8001424:	d136      	bne.n	8001494 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0216 	bic.w	r2, r2, #22
 8001434:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001444:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <HAL_DMA_IRQHandler+0x1da>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0208 	bic.w	r2, r2, #8
 8001464:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	223f      	movs	r2, #63	; 0x3f
 800146c:	409a      	lsls	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001486:	2b00      	cmp	r3, #0
 8001488:	d07e      	beq.n	8001588 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
        }
        return;
 8001492:	e079      	b.n	8001588 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d01d      	beq.n	80014de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10d      	bne.n	80014cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d031      	beq.n	800151c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	4798      	blx	r3
 80014c0:	e02c      	b.n	800151c <HAL_DMA_IRQHandler+0x2a0>
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	4798      	blx	r3
 80014dc:	e01e      	b.n	800151c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10f      	bne.n	800150c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0210 	bic.w	r2, r2, #16
 80014fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001520:	2b00      	cmp	r3, #0
 8001522:	d032      	beq.n	800158a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d022      	beq.n	8001576 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2205      	movs	r2, #5
 8001534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	3301      	adds	r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	d307      	bcc.n	8001564 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f2      	bne.n	8001548 <HAL_DMA_IRQHandler+0x2cc>
 8001562:	e000      	b.n	8001566 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001564:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
 8001586:	e000      	b.n	800158a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001588:	bf00      	nop
    }
  }
}
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b40      	cmp	r3, #64	; 0x40
 80015bc:	d108      	bne.n	80015d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015ce:	e007      	b.n	80015e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	60da      	str	r2, [r3, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3b10      	subs	r3, #16
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <DMA_CalcBaseAndBitshift+0x64>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <DMA_CalcBaseAndBitshift+0x68>)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d909      	bls.n	800162e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	1d1a      	adds	r2, r3, #4
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	659a      	str	r2, [r3, #88]	; 0x58
 800162c:	e007      	b.n	800163e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	aaaaaaab 	.word	0xaaaaaaab
 8001654:	08004398 	.word	0x08004398

08001658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11f      	bne.n	80016b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d856      	bhi.n	8001726 <DMA_CheckFifoParam+0xce>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <DMA_CheckFifoParam+0x28>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001691 	.word	0x08001691
 8001684:	080016a3 	.word	0x080016a3
 8001688:	08001691 	.word	0x08001691
 800168c:	08001727 	.word	0x08001727
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d046      	beq.n	800172a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a0:	e043      	b.n	800172a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016aa:	d140      	bne.n	800172e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b0:	e03d      	b.n	800172e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ba:	d121      	bne.n	8001700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d837      	bhi.n	8001732 <DMA_CheckFifoParam+0xda>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x70>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016df 	.word	0x080016df
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	080016f1 	.word	0x080016f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
      break;
 80016dc:	e030      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d025      	beq.n	8001736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ee:	e022      	b.n	8001736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f8:	d11f      	bne.n	800173a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016fe:	e01c      	b.n	800173a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d903      	bls.n	800170e <DMA_CheckFifoParam+0xb6>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d003      	beq.n	8001714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800170c:	e018      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
      break;
 8001712:	e015      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      break;
 8001724:	e00b      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 8001726:	bf00      	nop
 8001728:	e00a      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800172a:	bf00      	nop
 800172c:	e008      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800172e:	bf00      	nop
 8001730:	e006      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
 8001734:	e004      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;   
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800173e:	bf00      	nop
    }
  } 
  
  return status; 
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e159      	b.n	8001a20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8148 	bne.w	8001a1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a2 	beq.w	8001a1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a52      	ldr	r2, [pc, #328]	; (8001a3c <HAL_GPIO_Init+0x2ec>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x202>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	; (8001a44 <HAL_GPIO_Init+0x2f4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1fe>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_GPIO_Init+0x2f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1fa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a46      	ldr	r2, [pc, #280]	; (8001a4c <HAL_GPIO_Init+0x2fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1f6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	; (8001a50 <HAL_GPIO_Init+0x300>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1f2>
 800193e:	2304      	movs	r3, #4
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001942:	2307      	movs	r3, #7
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	; (8001a3c <HAL_GPIO_Init+0x2ec>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_GPIO_Init+0x304>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_GPIO_Init+0x304>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x304>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_GPIO_Init+0x304>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f aea2 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e267      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d075      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d00c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae6:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d112      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4b7e      	ldr	r3, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d05b      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x108>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d157      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e242      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x74>
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a75      	ldr	r2, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xb0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a6f      	ldr	r2, [pc, #444]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6c      	ldr	r2, [pc, #432]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xb0>
 8001b54:	4b69      	ldr	r3, [pc, #420]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a68      	ldr	r2, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff f93a 	bl	8000dec <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f936 	bl	8000dec <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e207      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xc0>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f926 	bl	8000dec <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f922 	bl	8000dec <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1f3      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xe8>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x152>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1c7      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4937      	ldr	r1, [pc, #220]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f8db 	bl	8000dec <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f8d7 	bl	8000dec <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1a8      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4925      	ldr	r1, [pc, #148]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f8ba 	bl	8000dec <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f8b6 	bl	8000dec <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e187      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d036      	beq.n	8001d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x248>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f89a 	bl	8000dec <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f896 	bl	8000dec <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e167      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x200>
 8001cda:	e01b      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_OscConfig+0x248>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f883 	bl	8000dec <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	e00e      	b.n	8001d08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff f87f 	bl	8000dec <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d907      	bls.n	8001d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e150      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	42470000 	.word	0x42470000
 8001d04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ea      	bne.n	8001cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8097 	beq.w	8001e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b81      	ldr	r3, [pc, #516]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10f      	bne.n	8001d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b7d      	ldr	r3, [pc, #500]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a7c      	ldr	r2, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a73      	ldr	r2, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f83f 	bl	8000dec <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff f83b 	bl	8000dec <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e10c      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2ea>
 8001d98:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x324>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x30c>
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0x324>
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a54      	ldr	r2, [pc, #336]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d015      	beq.n	8001e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f800 	bl	8000dec <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7fe fffc 	bl	8000dec <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0cb      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0ee      	beq.n	8001df0 <HAL_RCC_OscConfig+0x334>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7fe ffea 	bl	8000dec <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe ffe6 	bl	8000dec <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0b5      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e32:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a1 	beq.w	8001f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d05c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d141      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0x478>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ffba 	bl	8000dec <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe ffb6 	bl	8000dec <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e087      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x478>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe ff8f 	bl	8000dec <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe ff8b 	bl	8000dec <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e05c      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x416>
 8001ef0:	e054      	b.n	8001f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x478>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff78 	bl	8000dec <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe ff74 	bl	8000dec <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e045      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x444>
 8001f1e:	e03d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e038      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4ec>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d028      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d121      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0cc      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d90c      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0b8      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b50      	ldr	r3, [pc, #320]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	494d      	ldr	r1, [pc, #308]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d044      	beq.n	80020cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d119      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e07f      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d003      	beq.n	800206a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002066:	2b03      	cmp	r3, #3
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06f      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e067      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 0203 	bic.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4934      	ldr	r1, [pc, #208]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800209c:	f7fe fea6 	bl	8000dec <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe fea2 	bl	8000dec <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e04f      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 020c 	and.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1eb      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d20c      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e032      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4916      	ldr	r1, [pc, #88]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	490e      	ldr	r1, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002132:	f000 f821 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002136:	4602      	mov	r2, r0
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	490a      	ldr	r1, [pc, #40]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	5ccb      	ldrb	r3, [r1, r3]
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fe06 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023c00 	.word	0x40023c00
 8002168:	40023800 	.word	0x40023800
 800216c:	08004380 	.word	0x08004380
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800217c:	b094      	sub	sp, #80	; 0x50
 800217e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002190:	4b79      	ldr	r3, [pc, #484]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d00d      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x40>
 800219c:	2b08      	cmp	r3, #8
 800219e:	f200 80e1 	bhi.w	8002364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x34>
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021aa:	e0db      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b73      	ldr	r3, [pc, #460]	; (800237c <HAL_RCC_GetSysClockFreq+0x204>)
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b0:	e0db      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b6:	e0d8      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4b6f      	ldr	r3, [pc, #444]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c2:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	2200      	movs	r2, #0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
 80021e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	f04f 0000 	mov.w	r0, #0
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	0159      	lsls	r1, r3, #5
 80021f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fc:	0150      	lsls	r0, r2, #5
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4621      	mov	r1, r4
 8002204:	1a51      	subs	r1, r2, r1
 8002206:	6139      	str	r1, [r7, #16]
 8002208:	4629      	mov	r1, r5
 800220a:	eb63 0301 	sbc.w	r3, r3, r1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800221c:	4659      	mov	r1, fp
 800221e:	018b      	lsls	r3, r1, #6
 8002220:	4651      	mov	r1, sl
 8002222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002226:	4651      	mov	r1, sl
 8002228:	018a      	lsls	r2, r1, #6
 800222a:	4651      	mov	r1, sl
 800222c:	ebb2 0801 	subs.w	r8, r2, r1
 8002230:	4659      	mov	r1, fp
 8002232:	eb63 0901 	sbc.w	r9, r3, r1
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	4623      	mov	r3, r4
 8002250:	eb18 0303 	adds.w	r3, r8, r3
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	462b      	mov	r3, r5
 8002258:	eb49 0303 	adc.w	r3, r9, r3
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226a:	4629      	mov	r1, r5
 800226c:	024b      	lsls	r3, r1, #9
 800226e:	4621      	mov	r1, r4
 8002270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002274:	4621      	mov	r1, r4
 8002276:	024a      	lsls	r2, r1, #9
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	2200      	movs	r2, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002288:	f7fd fffa 	bl	8000280 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002294:	e058      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	2200      	movs	r2, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	4611      	mov	r1, r2
 80022a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	0159      	lsls	r1, r3, #5
 80022be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c2:	0150      	lsls	r0, r2, #5
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4641      	mov	r1, r8
 80022ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ce:	4649      	mov	r1, r9
 80022d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022e8:	ebb2 040a 	subs.w	r4, r2, sl
 80022ec:	eb63 050b 	sbc.w	r5, r3, fp
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	00eb      	lsls	r3, r5, #3
 80022fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	4643      	mov	r3, r8
 8002306:	18e3      	adds	r3, r4, r3
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	464b      	mov	r3, r9
 800230c:	eb45 0303 	adc.w	r3, r5, r3
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231e:	4629      	mov	r1, r5
 8002320:	028b      	lsls	r3, r1, #10
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002328:	4621      	mov	r1, r4
 800232a:	028a      	lsls	r2, r1, #10
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002332:	2200      	movs	r2, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	61fa      	str	r2, [r7, #28]
 8002338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800233c:	f7fd ffa0 	bl	8000280 <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002362:	e002      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetSysClockFreq+0x204>)
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800236c:	4618      	mov	r0, r3
 800236e:	3750      	adds	r7, #80	; 0x50
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	00f42400 	.word	0x00f42400
 8002380:	007a1200 	.word	0x007a1200

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08004390 	.word	0x08004390

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffdc 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0b5b      	lsrs	r3, r3, #13
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08004390 	.word	0x08004390

080023ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e042      	b.n	8002484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe faf6 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fb83 	bl	8002b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d175      	bne.n	8002598 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_UART_Transmit+0x2c>
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e06e      	b.n	800259a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fc8f 	bl	8000dec <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d108      	bne.n	80024f8 <HAL_UART_Transmit+0x6c>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e003      	b.n	8002500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002500:	e02e      	b.n	8002560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f995 	bl	800283c <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03a      	b.n	800259a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3302      	adds	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e007      	b.n	8002552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1cb      	bne.n	8002502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f961 	bl	800283c <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e006      	b.n	800259a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d112      	bne.n	80025e2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Receive_DMA+0x26>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e00b      	b.n	80025e4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	461a      	mov	r2, r3
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f989 	bl	80028f0 <UART_Start_Receive_DMA>
 80025de:	4603      	mov	r3, r0
 80025e0:	e000      	b.n	80025e4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b09c      	sub	sp, #112	; 0x70
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d172      	bne.n	8002742 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800265c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265e:	2200      	movs	r2, #0
 8002660:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002678:	66bb      	str	r3, [r7, #104]	; 0x68
 800267a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002682:	65ba      	str	r2, [r7, #88]	; 0x58
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e5      	bne.n	8002662 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3314      	adds	r3, #20
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	667b      	str	r3, [r7, #100]	; 0x64
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3314      	adds	r3, #20
 80026b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026b6:	647a      	str	r2, [r7, #68]	; 0x44
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e5      	bne.n	8002696 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	623b      	str	r3, [r7, #32]
   return(result);
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
 80026e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026ea:	633a      	str	r2, [r7, #48]	; 0x30
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e5      	bne.n	80026ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002700:	2220      	movs	r2, #32
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	2b01      	cmp	r3, #1
 800270c:	d119      	bne.n	8002742 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	60fb      	str	r3, [r7, #12]
   return(result);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f023 0310 	bic.w	r3, r3, #16
 8002724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800272e:	61fa      	str	r2, [r7, #28]
 8002730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	617b      	str	r3, [r7, #20]
   return(result);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e5      	bne.n	800270e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002758:	f7ff ff66 	bl	8002628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800275c:	e002      	b.n	8002764 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800275e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002760:	f7ff ff44 	bl	80025ec <HAL_UART_RxCpltCallback>
}
 8002764:	bf00      	nop
 8002766:	3770      	adds	r7, #112	; 0x70
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	b29b      	uxth	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff ff48 	bl	8002628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002798:	e002      	b.n	80027a0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff30 	bl	8002600 <HAL_UART_RxHalfCpltCallback>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b21      	cmp	r3, #33	; 0x21
 80027da:	d108      	bne.n	80027ee <UART_DMAError+0x46>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	f000 f91b 	bl	8002a24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b22      	cmp	r3, #34	; 0x22
 800280e:	d108      	bne.n	8002822 <UART_DMAError+0x7a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2200      	movs	r2, #0
 800281a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800281c:	68b8      	ldr	r0, [r7, #8]
 800281e:	f000 f929 	bl	8002a74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800282e:	68b8      	ldr	r0, [r7, #8]
 8002830:	f7ff fef0 	bl	8002614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284c:	e03b      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d037      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fac9 	bl	8000dec <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <UART_WaitOnFlagUntilTimeout+0x30>
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03a      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d023      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d020      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d01d      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b08      	cmp	r3, #8
 8002896:	d116      	bne.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8e0 	bl	8002a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2208      	movs	r2, #8
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00f      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d0b4      	beq.n	800284e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b098      	sub	sp, #96	; 0x60
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	88fa      	ldrh	r2, [r7, #6]
 8002908:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2222      	movs	r2, #34	; 0x22
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <UART_Start_Receive_DMA+0x128>)
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	4a3d      	ldr	r2, [pc, #244]	; (8002a1c <UART_Start_Receive_DMA+0x12c>)
 8002926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <UART_Start_Receive_DMA+0x130>)
 800292e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	2200      	movs	r2, #0
 8002936:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3304      	adds	r3, #4
 8002948:	4619      	mov	r1, r3
 800294a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f7fe fc3c 	bl	80011cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d019      	beq.n	80029a6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297c:	e853 3f00 	ldrex	r3, [r3]
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	65bb      	str	r3, [r7, #88]	; 0x58
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002992:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002994:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e5      	bne.n	8002972 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	657b      	str	r3, [r7, #84]	; 0x54
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e5      	bne.n	80029a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3314      	adds	r3, #20
 80029e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	617b      	str	r3, [r7, #20]
   return(result);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f0:	653b      	str	r3, [r7, #80]	; 0x50
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029fa:	627a      	str	r2, [r7, #36]	; 0x24
 80029fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e5      	bne.n	80029da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3760      	adds	r7, #96	; 0x60
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	08002641 	.word	0x08002641
 8002a1c:	0800276d 	.word	0x0800276d
 8002a20:	080027a9 	.word	0x080027a9

08002a24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	61ba      	str	r2, [r7, #24]
 8002a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	6979      	ldr	r1, [r7, #20]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	613b      	str	r3, [r7, #16]
   return(result);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002a68:	bf00      	nop
 8002a6a:	3724      	adds	r7, #36	; 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b095      	sub	sp, #84	; 0x54
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e5      	bne.n	8002a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3314      	adds	r3, #20
 8002ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad8:	e841 2300 	strex	r3, r2, [r1]
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e5      	bne.n	8002ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d119      	bne.n	8002b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	647b      	str	r3, [r7, #68]	; 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b0c:	61ba      	str	r2, [r7, #24]
 8002b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b10:	6979      	ldr	r1, [r7, #20]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	e841 2300 	strex	r3, r2, [r1]
 8002b18:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e5      	bne.n	8002aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b2e:	bf00      	nop
 8002b30:	3754      	adds	r7, #84	; 0x54
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b0c0      	sub	sp, #256	; 0x100
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	ea40 0301 	orr.w	r3, r0, r1
 8002b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b94:	f021 010c 	bic.w	r1, r1, #12
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	6999      	ldr	r1, [r3, #24]
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	ea40 0301 	orr.w	r3, r0, r1
 8002bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <UART_SetConfig+0x2cc>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d005      	beq.n	8002bdc <UART_SetConfig+0xa0>
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b8d      	ldr	r3, [pc, #564]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d104      	bne.n	8002be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bdc:	f7ff fbf2 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002be4:	e003      	b.n	8002bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7ff fbd9 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8002bea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf8:	f040 810c 	bne.w	8002e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	1891      	adds	r1, r2, r2
 8002c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c16:	415b      	adcs	r3, r3
 8002c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c1e:	4621      	mov	r1, r4
 8002c20:	eb12 0801 	adds.w	r8, r2, r1
 8002c24:	4629      	mov	r1, r5
 8002c26:	eb43 0901 	adc.w	r9, r3, r1
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3e:	4690      	mov	r8, r2
 8002c40:	4699      	mov	r9, r3
 8002c42:	4623      	mov	r3, r4
 8002c44:	eb18 0303 	adds.w	r3, r8, r3
 8002c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	eb49 0303 	adc.w	r3, r9, r3
 8002c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	18db      	adds	r3, r3, r3
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c70:	4613      	mov	r3, r2
 8002c72:	eb42 0303 	adc.w	r3, r2, r3
 8002c76:	657b      	str	r3, [r7, #84]	; 0x54
 8002c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c80:	f7fd fafe 	bl	8000280 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4b61      	ldr	r3, [pc, #388]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	011c      	lsls	r4, r3, #4
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cac:	415b      	adcs	r3, r3
 8002cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8002cba:	4649      	mov	r1, r9
 8002cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd4:	4692      	mov	sl, r2
 8002cd6:	469b      	mov	fp, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	eb1a 0303 	adds.w	r3, sl, r3
 8002cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d00:	460b      	mov	r3, r1
 8002d02:	18db      	adds	r3, r3, r3
 8002d04:	643b      	str	r3, [r7, #64]	; 0x40
 8002d06:	4613      	mov	r3, r2
 8002d08:	eb42 0303 	adc.w	r3, r2, r3
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d16:	f7fd fab3 	bl	8000280 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002d22:	fba3 2301 	umull	r2, r3, r3, r1
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2264      	movs	r2, #100	; 0x64
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	1acb      	subs	r3, r1, r3
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002d38:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d44:	441c      	add	r4, r3
 8002d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d60:	415b      	adcs	r3, r3
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d68:	4641      	mov	r1, r8
 8002d6a:	1851      	adds	r1, r2, r1
 8002d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d6e:	4649      	mov	r1, r9
 8002d70:	414b      	adcs	r3, r1
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d80:	4659      	mov	r1, fp
 8002d82:	00cb      	lsls	r3, r1, #3
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	00ca      	lsls	r2, r1, #3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	4642      	mov	r2, r8
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	460a      	mov	r2, r1
 8002da0:	eb42 0303 	adc.w	r3, r2, r3
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002db4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	18db      	adds	r3, r3, r3
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	eb42 0303 	adc.w	r3, r2, r3
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dd2:	f7fd fa55 	bl	8000280 <__aeabi_uldivmod>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2164      	movs	r1, #100	; 0x64
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	f003 0207 	and.w	r2, r3, #7
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4422      	add	r2, r4
 8002e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e04:	e106      	b.n	8003014 <UART_SetConfig+0x4d8>
 8002e06:	bf00      	nop
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40011400 	.word	0x40011400
 8002e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e26:	4642      	mov	r2, r8
 8002e28:	464b      	mov	r3, r9
 8002e2a:	1891      	adds	r1, r2, r2
 8002e2c:	6239      	str	r1, [r7, #32]
 8002e2e:	415b      	adcs	r3, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e36:	4641      	mov	r1, r8
 8002e38:	1854      	adds	r4, r2, r1
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	eb43 0501 	adc.w	r5, r3, r1
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	eb45 0303 	adc.w	r3, r5, r3
 8002e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e82:	4629      	mov	r1, r5
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	008a      	lsls	r2, r1, #2
 8002e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e94:	f7fd f9f4 	bl	8000280 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4b60      	ldr	r3, [pc, #384]	; (8003020 <UART_SetConfig+0x4e4>)
 8002e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	011c      	lsls	r4, r3, #4
 8002ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	61b9      	str	r1, [r7, #24]
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	4641      	mov	r1, r8
 8002eca:	1851      	adds	r1, r2, r1
 8002ecc:	6139      	str	r1, [r7, #16]
 8002ece:	4649      	mov	r1, r9
 8002ed0:	414b      	adcs	r3, r1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	00cb      	lsls	r3, r1, #3
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eea:	4651      	mov	r1, sl
 8002eec:	00ca      	lsls	r2, r1, #3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002efc:	464b      	mov	r3, r9
 8002efe:	460a      	mov	r2, r1
 8002f00:	eb42 0303 	adc.w	r3, r2, r3
 8002f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f20:	4649      	mov	r1, r9
 8002f22:	008b      	lsls	r3, r1, #2
 8002f24:	4641      	mov	r1, r8
 8002f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	008a      	lsls	r2, r1, #2
 8002f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f32:	f7fd f9a5 	bl	8000280 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4b38      	ldr	r3, [pc, #224]	; (8003020 <UART_SetConfig+0x4e4>)
 8002f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2264      	movs	r2, #100	; 0x64
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	1acb      	subs	r3, r1, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a33      	ldr	r2, [pc, #204]	; (8003020 <UART_SetConfig+0x4e4>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	441c      	add	r4, r3
 8002f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f62:	2200      	movs	r2, #0
 8002f64:	673b      	str	r3, [r7, #112]	; 0x70
 8002f66:	677a      	str	r2, [r7, #116]	; 0x74
 8002f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	415b      	adcs	r3, r3
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	1851      	adds	r1, r2, r1
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	4649      	mov	r1, r9
 8002f84:	414b      	adcs	r3, r1
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f94:	4659      	mov	r1, fp
 8002f96:	00cb      	lsls	r3, r1, #3
 8002f98:	4651      	mov	r1, sl
 8002f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	00ca      	lsls	r2, r1, #3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4642      	mov	r2, r8
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fae:	464b      	mov	r3, r9
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	eb42 0303 	adc.w	r3, r2, r3
 8002fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc2:	667a      	str	r2, [r7, #100]	; 0x64
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fda:	4641      	mov	r1, r8
 8002fdc:	008a      	lsls	r2, r1, #2
 8002fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fe2:	f7fd f94d 	bl	8000280 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <UART_SetConfig+0x4e4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a08      	ldr	r2, [pc, #32]	; (8003020 <UART_SetConfig+0x4e4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4422      	add	r2, r4
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800301a:	46bd      	mov	sp, r7
 800301c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003020:	51eb851f 	.word	0x51eb851f

08003024 <std>:
 8003024:	2300      	movs	r3, #0
 8003026:	b510      	push	{r4, lr}
 8003028:	4604      	mov	r4, r0
 800302a:	e9c0 3300 	strd	r3, r3, [r0]
 800302e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003032:	6083      	str	r3, [r0, #8]
 8003034:	8181      	strh	r1, [r0, #12]
 8003036:	6643      	str	r3, [r0, #100]	; 0x64
 8003038:	81c2      	strh	r2, [r0, #14]
 800303a:	6183      	str	r3, [r0, #24]
 800303c:	4619      	mov	r1, r3
 800303e:	2208      	movs	r2, #8
 8003040:	305c      	adds	r0, #92	; 0x5c
 8003042:	f000 fa17 	bl	8003474 <memset>
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <std+0x58>)
 8003048:	6263      	str	r3, [r4, #36]	; 0x24
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <std+0x5c>)
 800304c:	62a3      	str	r3, [r4, #40]	; 0x28
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <std+0x60>)
 8003050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <std+0x64>)
 8003054:	6323      	str	r3, [r4, #48]	; 0x30
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <std+0x68>)
 8003058:	6224      	str	r4, [r4, #32]
 800305a:	429c      	cmp	r4, r3
 800305c:	d006      	beq.n	800306c <std+0x48>
 800305e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003062:	4294      	cmp	r4, r2
 8003064:	d002      	beq.n	800306c <std+0x48>
 8003066:	33d0      	adds	r3, #208	; 0xd0
 8003068:	429c      	cmp	r4, r3
 800306a:	d105      	bne.n	8003078 <std+0x54>
 800306c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003074:	f000 ba76 	b.w	8003564 <__retarget_lock_init_recursive>
 8003078:	bd10      	pop	{r4, pc}
 800307a:	bf00      	nop
 800307c:	080032c5 	.word	0x080032c5
 8003080:	080032e7 	.word	0x080032e7
 8003084:	0800331f 	.word	0x0800331f
 8003088:	08003343 	.word	0x08003343
 800308c:	200001a0 	.word	0x200001a0

08003090 <stdio_exit_handler>:
 8003090:	4a02      	ldr	r2, [pc, #8]	; (800309c <stdio_exit_handler+0xc>)
 8003092:	4903      	ldr	r1, [pc, #12]	; (80030a0 <stdio_exit_handler+0x10>)
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <stdio_exit_handler+0x14>)
 8003096:	f000 b869 	b.w	800316c <_fwalk_sglue>
 800309a:	bf00      	nop
 800309c:	2000000c 	.word	0x2000000c
 80030a0:	080040dd 	.word	0x080040dd
 80030a4:	20000018 	.word	0x20000018

080030a8 <cleanup_stdio>:
 80030a8:	6841      	ldr	r1, [r0, #4]
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <cleanup_stdio+0x34>)
 80030ac:	4299      	cmp	r1, r3
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
 80030b2:	d001      	beq.n	80030b8 <cleanup_stdio+0x10>
 80030b4:	f001 f812 	bl	80040dc <_fflush_r>
 80030b8:	68a1      	ldr	r1, [r4, #8]
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <cleanup_stdio+0x38>)
 80030bc:	4299      	cmp	r1, r3
 80030be:	d002      	beq.n	80030c6 <cleanup_stdio+0x1e>
 80030c0:	4620      	mov	r0, r4
 80030c2:	f001 f80b 	bl	80040dc <_fflush_r>
 80030c6:	68e1      	ldr	r1, [r4, #12]
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <cleanup_stdio+0x3c>)
 80030ca:	4299      	cmp	r1, r3
 80030cc:	d004      	beq.n	80030d8 <cleanup_stdio+0x30>
 80030ce:	4620      	mov	r0, r4
 80030d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d4:	f001 b802 	b.w	80040dc <_fflush_r>
 80030d8:	bd10      	pop	{r4, pc}
 80030da:	bf00      	nop
 80030dc:	200001a0 	.word	0x200001a0
 80030e0:	20000208 	.word	0x20000208
 80030e4:	20000270 	.word	0x20000270

080030e8 <global_stdio_init.part.0>:
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <global_stdio_init.part.0+0x30>)
 80030ec:	4c0b      	ldr	r4, [pc, #44]	; (800311c <global_stdio_init.part.0+0x34>)
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <global_stdio_init.part.0+0x38>)
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	4620      	mov	r0, r4
 80030f4:	2200      	movs	r2, #0
 80030f6:	2104      	movs	r1, #4
 80030f8:	f7ff ff94 	bl	8003024 <std>
 80030fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003100:	2201      	movs	r2, #1
 8003102:	2109      	movs	r1, #9
 8003104:	f7ff ff8e 	bl	8003024 <std>
 8003108:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800310c:	2202      	movs	r2, #2
 800310e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003112:	2112      	movs	r1, #18
 8003114:	f7ff bf86 	b.w	8003024 <std>
 8003118:	200002d8 	.word	0x200002d8
 800311c:	200001a0 	.word	0x200001a0
 8003120:	08003091 	.word	0x08003091

08003124 <__sfp_lock_acquire>:
 8003124:	4801      	ldr	r0, [pc, #4]	; (800312c <__sfp_lock_acquire+0x8>)
 8003126:	f000 ba1e 	b.w	8003566 <__retarget_lock_acquire_recursive>
 800312a:	bf00      	nop
 800312c:	200002e1 	.word	0x200002e1

08003130 <__sfp_lock_release>:
 8003130:	4801      	ldr	r0, [pc, #4]	; (8003138 <__sfp_lock_release+0x8>)
 8003132:	f000 ba19 	b.w	8003568 <__retarget_lock_release_recursive>
 8003136:	bf00      	nop
 8003138:	200002e1 	.word	0x200002e1

0800313c <__sinit>:
 800313c:	b510      	push	{r4, lr}
 800313e:	4604      	mov	r4, r0
 8003140:	f7ff fff0 	bl	8003124 <__sfp_lock_acquire>
 8003144:	6a23      	ldr	r3, [r4, #32]
 8003146:	b11b      	cbz	r3, 8003150 <__sinit+0x14>
 8003148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800314c:	f7ff bff0 	b.w	8003130 <__sfp_lock_release>
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <__sinit+0x28>)
 8003152:	6223      	str	r3, [r4, #32]
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__sinit+0x2c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f5      	bne.n	8003148 <__sinit+0xc>
 800315c:	f7ff ffc4 	bl	80030e8 <global_stdio_init.part.0>
 8003160:	e7f2      	b.n	8003148 <__sinit+0xc>
 8003162:	bf00      	nop
 8003164:	080030a9 	.word	0x080030a9
 8003168:	200002d8 	.word	0x200002d8

0800316c <_fwalk_sglue>:
 800316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003170:	4607      	mov	r7, r0
 8003172:	4688      	mov	r8, r1
 8003174:	4614      	mov	r4, r2
 8003176:	2600      	movs	r6, #0
 8003178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800317c:	f1b9 0901 	subs.w	r9, r9, #1
 8003180:	d505      	bpl.n	800318e <_fwalk_sglue+0x22>
 8003182:	6824      	ldr	r4, [r4, #0]
 8003184:	2c00      	cmp	r4, #0
 8003186:	d1f7      	bne.n	8003178 <_fwalk_sglue+0xc>
 8003188:	4630      	mov	r0, r6
 800318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800318e:	89ab      	ldrh	r3, [r5, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d907      	bls.n	80031a4 <_fwalk_sglue+0x38>
 8003194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003198:	3301      	adds	r3, #1
 800319a:	d003      	beq.n	80031a4 <_fwalk_sglue+0x38>
 800319c:	4629      	mov	r1, r5
 800319e:	4638      	mov	r0, r7
 80031a0:	47c0      	blx	r8
 80031a2:	4306      	orrs	r6, r0
 80031a4:	3568      	adds	r5, #104	; 0x68
 80031a6:	e7e9      	b.n	800317c <_fwalk_sglue+0x10>

080031a8 <iprintf>:
 80031a8:	b40f      	push	{r0, r1, r2, r3}
 80031aa:	b507      	push	{r0, r1, r2, lr}
 80031ac:	4906      	ldr	r1, [pc, #24]	; (80031c8 <iprintf+0x20>)
 80031ae:	ab04      	add	r3, sp, #16
 80031b0:	6808      	ldr	r0, [r1, #0]
 80031b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80031b6:	6881      	ldr	r1, [r0, #8]
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	f000 fc5f 	bl	8003a7c <_vfiprintf_r>
 80031be:	b003      	add	sp, #12
 80031c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031c4:	b004      	add	sp, #16
 80031c6:	4770      	bx	lr
 80031c8:	20000064 	.word	0x20000064

080031cc <_puts_r>:
 80031cc:	6a03      	ldr	r3, [r0, #32]
 80031ce:	b570      	push	{r4, r5, r6, lr}
 80031d0:	6884      	ldr	r4, [r0, #8]
 80031d2:	4605      	mov	r5, r0
 80031d4:	460e      	mov	r6, r1
 80031d6:	b90b      	cbnz	r3, 80031dc <_puts_r+0x10>
 80031d8:	f7ff ffb0 	bl	800313c <__sinit>
 80031dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031de:	07db      	lsls	r3, r3, #31
 80031e0:	d405      	bmi.n	80031ee <_puts_r+0x22>
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	0598      	lsls	r0, r3, #22
 80031e6:	d402      	bmi.n	80031ee <_puts_r+0x22>
 80031e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ea:	f000 f9bc 	bl	8003566 <__retarget_lock_acquire_recursive>
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	0719      	lsls	r1, r3, #28
 80031f2:	d513      	bpl.n	800321c <_puts_r+0x50>
 80031f4:	6923      	ldr	r3, [r4, #16]
 80031f6:	b18b      	cbz	r3, 800321c <_puts_r+0x50>
 80031f8:	3e01      	subs	r6, #1
 80031fa:	68a3      	ldr	r3, [r4, #8]
 80031fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003200:	3b01      	subs	r3, #1
 8003202:	60a3      	str	r3, [r4, #8]
 8003204:	b9e9      	cbnz	r1, 8003242 <_puts_r+0x76>
 8003206:	2b00      	cmp	r3, #0
 8003208:	da2e      	bge.n	8003268 <_puts_r+0x9c>
 800320a:	4622      	mov	r2, r4
 800320c:	210a      	movs	r1, #10
 800320e:	4628      	mov	r0, r5
 8003210:	f000 f89b 	bl	800334a <__swbuf_r>
 8003214:	3001      	adds	r0, #1
 8003216:	d007      	beq.n	8003228 <_puts_r+0x5c>
 8003218:	250a      	movs	r5, #10
 800321a:	e007      	b.n	800322c <_puts_r+0x60>
 800321c:	4621      	mov	r1, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f000 f8d0 	bl	80033c4 <__swsetup_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	d0e7      	beq.n	80031f8 <_puts_r+0x2c>
 8003228:	f04f 35ff 	mov.w	r5, #4294967295
 800322c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800322e:	07da      	lsls	r2, r3, #31
 8003230:	d405      	bmi.n	800323e <_puts_r+0x72>
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	059b      	lsls	r3, r3, #22
 8003236:	d402      	bmi.n	800323e <_puts_r+0x72>
 8003238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800323a:	f000 f995 	bl	8003568 <__retarget_lock_release_recursive>
 800323e:	4628      	mov	r0, r5
 8003240:	bd70      	pop	{r4, r5, r6, pc}
 8003242:	2b00      	cmp	r3, #0
 8003244:	da04      	bge.n	8003250 <_puts_r+0x84>
 8003246:	69a2      	ldr	r2, [r4, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	dc06      	bgt.n	800325a <_puts_r+0x8e>
 800324c:	290a      	cmp	r1, #10
 800324e:	d004      	beq.n	800325a <_puts_r+0x8e>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	6022      	str	r2, [r4, #0]
 8003256:	7019      	strb	r1, [r3, #0]
 8003258:	e7cf      	b.n	80031fa <_puts_r+0x2e>
 800325a:	4622      	mov	r2, r4
 800325c:	4628      	mov	r0, r5
 800325e:	f000 f874 	bl	800334a <__swbuf_r>
 8003262:	3001      	adds	r0, #1
 8003264:	d1c9      	bne.n	80031fa <_puts_r+0x2e>
 8003266:	e7df      	b.n	8003228 <_puts_r+0x5c>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	250a      	movs	r5, #10
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	6022      	str	r2, [r4, #0]
 8003270:	701d      	strb	r5, [r3, #0]
 8003272:	e7db      	b.n	800322c <_puts_r+0x60>

08003274 <puts>:
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <puts+0xc>)
 8003276:	4601      	mov	r1, r0
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	f7ff bfa7 	b.w	80031cc <_puts_r>
 800327e:	bf00      	nop
 8003280:	20000064 	.word	0x20000064

08003284 <siprintf>:
 8003284:	b40e      	push	{r1, r2, r3}
 8003286:	b500      	push	{lr}
 8003288:	b09c      	sub	sp, #112	; 0x70
 800328a:	ab1d      	add	r3, sp, #116	; 0x74
 800328c:	9002      	str	r0, [sp, #8]
 800328e:	9006      	str	r0, [sp, #24]
 8003290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003294:	4809      	ldr	r0, [pc, #36]	; (80032bc <siprintf+0x38>)
 8003296:	9107      	str	r1, [sp, #28]
 8003298:	9104      	str	r1, [sp, #16]
 800329a:	4909      	ldr	r1, [pc, #36]	; (80032c0 <siprintf+0x3c>)
 800329c:	f853 2b04 	ldr.w	r2, [r3], #4
 80032a0:	9105      	str	r1, [sp, #20]
 80032a2:	6800      	ldr	r0, [r0, #0]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	a902      	add	r1, sp, #8
 80032a8:	f000 fac0 	bl	800382c <_svfiprintf_r>
 80032ac:	9b02      	ldr	r3, [sp, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	b01c      	add	sp, #112	; 0x70
 80032b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032b8:	b003      	add	sp, #12
 80032ba:	4770      	bx	lr
 80032bc:	20000064 	.word	0x20000064
 80032c0:	ffff0208 	.word	0xffff0208

080032c4 <__sread>:
 80032c4:	b510      	push	{r4, lr}
 80032c6:	460c      	mov	r4, r1
 80032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032cc:	f000 f8fc 	bl	80034c8 <_read_r>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	bfab      	itete	ge
 80032d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032d6:	89a3      	ldrhlt	r3, [r4, #12]
 80032d8:	181b      	addge	r3, r3, r0
 80032da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032de:	bfac      	ite	ge
 80032e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80032e2:	81a3      	strhlt	r3, [r4, #12]
 80032e4:	bd10      	pop	{r4, pc}

080032e6 <__swrite>:
 80032e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	461f      	mov	r7, r3
 80032ec:	898b      	ldrh	r3, [r1, #12]
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	4605      	mov	r5, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4616      	mov	r6, r2
 80032f6:	d505      	bpl.n	8003304 <__swrite+0x1e>
 80032f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fc:	2302      	movs	r3, #2
 80032fe:	2200      	movs	r2, #0
 8003300:	f000 f8d0 	bl	80034a4 <_lseek_r>
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800330a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	4632      	mov	r2, r6
 8003312:	463b      	mov	r3, r7
 8003314:	4628      	mov	r0, r5
 8003316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800331a:	f000 b8e7 	b.w	80034ec <_write_r>

0800331e <__sseek>:
 800331e:	b510      	push	{r4, lr}
 8003320:	460c      	mov	r4, r1
 8003322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003326:	f000 f8bd 	bl	80034a4 <_lseek_r>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	bf15      	itete	ne
 8003330:	6560      	strne	r0, [r4, #84]	; 0x54
 8003332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800333a:	81a3      	strheq	r3, [r4, #12]
 800333c:	bf18      	it	ne
 800333e:	81a3      	strhne	r3, [r4, #12]
 8003340:	bd10      	pop	{r4, pc}

08003342 <__sclose>:
 8003342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003346:	f000 b89d 	b.w	8003484 <_close_r>

0800334a <__swbuf_r>:
 800334a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334c:	460e      	mov	r6, r1
 800334e:	4614      	mov	r4, r2
 8003350:	4605      	mov	r5, r0
 8003352:	b118      	cbz	r0, 800335c <__swbuf_r+0x12>
 8003354:	6a03      	ldr	r3, [r0, #32]
 8003356:	b90b      	cbnz	r3, 800335c <__swbuf_r+0x12>
 8003358:	f7ff fef0 	bl	800313c <__sinit>
 800335c:	69a3      	ldr	r3, [r4, #24]
 800335e:	60a3      	str	r3, [r4, #8]
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	071a      	lsls	r2, r3, #28
 8003364:	d525      	bpl.n	80033b2 <__swbuf_r+0x68>
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	b31b      	cbz	r3, 80033b2 <__swbuf_r+0x68>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	6922      	ldr	r2, [r4, #16]
 800336e:	1a98      	subs	r0, r3, r2
 8003370:	6963      	ldr	r3, [r4, #20]
 8003372:	b2f6      	uxtb	r6, r6
 8003374:	4283      	cmp	r3, r0
 8003376:	4637      	mov	r7, r6
 8003378:	dc04      	bgt.n	8003384 <__swbuf_r+0x3a>
 800337a:	4621      	mov	r1, r4
 800337c:	4628      	mov	r0, r5
 800337e:	f000 fead 	bl	80040dc <_fflush_r>
 8003382:	b9e0      	cbnz	r0, 80033be <__swbuf_r+0x74>
 8003384:	68a3      	ldr	r3, [r4, #8]
 8003386:	3b01      	subs	r3, #1
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	6022      	str	r2, [r4, #0]
 8003390:	701e      	strb	r6, [r3, #0]
 8003392:	6962      	ldr	r2, [r4, #20]
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	429a      	cmp	r2, r3
 8003398:	d004      	beq.n	80033a4 <__swbuf_r+0x5a>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	07db      	lsls	r3, r3, #31
 800339e:	d506      	bpl.n	80033ae <__swbuf_r+0x64>
 80033a0:	2e0a      	cmp	r6, #10
 80033a2:	d104      	bne.n	80033ae <__swbuf_r+0x64>
 80033a4:	4621      	mov	r1, r4
 80033a6:	4628      	mov	r0, r5
 80033a8:	f000 fe98 	bl	80040dc <_fflush_r>
 80033ac:	b938      	cbnz	r0, 80033be <__swbuf_r+0x74>
 80033ae:	4638      	mov	r0, r7
 80033b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b2:	4621      	mov	r1, r4
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f805 	bl	80033c4 <__swsetup_r>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d0d5      	beq.n	800336a <__swbuf_r+0x20>
 80033be:	f04f 37ff 	mov.w	r7, #4294967295
 80033c2:	e7f4      	b.n	80033ae <__swbuf_r+0x64>

080033c4 <__swsetup_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <__swsetup_r+0xac>)
 80033c8:	4605      	mov	r5, r0
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	460c      	mov	r4, r1
 80033ce:	b118      	cbz	r0, 80033d8 <__swsetup_r+0x14>
 80033d0:	6a03      	ldr	r3, [r0, #32]
 80033d2:	b90b      	cbnz	r3, 80033d8 <__swsetup_r+0x14>
 80033d4:	f7ff feb2 	bl	800313c <__sinit>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033de:	0718      	lsls	r0, r3, #28
 80033e0:	d422      	bmi.n	8003428 <__swsetup_r+0x64>
 80033e2:	06d9      	lsls	r1, r3, #27
 80033e4:	d407      	bmi.n	80033f6 <__swsetup_r+0x32>
 80033e6:	2309      	movs	r3, #9
 80033e8:	602b      	str	r3, [r5, #0]
 80033ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033ee:	81a3      	strh	r3, [r4, #12]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e034      	b.n	8003460 <__swsetup_r+0x9c>
 80033f6:	0758      	lsls	r0, r3, #29
 80033f8:	d512      	bpl.n	8003420 <__swsetup_r+0x5c>
 80033fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fc:	b141      	cbz	r1, 8003410 <__swsetup_r+0x4c>
 80033fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003402:	4299      	cmp	r1, r3
 8003404:	d002      	beq.n	800340c <__swsetup_r+0x48>
 8003406:	4628      	mov	r0, r5
 8003408:	f000 f8be 	bl	8003588 <_free_r>
 800340c:	2300      	movs	r3, #0
 800340e:	6363      	str	r3, [r4, #52]	; 0x34
 8003410:	89a3      	ldrh	r3, [r4, #12]
 8003412:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	2300      	movs	r3, #0
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6923      	ldr	r3, [r4, #16]
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f043 0308 	orr.w	r3, r3, #8
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	b94b      	cbnz	r3, 8003440 <__swsetup_r+0x7c>
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d003      	beq.n	8003440 <__swsetup_r+0x7c>
 8003438:	4621      	mov	r1, r4
 800343a:	4628      	mov	r0, r5
 800343c:	f000 fe9c 	bl	8004178 <__smakebuf_r>
 8003440:	89a0      	ldrh	r0, [r4, #12]
 8003442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003446:	f010 0301 	ands.w	r3, r0, #1
 800344a:	d00a      	beq.n	8003462 <__swsetup_r+0x9e>
 800344c:	2300      	movs	r3, #0
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	6963      	ldr	r3, [r4, #20]
 8003452:	425b      	negs	r3, r3
 8003454:	61a3      	str	r3, [r4, #24]
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	b943      	cbnz	r3, 800346c <__swsetup_r+0xa8>
 800345a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800345e:	d1c4      	bne.n	80033ea <__swsetup_r+0x26>
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	0781      	lsls	r1, r0, #30
 8003464:	bf58      	it	pl
 8003466:	6963      	ldrpl	r3, [r4, #20]
 8003468:	60a3      	str	r3, [r4, #8]
 800346a:	e7f4      	b.n	8003456 <__swsetup_r+0x92>
 800346c:	2000      	movs	r0, #0
 800346e:	e7f7      	b.n	8003460 <__swsetup_r+0x9c>
 8003470:	20000064 	.word	0x20000064

08003474 <memset>:
 8003474:	4402      	add	r2, r0
 8003476:	4603      	mov	r3, r0
 8003478:	4293      	cmp	r3, r2
 800347a:	d100      	bne.n	800347e <memset+0xa>
 800347c:	4770      	bx	lr
 800347e:	f803 1b01 	strb.w	r1, [r3], #1
 8003482:	e7f9      	b.n	8003478 <memset+0x4>

08003484 <_close_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4d06      	ldr	r5, [pc, #24]	; (80034a0 <_close_r+0x1c>)
 8003488:	2300      	movs	r3, #0
 800348a:	4604      	mov	r4, r0
 800348c:	4608      	mov	r0, r1
 800348e:	602b      	str	r3, [r5, #0]
 8003490:	f7fd fb9f 	bl	8000bd2 <_close>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d102      	bne.n	800349e <_close_r+0x1a>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	b103      	cbz	r3, 800349e <_close_r+0x1a>
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	200002dc 	.word	0x200002dc

080034a4 <_lseek_r>:
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	4d07      	ldr	r5, [pc, #28]	; (80034c4 <_lseek_r+0x20>)
 80034a8:	4604      	mov	r4, r0
 80034aa:	4608      	mov	r0, r1
 80034ac:	4611      	mov	r1, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	602a      	str	r2, [r5, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f7fd fbb4 	bl	8000c20 <_lseek>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_lseek_r+0x1e>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_lseek_r+0x1e>
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	200002dc 	.word	0x200002dc

080034c8 <_read_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4d07      	ldr	r5, [pc, #28]	; (80034e8 <_read_r+0x20>)
 80034cc:	4604      	mov	r4, r0
 80034ce:	4608      	mov	r0, r1
 80034d0:	4611      	mov	r1, r2
 80034d2:	2200      	movs	r2, #0
 80034d4:	602a      	str	r2, [r5, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7fd fb42 	bl	8000b60 <_read>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_read_r+0x1e>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_read_r+0x1e>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	200002dc 	.word	0x200002dc

080034ec <_write_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4d07      	ldr	r5, [pc, #28]	; (800350c <_write_r+0x20>)
 80034f0:	4604      	mov	r4, r0
 80034f2:	4608      	mov	r0, r1
 80034f4:	4611      	mov	r1, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	602a      	str	r2, [r5, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f7fd fb4d 	bl	8000b9a <_write>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_write_r+0x1e>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_write_r+0x1e>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	200002dc 	.word	0x200002dc

08003510 <__errno>:
 8003510:	4b01      	ldr	r3, [pc, #4]	; (8003518 <__errno+0x8>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000064 	.word	0x20000064

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	4d0d      	ldr	r5, [pc, #52]	; (8003554 <__libc_init_array+0x38>)
 8003520:	4c0d      	ldr	r4, [pc, #52]	; (8003558 <__libc_init_array+0x3c>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	2600      	movs	r6, #0
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	4d0b      	ldr	r5, [pc, #44]	; (800355c <__libc_init_array+0x40>)
 800352e:	4c0c      	ldr	r4, [pc, #48]	; (8003560 <__libc_init_array+0x44>)
 8003530:	f000 fee2 	bl	80042f8 <_init>
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	2600      	movs	r6, #0
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	080043dc 	.word	0x080043dc
 8003558:	080043dc 	.word	0x080043dc
 800355c:	080043dc 	.word	0x080043dc
 8003560:	080043e0 	.word	0x080043e0

08003564 <__retarget_lock_init_recursive>:
 8003564:	4770      	bx	lr

08003566 <__retarget_lock_acquire_recursive>:
 8003566:	4770      	bx	lr

08003568 <__retarget_lock_release_recursive>:
 8003568:	4770      	bx	lr

0800356a <memcpy>:
 800356a:	440a      	add	r2, r1
 800356c:	4291      	cmp	r1, r2
 800356e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003572:	d100      	bne.n	8003576 <memcpy+0xc>
 8003574:	4770      	bx	lr
 8003576:	b510      	push	{r4, lr}
 8003578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800357c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003580:	4291      	cmp	r1, r2
 8003582:	d1f9      	bne.n	8003578 <memcpy+0xe>
 8003584:	bd10      	pop	{r4, pc}
	...

08003588 <_free_r>:
 8003588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800358a:	2900      	cmp	r1, #0
 800358c:	d044      	beq.n	8003618 <_free_r+0x90>
 800358e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003592:	9001      	str	r0, [sp, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f1a1 0404 	sub.w	r4, r1, #4
 800359a:	bfb8      	it	lt
 800359c:	18e4      	addlt	r4, r4, r3
 800359e:	f000 f8df 	bl	8003760 <__malloc_lock>
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <_free_r+0x94>)
 80035a4:	9801      	ldr	r0, [sp, #4]
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	b933      	cbnz	r3, 80035b8 <_free_r+0x30>
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	6014      	str	r4, [r2, #0]
 80035ae:	b003      	add	sp, #12
 80035b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035b4:	f000 b8da 	b.w	800376c <__malloc_unlock>
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	d908      	bls.n	80035ce <_free_r+0x46>
 80035bc:	6825      	ldr	r5, [r4, #0]
 80035be:	1961      	adds	r1, r4, r5
 80035c0:	428b      	cmp	r3, r1
 80035c2:	bf01      	itttt	eq
 80035c4:	6819      	ldreq	r1, [r3, #0]
 80035c6:	685b      	ldreq	r3, [r3, #4]
 80035c8:	1949      	addeq	r1, r1, r5
 80035ca:	6021      	streq	r1, [r4, #0]
 80035cc:	e7ed      	b.n	80035aa <_free_r+0x22>
 80035ce:	461a      	mov	r2, r3
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b10b      	cbz	r3, 80035d8 <_free_r+0x50>
 80035d4:	42a3      	cmp	r3, r4
 80035d6:	d9fa      	bls.n	80035ce <_free_r+0x46>
 80035d8:	6811      	ldr	r1, [r2, #0]
 80035da:	1855      	adds	r5, r2, r1
 80035dc:	42a5      	cmp	r5, r4
 80035de:	d10b      	bne.n	80035f8 <_free_r+0x70>
 80035e0:	6824      	ldr	r4, [r4, #0]
 80035e2:	4421      	add	r1, r4
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	d1e0      	bne.n	80035ae <_free_r+0x26>
 80035ec:	681c      	ldr	r4, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	6053      	str	r3, [r2, #4]
 80035f2:	440c      	add	r4, r1
 80035f4:	6014      	str	r4, [r2, #0]
 80035f6:	e7da      	b.n	80035ae <_free_r+0x26>
 80035f8:	d902      	bls.n	8003600 <_free_r+0x78>
 80035fa:	230c      	movs	r3, #12
 80035fc:	6003      	str	r3, [r0, #0]
 80035fe:	e7d6      	b.n	80035ae <_free_r+0x26>
 8003600:	6825      	ldr	r5, [r4, #0]
 8003602:	1961      	adds	r1, r4, r5
 8003604:	428b      	cmp	r3, r1
 8003606:	bf04      	itt	eq
 8003608:	6819      	ldreq	r1, [r3, #0]
 800360a:	685b      	ldreq	r3, [r3, #4]
 800360c:	6063      	str	r3, [r4, #4]
 800360e:	bf04      	itt	eq
 8003610:	1949      	addeq	r1, r1, r5
 8003612:	6021      	streq	r1, [r4, #0]
 8003614:	6054      	str	r4, [r2, #4]
 8003616:	e7ca      	b.n	80035ae <_free_r+0x26>
 8003618:	b003      	add	sp, #12
 800361a:	bd30      	pop	{r4, r5, pc}
 800361c:	200002e4 	.word	0x200002e4

08003620 <sbrk_aligned>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4e0e      	ldr	r6, [pc, #56]	; (800365c <sbrk_aligned+0x3c>)
 8003624:	460c      	mov	r4, r1
 8003626:	6831      	ldr	r1, [r6, #0]
 8003628:	4605      	mov	r5, r0
 800362a:	b911      	cbnz	r1, 8003632 <sbrk_aligned+0x12>
 800362c:	f000 fe1c 	bl	8004268 <_sbrk_r>
 8003630:	6030      	str	r0, [r6, #0]
 8003632:	4621      	mov	r1, r4
 8003634:	4628      	mov	r0, r5
 8003636:	f000 fe17 	bl	8004268 <_sbrk_r>
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	d00a      	beq.n	8003654 <sbrk_aligned+0x34>
 800363e:	1cc4      	adds	r4, r0, #3
 8003640:	f024 0403 	bic.w	r4, r4, #3
 8003644:	42a0      	cmp	r0, r4
 8003646:	d007      	beq.n	8003658 <sbrk_aligned+0x38>
 8003648:	1a21      	subs	r1, r4, r0
 800364a:	4628      	mov	r0, r5
 800364c:	f000 fe0c 	bl	8004268 <_sbrk_r>
 8003650:	3001      	adds	r0, #1
 8003652:	d101      	bne.n	8003658 <sbrk_aligned+0x38>
 8003654:	f04f 34ff 	mov.w	r4, #4294967295
 8003658:	4620      	mov	r0, r4
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	200002e8 	.word	0x200002e8

08003660 <_malloc_r>:
 8003660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003664:	1ccd      	adds	r5, r1, #3
 8003666:	f025 0503 	bic.w	r5, r5, #3
 800366a:	3508      	adds	r5, #8
 800366c:	2d0c      	cmp	r5, #12
 800366e:	bf38      	it	cc
 8003670:	250c      	movcc	r5, #12
 8003672:	2d00      	cmp	r5, #0
 8003674:	4607      	mov	r7, r0
 8003676:	db01      	blt.n	800367c <_malloc_r+0x1c>
 8003678:	42a9      	cmp	r1, r5
 800367a:	d905      	bls.n	8003688 <_malloc_r+0x28>
 800367c:	230c      	movs	r3, #12
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	2600      	movs	r6, #0
 8003682:	4630      	mov	r0, r6
 8003684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003688:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800375c <_malloc_r+0xfc>
 800368c:	f000 f868 	bl	8003760 <__malloc_lock>
 8003690:	f8d8 3000 	ldr.w	r3, [r8]
 8003694:	461c      	mov	r4, r3
 8003696:	bb5c      	cbnz	r4, 80036f0 <_malloc_r+0x90>
 8003698:	4629      	mov	r1, r5
 800369a:	4638      	mov	r0, r7
 800369c:	f7ff ffc0 	bl	8003620 <sbrk_aligned>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	4604      	mov	r4, r0
 80036a4:	d155      	bne.n	8003752 <_malloc_r+0xf2>
 80036a6:	f8d8 4000 	ldr.w	r4, [r8]
 80036aa:	4626      	mov	r6, r4
 80036ac:	2e00      	cmp	r6, #0
 80036ae:	d145      	bne.n	800373c <_malloc_r+0xdc>
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d048      	beq.n	8003746 <_malloc_r+0xe6>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	4631      	mov	r1, r6
 80036b8:	4638      	mov	r0, r7
 80036ba:	eb04 0903 	add.w	r9, r4, r3
 80036be:	f000 fdd3 	bl	8004268 <_sbrk_r>
 80036c2:	4581      	cmp	r9, r0
 80036c4:	d13f      	bne.n	8003746 <_malloc_r+0xe6>
 80036c6:	6821      	ldr	r1, [r4, #0]
 80036c8:	1a6d      	subs	r5, r5, r1
 80036ca:	4629      	mov	r1, r5
 80036cc:	4638      	mov	r0, r7
 80036ce:	f7ff ffa7 	bl	8003620 <sbrk_aligned>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d037      	beq.n	8003746 <_malloc_r+0xe6>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	442b      	add	r3, r5
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	f8d8 3000 	ldr.w	r3, [r8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d038      	beq.n	8003756 <_malloc_r+0xf6>
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	42a2      	cmp	r2, r4
 80036e8:	d12b      	bne.n	8003742 <_malloc_r+0xe2>
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	e00f      	b.n	8003710 <_malloc_r+0xb0>
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	1b52      	subs	r2, r2, r5
 80036f4:	d41f      	bmi.n	8003736 <_malloc_r+0xd6>
 80036f6:	2a0b      	cmp	r2, #11
 80036f8:	d917      	bls.n	800372a <_malloc_r+0xca>
 80036fa:	1961      	adds	r1, r4, r5
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	6025      	str	r5, [r4, #0]
 8003700:	bf18      	it	ne
 8003702:	6059      	strne	r1, [r3, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	bf08      	it	eq
 8003708:	f8c8 1000 	streq.w	r1, [r8]
 800370c:	5162      	str	r2, [r4, r5]
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	4638      	mov	r0, r7
 8003712:	f104 060b 	add.w	r6, r4, #11
 8003716:	f000 f829 	bl	800376c <__malloc_unlock>
 800371a:	f026 0607 	bic.w	r6, r6, #7
 800371e:	1d23      	adds	r3, r4, #4
 8003720:	1af2      	subs	r2, r6, r3
 8003722:	d0ae      	beq.n	8003682 <_malloc_r+0x22>
 8003724:	1b9b      	subs	r3, r3, r6
 8003726:	50a3      	str	r3, [r4, r2]
 8003728:	e7ab      	b.n	8003682 <_malloc_r+0x22>
 800372a:	42a3      	cmp	r3, r4
 800372c:	6862      	ldr	r2, [r4, #4]
 800372e:	d1dd      	bne.n	80036ec <_malloc_r+0x8c>
 8003730:	f8c8 2000 	str.w	r2, [r8]
 8003734:	e7ec      	b.n	8003710 <_malloc_r+0xb0>
 8003736:	4623      	mov	r3, r4
 8003738:	6864      	ldr	r4, [r4, #4]
 800373a:	e7ac      	b.n	8003696 <_malloc_r+0x36>
 800373c:	4634      	mov	r4, r6
 800373e:	6876      	ldr	r6, [r6, #4]
 8003740:	e7b4      	b.n	80036ac <_malloc_r+0x4c>
 8003742:	4613      	mov	r3, r2
 8003744:	e7cc      	b.n	80036e0 <_malloc_r+0x80>
 8003746:	230c      	movs	r3, #12
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4638      	mov	r0, r7
 800374c:	f000 f80e 	bl	800376c <__malloc_unlock>
 8003750:	e797      	b.n	8003682 <_malloc_r+0x22>
 8003752:	6025      	str	r5, [r4, #0]
 8003754:	e7dc      	b.n	8003710 <_malloc_r+0xb0>
 8003756:	605b      	str	r3, [r3, #4]
 8003758:	deff      	udf	#255	; 0xff
 800375a:	bf00      	nop
 800375c:	200002e4 	.word	0x200002e4

08003760 <__malloc_lock>:
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <__malloc_lock+0x8>)
 8003762:	f7ff bf00 	b.w	8003566 <__retarget_lock_acquire_recursive>
 8003766:	bf00      	nop
 8003768:	200002e0 	.word	0x200002e0

0800376c <__malloc_unlock>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__malloc_unlock+0x8>)
 800376e:	f7ff befb 	b.w	8003568 <__retarget_lock_release_recursive>
 8003772:	bf00      	nop
 8003774:	200002e0 	.word	0x200002e0

08003778 <__ssputs_r>:
 8003778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	688e      	ldr	r6, [r1, #8]
 800377e:	461f      	mov	r7, r3
 8003780:	42be      	cmp	r6, r7
 8003782:	680b      	ldr	r3, [r1, #0]
 8003784:	4682      	mov	sl, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4690      	mov	r8, r2
 800378a:	d82c      	bhi.n	80037e6 <__ssputs_r+0x6e>
 800378c:	898a      	ldrh	r2, [r1, #12]
 800378e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003792:	d026      	beq.n	80037e2 <__ssputs_r+0x6a>
 8003794:	6965      	ldr	r5, [r4, #20]
 8003796:	6909      	ldr	r1, [r1, #16]
 8003798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800379c:	eba3 0901 	sub.w	r9, r3, r1
 80037a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037a4:	1c7b      	adds	r3, r7, #1
 80037a6:	444b      	add	r3, r9
 80037a8:	106d      	asrs	r5, r5, #1
 80037aa:	429d      	cmp	r5, r3
 80037ac:	bf38      	it	cc
 80037ae:	461d      	movcc	r5, r3
 80037b0:	0553      	lsls	r3, r2, #21
 80037b2:	d527      	bpl.n	8003804 <__ssputs_r+0x8c>
 80037b4:	4629      	mov	r1, r5
 80037b6:	f7ff ff53 	bl	8003660 <_malloc_r>
 80037ba:	4606      	mov	r6, r0
 80037bc:	b360      	cbz	r0, 8003818 <__ssputs_r+0xa0>
 80037be:	6921      	ldr	r1, [r4, #16]
 80037c0:	464a      	mov	r2, r9
 80037c2:	f7ff fed2 	bl	800356a <memcpy>
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	6126      	str	r6, [r4, #16]
 80037d4:	6165      	str	r5, [r4, #20]
 80037d6:	444e      	add	r6, r9
 80037d8:	eba5 0509 	sub.w	r5, r5, r9
 80037dc:	6026      	str	r6, [r4, #0]
 80037de:	60a5      	str	r5, [r4, #8]
 80037e0:	463e      	mov	r6, r7
 80037e2:	42be      	cmp	r6, r7
 80037e4:	d900      	bls.n	80037e8 <__ssputs_r+0x70>
 80037e6:	463e      	mov	r6, r7
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	4632      	mov	r2, r6
 80037ec:	4641      	mov	r1, r8
 80037ee:	f000 fcff 	bl	80041f0 <memmove>
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	1b9b      	subs	r3, r3, r6
 80037f6:	60a3      	str	r3, [r4, #8]
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	4433      	add	r3, r6
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003804:	462a      	mov	r2, r5
 8003806:	f000 fd3f 	bl	8004288 <_realloc_r>
 800380a:	4606      	mov	r6, r0
 800380c:	2800      	cmp	r0, #0
 800380e:	d1e0      	bne.n	80037d2 <__ssputs_r+0x5a>
 8003810:	6921      	ldr	r1, [r4, #16]
 8003812:	4650      	mov	r0, sl
 8003814:	f7ff feb8 	bl	8003588 <_free_r>
 8003818:	230c      	movs	r3, #12
 800381a:	f8ca 3000 	str.w	r3, [sl]
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	f04f 30ff 	mov.w	r0, #4294967295
 800382a:	e7e9      	b.n	8003800 <__ssputs_r+0x88>

0800382c <_svfiprintf_r>:
 800382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003830:	4698      	mov	r8, r3
 8003832:	898b      	ldrh	r3, [r1, #12]
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	b09d      	sub	sp, #116	; 0x74
 8003838:	4607      	mov	r7, r0
 800383a:	460d      	mov	r5, r1
 800383c:	4614      	mov	r4, r2
 800383e:	d50e      	bpl.n	800385e <_svfiprintf_r+0x32>
 8003840:	690b      	ldr	r3, [r1, #16]
 8003842:	b963      	cbnz	r3, 800385e <_svfiprintf_r+0x32>
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	f7ff ff0b 	bl	8003660 <_malloc_r>
 800384a:	6028      	str	r0, [r5, #0]
 800384c:	6128      	str	r0, [r5, #16]
 800384e:	b920      	cbnz	r0, 800385a <_svfiprintf_r+0x2e>
 8003850:	230c      	movs	r3, #12
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	e0d0      	b.n	80039fc <_svfiprintf_r+0x1d0>
 800385a:	2340      	movs	r3, #64	; 0x40
 800385c:	616b      	str	r3, [r5, #20]
 800385e:	2300      	movs	r3, #0
 8003860:	9309      	str	r3, [sp, #36]	; 0x24
 8003862:	2320      	movs	r3, #32
 8003864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003868:	f8cd 800c 	str.w	r8, [sp, #12]
 800386c:	2330      	movs	r3, #48	; 0x30
 800386e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a14 <_svfiprintf_r+0x1e8>
 8003872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003876:	f04f 0901 	mov.w	r9, #1
 800387a:	4623      	mov	r3, r4
 800387c:	469a      	mov	sl, r3
 800387e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003882:	b10a      	cbz	r2, 8003888 <_svfiprintf_r+0x5c>
 8003884:	2a25      	cmp	r2, #37	; 0x25
 8003886:	d1f9      	bne.n	800387c <_svfiprintf_r+0x50>
 8003888:	ebba 0b04 	subs.w	fp, sl, r4
 800388c:	d00b      	beq.n	80038a6 <_svfiprintf_r+0x7a>
 800388e:	465b      	mov	r3, fp
 8003890:	4622      	mov	r2, r4
 8003892:	4629      	mov	r1, r5
 8003894:	4638      	mov	r0, r7
 8003896:	f7ff ff6f 	bl	8003778 <__ssputs_r>
 800389a:	3001      	adds	r0, #1
 800389c:	f000 80a9 	beq.w	80039f2 <_svfiprintf_r+0x1c6>
 80038a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038a2:	445a      	add	r2, fp
 80038a4:	9209      	str	r2, [sp, #36]	; 0x24
 80038a6:	f89a 3000 	ldrb.w	r3, [sl]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80a1 	beq.w	80039f2 <_svfiprintf_r+0x1c6>
 80038b0:	2300      	movs	r3, #0
 80038b2:	f04f 32ff 	mov.w	r2, #4294967295
 80038b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038ba:	f10a 0a01 	add.w	sl, sl, #1
 80038be:	9304      	str	r3, [sp, #16]
 80038c0:	9307      	str	r3, [sp, #28]
 80038c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038c6:	931a      	str	r3, [sp, #104]	; 0x68
 80038c8:	4654      	mov	r4, sl
 80038ca:	2205      	movs	r2, #5
 80038cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d0:	4850      	ldr	r0, [pc, #320]	; (8003a14 <_svfiprintf_r+0x1e8>)
 80038d2:	f7fc fc85 	bl	80001e0 <memchr>
 80038d6:	9a04      	ldr	r2, [sp, #16]
 80038d8:	b9d8      	cbnz	r0, 8003912 <_svfiprintf_r+0xe6>
 80038da:	06d0      	lsls	r0, r2, #27
 80038dc:	bf44      	itt	mi
 80038de:	2320      	movmi	r3, #32
 80038e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038e4:	0711      	lsls	r1, r2, #28
 80038e6:	bf44      	itt	mi
 80038e8:	232b      	movmi	r3, #43	; 0x2b
 80038ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ee:	f89a 3000 	ldrb.w	r3, [sl]
 80038f2:	2b2a      	cmp	r3, #42	; 0x2a
 80038f4:	d015      	beq.n	8003922 <_svfiprintf_r+0xf6>
 80038f6:	9a07      	ldr	r2, [sp, #28]
 80038f8:	4654      	mov	r4, sl
 80038fa:	2000      	movs	r0, #0
 80038fc:	f04f 0c0a 	mov.w	ip, #10
 8003900:	4621      	mov	r1, r4
 8003902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003906:	3b30      	subs	r3, #48	; 0x30
 8003908:	2b09      	cmp	r3, #9
 800390a:	d94d      	bls.n	80039a8 <_svfiprintf_r+0x17c>
 800390c:	b1b0      	cbz	r0, 800393c <_svfiprintf_r+0x110>
 800390e:	9207      	str	r2, [sp, #28]
 8003910:	e014      	b.n	800393c <_svfiprintf_r+0x110>
 8003912:	eba0 0308 	sub.w	r3, r0, r8
 8003916:	fa09 f303 	lsl.w	r3, r9, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	9304      	str	r3, [sp, #16]
 800391e:	46a2      	mov	sl, r4
 8003920:	e7d2      	b.n	80038c8 <_svfiprintf_r+0x9c>
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	1d19      	adds	r1, r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	9103      	str	r1, [sp, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfbb      	ittet	lt
 800392e:	425b      	neglt	r3, r3
 8003930:	f042 0202 	orrlt.w	r2, r2, #2
 8003934:	9307      	strge	r3, [sp, #28]
 8003936:	9307      	strlt	r3, [sp, #28]
 8003938:	bfb8      	it	lt
 800393a:	9204      	strlt	r2, [sp, #16]
 800393c:	7823      	ldrb	r3, [r4, #0]
 800393e:	2b2e      	cmp	r3, #46	; 0x2e
 8003940:	d10c      	bne.n	800395c <_svfiprintf_r+0x130>
 8003942:	7863      	ldrb	r3, [r4, #1]
 8003944:	2b2a      	cmp	r3, #42	; 0x2a
 8003946:	d134      	bne.n	80039b2 <_svfiprintf_r+0x186>
 8003948:	9b03      	ldr	r3, [sp, #12]
 800394a:	1d1a      	adds	r2, r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	9203      	str	r2, [sp, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	bfb8      	it	lt
 8003954:	f04f 33ff 	movlt.w	r3, #4294967295
 8003958:	3402      	adds	r4, #2
 800395a:	9305      	str	r3, [sp, #20]
 800395c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003a24 <_svfiprintf_r+0x1f8>
 8003960:	7821      	ldrb	r1, [r4, #0]
 8003962:	2203      	movs	r2, #3
 8003964:	4650      	mov	r0, sl
 8003966:	f7fc fc3b 	bl	80001e0 <memchr>
 800396a:	b138      	cbz	r0, 800397c <_svfiprintf_r+0x150>
 800396c:	9b04      	ldr	r3, [sp, #16]
 800396e:	eba0 000a 	sub.w	r0, r0, sl
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	4082      	lsls	r2, r0
 8003976:	4313      	orrs	r3, r2
 8003978:	3401      	adds	r4, #1
 800397a:	9304      	str	r3, [sp, #16]
 800397c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003980:	4825      	ldr	r0, [pc, #148]	; (8003a18 <_svfiprintf_r+0x1ec>)
 8003982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003986:	2206      	movs	r2, #6
 8003988:	f7fc fc2a 	bl	80001e0 <memchr>
 800398c:	2800      	cmp	r0, #0
 800398e:	d038      	beq.n	8003a02 <_svfiprintf_r+0x1d6>
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <_svfiprintf_r+0x1f0>)
 8003992:	bb1b      	cbnz	r3, 80039dc <_svfiprintf_r+0x1b0>
 8003994:	9b03      	ldr	r3, [sp, #12]
 8003996:	3307      	adds	r3, #7
 8003998:	f023 0307 	bic.w	r3, r3, #7
 800399c:	3308      	adds	r3, #8
 800399e:	9303      	str	r3, [sp, #12]
 80039a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a2:	4433      	add	r3, r6
 80039a4:	9309      	str	r3, [sp, #36]	; 0x24
 80039a6:	e768      	b.n	800387a <_svfiprintf_r+0x4e>
 80039a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ac:	460c      	mov	r4, r1
 80039ae:	2001      	movs	r0, #1
 80039b0:	e7a6      	b.n	8003900 <_svfiprintf_r+0xd4>
 80039b2:	2300      	movs	r3, #0
 80039b4:	3401      	adds	r4, #1
 80039b6:	9305      	str	r3, [sp, #20]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f04f 0c0a 	mov.w	ip, #10
 80039be:	4620      	mov	r0, r4
 80039c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c4:	3a30      	subs	r2, #48	; 0x30
 80039c6:	2a09      	cmp	r2, #9
 80039c8:	d903      	bls.n	80039d2 <_svfiprintf_r+0x1a6>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0c6      	beq.n	800395c <_svfiprintf_r+0x130>
 80039ce:	9105      	str	r1, [sp, #20]
 80039d0:	e7c4      	b.n	800395c <_svfiprintf_r+0x130>
 80039d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80039d6:	4604      	mov	r4, r0
 80039d8:	2301      	movs	r3, #1
 80039da:	e7f0      	b.n	80039be <_svfiprintf_r+0x192>
 80039dc:	ab03      	add	r3, sp, #12
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	462a      	mov	r2, r5
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <_svfiprintf_r+0x1f4>)
 80039e4:	a904      	add	r1, sp, #16
 80039e6:	4638      	mov	r0, r7
 80039e8:	f3af 8000 	nop.w
 80039ec:	1c42      	adds	r2, r0, #1
 80039ee:	4606      	mov	r6, r0
 80039f0:	d1d6      	bne.n	80039a0 <_svfiprintf_r+0x174>
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	065b      	lsls	r3, r3, #25
 80039f6:	f53f af2d 	bmi.w	8003854 <_svfiprintf_r+0x28>
 80039fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039fc:	b01d      	add	sp, #116	; 0x74
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	ab03      	add	r3, sp, #12
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	462a      	mov	r2, r5
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <_svfiprintf_r+0x1f4>)
 8003a0a:	a904      	add	r1, sp, #16
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f000 f9bd 	bl	8003d8c <_printf_i>
 8003a12:	e7eb      	b.n	80039ec <_svfiprintf_r+0x1c0>
 8003a14:	080043a0 	.word	0x080043a0
 8003a18:	080043aa 	.word	0x080043aa
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	08003779 	.word	0x08003779
 8003a24:	080043a6 	.word	0x080043a6

08003a28 <__sfputc_r>:
 8003a28:	6893      	ldr	r3, [r2, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	b410      	push	{r4}
 8003a30:	6093      	str	r3, [r2, #8]
 8003a32:	da08      	bge.n	8003a46 <__sfputc_r+0x1e>
 8003a34:	6994      	ldr	r4, [r2, #24]
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	db01      	blt.n	8003a3e <__sfputc_r+0x16>
 8003a3a:	290a      	cmp	r1, #10
 8003a3c:	d103      	bne.n	8003a46 <__sfputc_r+0x1e>
 8003a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a42:	f7ff bc82 	b.w	800334a <__swbuf_r>
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	1c58      	adds	r0, r3, #1
 8003a4a:	6010      	str	r0, [r2, #0]
 8003a4c:	7019      	strb	r1, [r3, #0]
 8003a4e:	4608      	mov	r0, r1
 8003a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <__sfputs_r>:
 8003a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a58:	4606      	mov	r6, r0
 8003a5a:	460f      	mov	r7, r1
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	18d5      	adds	r5, r2, r3
 8003a60:	42ac      	cmp	r4, r5
 8003a62:	d101      	bne.n	8003a68 <__sfputs_r+0x12>
 8003a64:	2000      	movs	r0, #0
 8003a66:	e007      	b.n	8003a78 <__sfputs_r+0x22>
 8003a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6c:	463a      	mov	r2, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff ffda 	bl	8003a28 <__sfputc_r>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d1f3      	bne.n	8003a60 <__sfputs_r+0xa>
 8003a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a7c <_vfiprintf_r>:
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	460d      	mov	r5, r1
 8003a82:	b09d      	sub	sp, #116	; 0x74
 8003a84:	4614      	mov	r4, r2
 8003a86:	4698      	mov	r8, r3
 8003a88:	4606      	mov	r6, r0
 8003a8a:	b118      	cbz	r0, 8003a94 <_vfiprintf_r+0x18>
 8003a8c:	6a03      	ldr	r3, [r0, #32]
 8003a8e:	b90b      	cbnz	r3, 8003a94 <_vfiprintf_r+0x18>
 8003a90:	f7ff fb54 	bl	800313c <__sinit>
 8003a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a96:	07d9      	lsls	r1, r3, #31
 8003a98:	d405      	bmi.n	8003aa6 <_vfiprintf_r+0x2a>
 8003a9a:	89ab      	ldrh	r3, [r5, #12]
 8003a9c:	059a      	lsls	r2, r3, #22
 8003a9e:	d402      	bmi.n	8003aa6 <_vfiprintf_r+0x2a>
 8003aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aa2:	f7ff fd60 	bl	8003566 <__retarget_lock_acquire_recursive>
 8003aa6:	89ab      	ldrh	r3, [r5, #12]
 8003aa8:	071b      	lsls	r3, r3, #28
 8003aaa:	d501      	bpl.n	8003ab0 <_vfiprintf_r+0x34>
 8003aac:	692b      	ldr	r3, [r5, #16]
 8003aae:	b99b      	cbnz	r3, 8003ad8 <_vfiprintf_r+0x5c>
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f7ff fc86 	bl	80033c4 <__swsetup_r>
 8003ab8:	b170      	cbz	r0, 8003ad8 <_vfiprintf_r+0x5c>
 8003aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003abc:	07dc      	lsls	r4, r3, #31
 8003abe:	d504      	bpl.n	8003aca <_vfiprintf_r+0x4e>
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	b01d      	add	sp, #116	; 0x74
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aca:	89ab      	ldrh	r3, [r5, #12]
 8003acc:	0598      	lsls	r0, r3, #22
 8003ace:	d4f7      	bmi.n	8003ac0 <_vfiprintf_r+0x44>
 8003ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ad2:	f7ff fd49 	bl	8003568 <__retarget_lock_release_recursive>
 8003ad6:	e7f3      	b.n	8003ac0 <_vfiprintf_r+0x44>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9309      	str	r3, [sp, #36]	; 0x24
 8003adc:	2320      	movs	r3, #32
 8003ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ae6:	2330      	movs	r3, #48	; 0x30
 8003ae8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003c9c <_vfiprintf_r+0x220>
 8003aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af0:	f04f 0901 	mov.w	r9, #1
 8003af4:	4623      	mov	r3, r4
 8003af6:	469a      	mov	sl, r3
 8003af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afc:	b10a      	cbz	r2, 8003b02 <_vfiprintf_r+0x86>
 8003afe:	2a25      	cmp	r2, #37	; 0x25
 8003b00:	d1f9      	bne.n	8003af6 <_vfiprintf_r+0x7a>
 8003b02:	ebba 0b04 	subs.w	fp, sl, r4
 8003b06:	d00b      	beq.n	8003b20 <_vfiprintf_r+0xa4>
 8003b08:	465b      	mov	r3, fp
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f7ff ffa1 	bl	8003a56 <__sfputs_r>
 8003b14:	3001      	adds	r0, #1
 8003b16:	f000 80a9 	beq.w	8003c6c <_vfiprintf_r+0x1f0>
 8003b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b1c:	445a      	add	r2, fp
 8003b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b20:	f89a 3000 	ldrb.w	r3, [sl]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a1 	beq.w	8003c6c <_vfiprintf_r+0x1f0>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b34:	f10a 0a01 	add.w	sl, sl, #1
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	9307      	str	r3, [sp, #28]
 8003b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b40:	931a      	str	r3, [sp, #104]	; 0x68
 8003b42:	4654      	mov	r4, sl
 8003b44:	2205      	movs	r2, #5
 8003b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4a:	4854      	ldr	r0, [pc, #336]	; (8003c9c <_vfiprintf_r+0x220>)
 8003b4c:	f7fc fb48 	bl	80001e0 <memchr>
 8003b50:	9a04      	ldr	r2, [sp, #16]
 8003b52:	b9d8      	cbnz	r0, 8003b8c <_vfiprintf_r+0x110>
 8003b54:	06d1      	lsls	r1, r2, #27
 8003b56:	bf44      	itt	mi
 8003b58:	2320      	movmi	r3, #32
 8003b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5e:	0713      	lsls	r3, r2, #28
 8003b60:	bf44      	itt	mi
 8003b62:	232b      	movmi	r3, #43	; 0x2b
 8003b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b68:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6e:	d015      	beq.n	8003b9c <_vfiprintf_r+0x120>
 8003b70:	9a07      	ldr	r2, [sp, #28]
 8003b72:	4654      	mov	r4, sl
 8003b74:	2000      	movs	r0, #0
 8003b76:	f04f 0c0a 	mov.w	ip, #10
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b80:	3b30      	subs	r3, #48	; 0x30
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d94d      	bls.n	8003c22 <_vfiprintf_r+0x1a6>
 8003b86:	b1b0      	cbz	r0, 8003bb6 <_vfiprintf_r+0x13a>
 8003b88:	9207      	str	r2, [sp, #28]
 8003b8a:	e014      	b.n	8003bb6 <_vfiprintf_r+0x13a>
 8003b8c:	eba0 0308 	sub.w	r3, r0, r8
 8003b90:	fa09 f303 	lsl.w	r3, r9, r3
 8003b94:	4313      	orrs	r3, r2
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	46a2      	mov	sl, r4
 8003b9a:	e7d2      	b.n	8003b42 <_vfiprintf_r+0xc6>
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	1d19      	adds	r1, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	9103      	str	r1, [sp, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bfbb      	ittet	lt
 8003ba8:	425b      	neglt	r3, r3
 8003baa:	f042 0202 	orrlt.w	r2, r2, #2
 8003bae:	9307      	strge	r3, [sp, #28]
 8003bb0:	9307      	strlt	r3, [sp, #28]
 8003bb2:	bfb8      	it	lt
 8003bb4:	9204      	strlt	r2, [sp, #16]
 8003bb6:	7823      	ldrb	r3, [r4, #0]
 8003bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bba:	d10c      	bne.n	8003bd6 <_vfiprintf_r+0x15a>
 8003bbc:	7863      	ldrb	r3, [r4, #1]
 8003bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc0:	d134      	bne.n	8003c2c <_vfiprintf_r+0x1b0>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	9203      	str	r2, [sp, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfb8      	it	lt
 8003bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bd2:	3402      	adds	r4, #2
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003cac <_vfiprintf_r+0x230>
 8003bda:	7821      	ldrb	r1, [r4, #0]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4650      	mov	r0, sl
 8003be0:	f7fc fafe 	bl	80001e0 <memchr>
 8003be4:	b138      	cbz	r0, 8003bf6 <_vfiprintf_r+0x17a>
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	eba0 000a 	sub.w	r0, r0, sl
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	4082      	lsls	r2, r0
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	3401      	adds	r4, #1
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfa:	4829      	ldr	r0, [pc, #164]	; (8003ca0 <_vfiprintf_r+0x224>)
 8003bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c00:	2206      	movs	r2, #6
 8003c02:	f7fc faed 	bl	80001e0 <memchr>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d03f      	beq.n	8003c8a <_vfiprintf_r+0x20e>
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <_vfiprintf_r+0x228>)
 8003c0c:	bb1b      	cbnz	r3, 8003c56 <_vfiprintf_r+0x1da>
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	3307      	adds	r3, #7
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	3308      	adds	r3, #8
 8003c18:	9303      	str	r3, [sp, #12]
 8003c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c1c:	443b      	add	r3, r7
 8003c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c20:	e768      	b.n	8003af4 <_vfiprintf_r+0x78>
 8003c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c26:	460c      	mov	r4, r1
 8003c28:	2001      	movs	r0, #1
 8003c2a:	e7a6      	b.n	8003b7a <_vfiprintf_r+0xfe>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	3401      	adds	r4, #1
 8003c30:	9305      	str	r3, [sp, #20]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 0c0a 	mov.w	ip, #10
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3e:	3a30      	subs	r2, #48	; 0x30
 8003c40:	2a09      	cmp	r2, #9
 8003c42:	d903      	bls.n	8003c4c <_vfiprintf_r+0x1d0>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0c6      	beq.n	8003bd6 <_vfiprintf_r+0x15a>
 8003c48:	9105      	str	r1, [sp, #20]
 8003c4a:	e7c4      	b.n	8003bd6 <_vfiprintf_r+0x15a>
 8003c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c50:	4604      	mov	r4, r0
 8003c52:	2301      	movs	r3, #1
 8003c54:	e7f0      	b.n	8003c38 <_vfiprintf_r+0x1bc>
 8003c56:	ab03      	add	r3, sp, #12
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	462a      	mov	r2, r5
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <_vfiprintf_r+0x22c>)
 8003c5e:	a904      	add	r1, sp, #16
 8003c60:	4630      	mov	r0, r6
 8003c62:	f3af 8000 	nop.w
 8003c66:	4607      	mov	r7, r0
 8003c68:	1c78      	adds	r0, r7, #1
 8003c6a:	d1d6      	bne.n	8003c1a <_vfiprintf_r+0x19e>
 8003c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c6e:	07d9      	lsls	r1, r3, #31
 8003c70:	d405      	bmi.n	8003c7e <_vfiprintf_r+0x202>
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	059a      	lsls	r2, r3, #22
 8003c76:	d402      	bmi.n	8003c7e <_vfiprintf_r+0x202>
 8003c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c7a:	f7ff fc75 	bl	8003568 <__retarget_lock_release_recursive>
 8003c7e:	89ab      	ldrh	r3, [r5, #12]
 8003c80:	065b      	lsls	r3, r3, #25
 8003c82:	f53f af1d 	bmi.w	8003ac0 <_vfiprintf_r+0x44>
 8003c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c88:	e71c      	b.n	8003ac4 <_vfiprintf_r+0x48>
 8003c8a:	ab03      	add	r3, sp, #12
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462a      	mov	r2, r5
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <_vfiprintf_r+0x22c>)
 8003c92:	a904      	add	r1, sp, #16
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f879 	bl	8003d8c <_printf_i>
 8003c9a:	e7e4      	b.n	8003c66 <_vfiprintf_r+0x1ea>
 8003c9c:	080043a0 	.word	0x080043a0
 8003ca0:	080043aa 	.word	0x080043aa
 8003ca4:	00000000 	.word	0x00000000
 8003ca8:	08003a57 	.word	0x08003a57
 8003cac:	080043a6 	.word	0x080043a6

08003cb0 <_printf_common>:
 8003cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	4616      	mov	r6, r2
 8003cb6:	4699      	mov	r9, r3
 8003cb8:	688a      	ldr	r2, [r1, #8]
 8003cba:	690b      	ldr	r3, [r1, #16]
 8003cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bfb8      	it	lt
 8003cc4:	4613      	movlt	r3, r2
 8003cc6:	6033      	str	r3, [r6, #0]
 8003cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ccc:	4607      	mov	r7, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	b10a      	cbz	r2, 8003cd6 <_printf_common+0x26>
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	6033      	str	r3, [r6, #0]
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	0699      	lsls	r1, r3, #26
 8003cda:	bf42      	ittt	mi
 8003cdc:	6833      	ldrmi	r3, [r6, #0]
 8003cde:	3302      	addmi	r3, #2
 8003ce0:	6033      	strmi	r3, [r6, #0]
 8003ce2:	6825      	ldr	r5, [r4, #0]
 8003ce4:	f015 0506 	ands.w	r5, r5, #6
 8003ce8:	d106      	bne.n	8003cf8 <_printf_common+0x48>
 8003cea:	f104 0a19 	add.w	sl, r4, #25
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	6832      	ldr	r2, [r6, #0]
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	42ab      	cmp	r3, r5
 8003cf6:	dc26      	bgt.n	8003d46 <_printf_common+0x96>
 8003cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cfc:	1e13      	subs	r3, r2, #0
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	bf18      	it	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	0692      	lsls	r2, r2, #26
 8003d06:	d42b      	bmi.n	8003d60 <_printf_common+0xb0>
 8003d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	4638      	mov	r0, r7
 8003d10:	47c0      	blx	r8
 8003d12:	3001      	adds	r0, #1
 8003d14:	d01e      	beq.n	8003d54 <_printf_common+0xa4>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	6922      	ldr	r2, [r4, #16]
 8003d1a:	f003 0306 	and.w	r3, r3, #6
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf02      	ittt	eq
 8003d22:	68e5      	ldreq	r5, [r4, #12]
 8003d24:	6833      	ldreq	r3, [r6, #0]
 8003d26:	1aed      	subeq	r5, r5, r3
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	bf0c      	ite	eq
 8003d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d30:	2500      	movne	r5, #0
 8003d32:	4293      	cmp	r3, r2
 8003d34:	bfc4      	itt	gt
 8003d36:	1a9b      	subgt	r3, r3, r2
 8003d38:	18ed      	addgt	r5, r5, r3
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	341a      	adds	r4, #26
 8003d3e:	42b5      	cmp	r5, r6
 8003d40:	d11a      	bne.n	8003d78 <_printf_common+0xc8>
 8003d42:	2000      	movs	r0, #0
 8003d44:	e008      	b.n	8003d58 <_printf_common+0xa8>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4652      	mov	r2, sl
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	47c0      	blx	r8
 8003d50:	3001      	adds	r0, #1
 8003d52:	d103      	bne.n	8003d5c <_printf_common+0xac>
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5c:	3501      	adds	r5, #1
 8003d5e:	e7c6      	b.n	8003cee <_printf_common+0x3e>
 8003d60:	18e1      	adds	r1, r4, r3
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	2030      	movs	r0, #48	; 0x30
 8003d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d6a:	4422      	add	r2, r4
 8003d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d74:	3302      	adds	r3, #2
 8003d76:	e7c7      	b.n	8003d08 <_printf_common+0x58>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	4638      	mov	r0, r7
 8003d80:	47c0      	blx	r8
 8003d82:	3001      	adds	r0, #1
 8003d84:	d0e6      	beq.n	8003d54 <_printf_common+0xa4>
 8003d86:	3601      	adds	r6, #1
 8003d88:	e7d9      	b.n	8003d3e <_printf_common+0x8e>
	...

08003d8c <_printf_i>:
 8003d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	7e0f      	ldrb	r7, [r1, #24]
 8003d92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d94:	2f78      	cmp	r7, #120	; 0x78
 8003d96:	4691      	mov	r9, r2
 8003d98:	4680      	mov	r8, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003da2:	d807      	bhi.n	8003db4 <_printf_i+0x28>
 8003da4:	2f62      	cmp	r7, #98	; 0x62
 8003da6:	d80a      	bhi.n	8003dbe <_printf_i+0x32>
 8003da8:	2f00      	cmp	r7, #0
 8003daa:	f000 80d4 	beq.w	8003f56 <_printf_i+0x1ca>
 8003dae:	2f58      	cmp	r7, #88	; 0x58
 8003db0:	f000 80c0 	beq.w	8003f34 <_printf_i+0x1a8>
 8003db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dbc:	e03a      	b.n	8003e34 <_printf_i+0xa8>
 8003dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dc2:	2b15      	cmp	r3, #21
 8003dc4:	d8f6      	bhi.n	8003db4 <_printf_i+0x28>
 8003dc6:	a101      	add	r1, pc, #4	; (adr r1, 8003dcc <_printf_i+0x40>)
 8003dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dcc:	08003e25 	.word	0x08003e25
 8003dd0:	08003e39 	.word	0x08003e39
 8003dd4:	08003db5 	.word	0x08003db5
 8003dd8:	08003db5 	.word	0x08003db5
 8003ddc:	08003db5 	.word	0x08003db5
 8003de0:	08003db5 	.word	0x08003db5
 8003de4:	08003e39 	.word	0x08003e39
 8003de8:	08003db5 	.word	0x08003db5
 8003dec:	08003db5 	.word	0x08003db5
 8003df0:	08003db5 	.word	0x08003db5
 8003df4:	08003db5 	.word	0x08003db5
 8003df8:	08003f3d 	.word	0x08003f3d
 8003dfc:	08003e65 	.word	0x08003e65
 8003e00:	08003ef7 	.word	0x08003ef7
 8003e04:	08003db5 	.word	0x08003db5
 8003e08:	08003db5 	.word	0x08003db5
 8003e0c:	08003f5f 	.word	0x08003f5f
 8003e10:	08003db5 	.word	0x08003db5
 8003e14:	08003e65 	.word	0x08003e65
 8003e18:	08003db5 	.word	0x08003db5
 8003e1c:	08003db5 	.word	0x08003db5
 8003e20:	08003eff 	.word	0x08003eff
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	602a      	str	r2, [r5, #0]
 8003e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e34:	2301      	movs	r3, #1
 8003e36:	e09f      	b.n	8003f78 <_printf_i+0x1ec>
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	682b      	ldr	r3, [r5, #0]
 8003e3c:	0607      	lsls	r7, r0, #24
 8003e3e:	f103 0104 	add.w	r1, r3, #4
 8003e42:	6029      	str	r1, [r5, #0]
 8003e44:	d501      	bpl.n	8003e4a <_printf_i+0xbe>
 8003e46:	681e      	ldr	r6, [r3, #0]
 8003e48:	e003      	b.n	8003e52 <_printf_i+0xc6>
 8003e4a:	0646      	lsls	r6, r0, #25
 8003e4c:	d5fb      	bpl.n	8003e46 <_printf_i+0xba>
 8003e4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e52:	2e00      	cmp	r6, #0
 8003e54:	da03      	bge.n	8003e5e <_printf_i+0xd2>
 8003e56:	232d      	movs	r3, #45	; 0x2d
 8003e58:	4276      	negs	r6, r6
 8003e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5e:	485a      	ldr	r0, [pc, #360]	; (8003fc8 <_printf_i+0x23c>)
 8003e60:	230a      	movs	r3, #10
 8003e62:	e012      	b.n	8003e8a <_printf_i+0xfe>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1d19      	adds	r1, r3, #4
 8003e6a:	6029      	str	r1, [r5, #0]
 8003e6c:	0605      	lsls	r5, r0, #24
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0xe8>
 8003e70:	681e      	ldr	r6, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0xee>
 8003e74:	0641      	lsls	r1, r0, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0xe4>
 8003e78:	881e      	ldrh	r6, [r3, #0]
 8003e7a:	4853      	ldr	r0, [pc, #332]	; (8003fc8 <_printf_i+0x23c>)
 8003e7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e7e:	bf0c      	ite	eq
 8003e80:	2308      	moveq	r3, #8
 8003e82:	230a      	movne	r3, #10
 8003e84:	2100      	movs	r1, #0
 8003e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e8a:	6865      	ldr	r5, [r4, #4]
 8003e8c:	60a5      	str	r5, [r4, #8]
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	bfa2      	ittt	ge
 8003e92:	6821      	ldrge	r1, [r4, #0]
 8003e94:	f021 0104 	bicge.w	r1, r1, #4
 8003e98:	6021      	strge	r1, [r4, #0]
 8003e9a:	b90e      	cbnz	r6, 8003ea0 <_printf_i+0x114>
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	d04b      	beq.n	8003f38 <_printf_i+0x1ac>
 8003ea0:	4615      	mov	r5, r2
 8003ea2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea6:	fb03 6711 	mls	r7, r3, r1, r6
 8003eaa:	5dc7      	ldrb	r7, [r0, r7]
 8003eac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eb0:	4637      	mov	r7, r6
 8003eb2:	42bb      	cmp	r3, r7
 8003eb4:	460e      	mov	r6, r1
 8003eb6:	d9f4      	bls.n	8003ea2 <_printf_i+0x116>
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d10b      	bne.n	8003ed4 <_printf_i+0x148>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07de      	lsls	r6, r3, #31
 8003ec0:	d508      	bpl.n	8003ed4 <_printf_i+0x148>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	6861      	ldr	r1, [r4, #4]
 8003ec6:	4299      	cmp	r1, r3
 8003ec8:	bfde      	ittt	le
 8003eca:	2330      	movle	r3, #48	; 0x30
 8003ecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ed4:	1b52      	subs	r2, r2, r5
 8003ed6:	6122      	str	r2, [r4, #16]
 8003ed8:	f8cd a000 	str.w	sl, [sp]
 8003edc:	464b      	mov	r3, r9
 8003ede:	aa03      	add	r2, sp, #12
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fee4 	bl	8003cb0 <_printf_common>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d14a      	bne.n	8003f82 <_printf_i+0x1f6>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	b004      	add	sp, #16
 8003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	f043 0320 	orr.w	r3, r3, #32
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	4833      	ldr	r0, [pc, #204]	; (8003fcc <_printf_i+0x240>)
 8003f00:	2778      	movs	r7, #120	; 0x78
 8003f02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	6829      	ldr	r1, [r5, #0]
 8003f0a:	061f      	lsls	r7, r3, #24
 8003f0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f10:	d402      	bmi.n	8003f18 <_printf_i+0x18c>
 8003f12:	065f      	lsls	r7, r3, #25
 8003f14:	bf48      	it	mi
 8003f16:	b2b6      	uxthmi	r6, r6
 8003f18:	07df      	lsls	r7, r3, #31
 8003f1a:	bf48      	it	mi
 8003f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f20:	6029      	str	r1, [r5, #0]
 8003f22:	bf48      	it	mi
 8003f24:	6023      	strmi	r3, [r4, #0]
 8003f26:	b91e      	cbnz	r6, 8003f30 <_printf_i+0x1a4>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	2310      	movs	r3, #16
 8003f32:	e7a7      	b.n	8003e84 <_printf_i+0xf8>
 8003f34:	4824      	ldr	r0, [pc, #144]	; (8003fc8 <_printf_i+0x23c>)
 8003f36:	e7e4      	b.n	8003f02 <_printf_i+0x176>
 8003f38:	4615      	mov	r5, r2
 8003f3a:	e7bd      	b.n	8003eb8 <_printf_i+0x12c>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	6826      	ldr	r6, [r4, #0]
 8003f40:	6961      	ldr	r1, [r4, #20]
 8003f42:	1d18      	adds	r0, r3, #4
 8003f44:	6028      	str	r0, [r5, #0]
 8003f46:	0635      	lsls	r5, r6, #24
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	d501      	bpl.n	8003f50 <_printf_i+0x1c4>
 8003f4c:	6019      	str	r1, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <_printf_i+0x1ca>
 8003f50:	0670      	lsls	r0, r6, #25
 8003f52:	d5fb      	bpl.n	8003f4c <_printf_i+0x1c0>
 8003f54:	8019      	strh	r1, [r3, #0]
 8003f56:	2300      	movs	r3, #0
 8003f58:	6123      	str	r3, [r4, #16]
 8003f5a:	4615      	mov	r5, r2
 8003f5c:	e7bc      	b.n	8003ed8 <_printf_i+0x14c>
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	1d1a      	adds	r2, r3, #4
 8003f62:	602a      	str	r2, [r5, #0]
 8003f64:	681d      	ldr	r5, [r3, #0]
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f7fc f938 	bl	80001e0 <memchr>
 8003f70:	b108      	cbz	r0, 8003f76 <_printf_i+0x1ea>
 8003f72:	1b40      	subs	r0, r0, r5
 8003f74:	6060      	str	r0, [r4, #4]
 8003f76:	6863      	ldr	r3, [r4, #4]
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f80:	e7aa      	b.n	8003ed8 <_printf_i+0x14c>
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	462a      	mov	r2, r5
 8003f86:	4649      	mov	r1, r9
 8003f88:	4640      	mov	r0, r8
 8003f8a:	47d0      	blx	sl
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d0ad      	beq.n	8003eec <_printf_i+0x160>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	079b      	lsls	r3, r3, #30
 8003f94:	d413      	bmi.n	8003fbe <_printf_i+0x232>
 8003f96:	68e0      	ldr	r0, [r4, #12]
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	4298      	cmp	r0, r3
 8003f9c:	bfb8      	it	lt
 8003f9e:	4618      	movlt	r0, r3
 8003fa0:	e7a6      	b.n	8003ef0 <_printf_i+0x164>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	4640      	mov	r0, r8
 8003faa:	47d0      	blx	sl
 8003fac:	3001      	adds	r0, #1
 8003fae:	d09d      	beq.n	8003eec <_printf_i+0x160>
 8003fb0:	3501      	adds	r5, #1
 8003fb2:	68e3      	ldr	r3, [r4, #12]
 8003fb4:	9903      	ldr	r1, [sp, #12]
 8003fb6:	1a5b      	subs	r3, r3, r1
 8003fb8:	42ab      	cmp	r3, r5
 8003fba:	dcf2      	bgt.n	8003fa2 <_printf_i+0x216>
 8003fbc:	e7eb      	b.n	8003f96 <_printf_i+0x20a>
 8003fbe:	2500      	movs	r5, #0
 8003fc0:	f104 0619 	add.w	r6, r4, #25
 8003fc4:	e7f5      	b.n	8003fb2 <_printf_i+0x226>
 8003fc6:	bf00      	nop
 8003fc8:	080043b1 	.word	0x080043b1
 8003fcc:	080043c2 	.word	0x080043c2

08003fd0 <__sflush_r>:
 8003fd0:	898a      	ldrh	r2, [r1, #12]
 8003fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	0710      	lsls	r0, r2, #28
 8003fda:	460c      	mov	r4, r1
 8003fdc:	d458      	bmi.n	8004090 <__sflush_r+0xc0>
 8003fde:	684b      	ldr	r3, [r1, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dc05      	bgt.n	8003ff0 <__sflush_r+0x20>
 8003fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	dc02      	bgt.n	8003ff0 <__sflush_r+0x20>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	d0f9      	beq.n	8003fea <__sflush_r+0x1a>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ffc:	682f      	ldr	r7, [r5, #0]
 8003ffe:	6a21      	ldr	r1, [r4, #32]
 8004000:	602b      	str	r3, [r5, #0]
 8004002:	d032      	beq.n	800406a <__sflush_r+0x9a>
 8004004:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	075a      	lsls	r2, r3, #29
 800400a:	d505      	bpl.n	8004018 <__sflush_r+0x48>
 800400c:	6863      	ldr	r3, [r4, #4]
 800400e:	1ac0      	subs	r0, r0, r3
 8004010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004012:	b10b      	cbz	r3, 8004018 <__sflush_r+0x48>
 8004014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004016:	1ac0      	subs	r0, r0, r3
 8004018:	2300      	movs	r3, #0
 800401a:	4602      	mov	r2, r0
 800401c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401e:	6a21      	ldr	r1, [r4, #32]
 8004020:	4628      	mov	r0, r5
 8004022:	47b0      	blx	r6
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	d106      	bne.n	8004038 <__sflush_r+0x68>
 800402a:	6829      	ldr	r1, [r5, #0]
 800402c:	291d      	cmp	r1, #29
 800402e:	d82b      	bhi.n	8004088 <__sflush_r+0xb8>
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <__sflush_r+0x108>)
 8004032:	410a      	asrs	r2, r1
 8004034:	07d6      	lsls	r6, r2, #31
 8004036:	d427      	bmi.n	8004088 <__sflush_r+0xb8>
 8004038:	2200      	movs	r2, #0
 800403a:	6062      	str	r2, [r4, #4]
 800403c:	04d9      	lsls	r1, r3, #19
 800403e:	6922      	ldr	r2, [r4, #16]
 8004040:	6022      	str	r2, [r4, #0]
 8004042:	d504      	bpl.n	800404e <__sflush_r+0x7e>
 8004044:	1c42      	adds	r2, r0, #1
 8004046:	d101      	bne.n	800404c <__sflush_r+0x7c>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b903      	cbnz	r3, 800404e <__sflush_r+0x7e>
 800404c:	6560      	str	r0, [r4, #84]	; 0x54
 800404e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004050:	602f      	str	r7, [r5, #0]
 8004052:	2900      	cmp	r1, #0
 8004054:	d0c9      	beq.n	8003fea <__sflush_r+0x1a>
 8004056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800405a:	4299      	cmp	r1, r3
 800405c:	d002      	beq.n	8004064 <__sflush_r+0x94>
 800405e:	4628      	mov	r0, r5
 8004060:	f7ff fa92 	bl	8003588 <_free_r>
 8004064:	2000      	movs	r0, #0
 8004066:	6360      	str	r0, [r4, #52]	; 0x34
 8004068:	e7c0      	b.n	8003fec <__sflush_r+0x1c>
 800406a:	2301      	movs	r3, #1
 800406c:	4628      	mov	r0, r5
 800406e:	47b0      	blx	r6
 8004070:	1c41      	adds	r1, r0, #1
 8004072:	d1c8      	bne.n	8004006 <__sflush_r+0x36>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0c5      	beq.n	8004006 <__sflush_r+0x36>
 800407a:	2b1d      	cmp	r3, #29
 800407c:	d001      	beq.n	8004082 <__sflush_r+0xb2>
 800407e:	2b16      	cmp	r3, #22
 8004080:	d101      	bne.n	8004086 <__sflush_r+0xb6>
 8004082:	602f      	str	r7, [r5, #0]
 8004084:	e7b1      	b.n	8003fea <__sflush_r+0x1a>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	e7ad      	b.n	8003fec <__sflush_r+0x1c>
 8004090:	690f      	ldr	r7, [r1, #16]
 8004092:	2f00      	cmp	r7, #0
 8004094:	d0a9      	beq.n	8003fea <__sflush_r+0x1a>
 8004096:	0793      	lsls	r3, r2, #30
 8004098:	680e      	ldr	r6, [r1, #0]
 800409a:	bf08      	it	eq
 800409c:	694b      	ldreq	r3, [r1, #20]
 800409e:	600f      	str	r7, [r1, #0]
 80040a0:	bf18      	it	ne
 80040a2:	2300      	movne	r3, #0
 80040a4:	eba6 0807 	sub.w	r8, r6, r7
 80040a8:	608b      	str	r3, [r1, #8]
 80040aa:	f1b8 0f00 	cmp.w	r8, #0
 80040ae:	dd9c      	ble.n	8003fea <__sflush_r+0x1a>
 80040b0:	6a21      	ldr	r1, [r4, #32]
 80040b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040b4:	4643      	mov	r3, r8
 80040b6:	463a      	mov	r2, r7
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b0      	blx	r6
 80040bc:	2800      	cmp	r0, #0
 80040be:	dc06      	bgt.n	80040ce <__sflush_r+0xfe>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c6:	81a3      	strh	r3, [r4, #12]
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	e78e      	b.n	8003fec <__sflush_r+0x1c>
 80040ce:	4407      	add	r7, r0
 80040d0:	eba8 0800 	sub.w	r8, r8, r0
 80040d4:	e7e9      	b.n	80040aa <__sflush_r+0xda>
 80040d6:	bf00      	nop
 80040d8:	dfbffffe 	.word	0xdfbffffe

080040dc <_fflush_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	690b      	ldr	r3, [r1, #16]
 80040e0:	4605      	mov	r5, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	b913      	cbnz	r3, 80040ec <_fflush_r+0x10>
 80040e6:	2500      	movs	r5, #0
 80040e8:	4628      	mov	r0, r5
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	b118      	cbz	r0, 80040f6 <_fflush_r+0x1a>
 80040ee:	6a03      	ldr	r3, [r0, #32]
 80040f0:	b90b      	cbnz	r3, 80040f6 <_fflush_r+0x1a>
 80040f2:	f7ff f823 	bl	800313c <__sinit>
 80040f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f3      	beq.n	80040e6 <_fflush_r+0xa>
 80040fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004100:	07d0      	lsls	r0, r2, #31
 8004102:	d404      	bmi.n	800410e <_fflush_r+0x32>
 8004104:	0599      	lsls	r1, r3, #22
 8004106:	d402      	bmi.n	800410e <_fflush_r+0x32>
 8004108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800410a:	f7ff fa2c 	bl	8003566 <__retarget_lock_acquire_recursive>
 800410e:	4628      	mov	r0, r5
 8004110:	4621      	mov	r1, r4
 8004112:	f7ff ff5d 	bl	8003fd0 <__sflush_r>
 8004116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004118:	07da      	lsls	r2, r3, #31
 800411a:	4605      	mov	r5, r0
 800411c:	d4e4      	bmi.n	80040e8 <_fflush_r+0xc>
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	059b      	lsls	r3, r3, #22
 8004122:	d4e1      	bmi.n	80040e8 <_fflush_r+0xc>
 8004124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004126:	f7ff fa1f 	bl	8003568 <__retarget_lock_release_recursive>
 800412a:	e7dd      	b.n	80040e8 <_fflush_r+0xc>

0800412c <__swhatbuf_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	460c      	mov	r4, r1
 8004130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004134:	2900      	cmp	r1, #0
 8004136:	b096      	sub	sp, #88	; 0x58
 8004138:	4615      	mov	r5, r2
 800413a:	461e      	mov	r6, r3
 800413c:	da0d      	bge.n	800415a <__swhatbuf_r+0x2e>
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	bf0c      	ite	eq
 800414a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800414e:	2340      	movne	r3, #64	; 0x40
 8004150:	2000      	movs	r0, #0
 8004152:	6031      	str	r1, [r6, #0]
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	b016      	add	sp, #88	; 0x58
 8004158:	bd70      	pop	{r4, r5, r6, pc}
 800415a:	466a      	mov	r2, sp
 800415c:	f000 f862 	bl	8004224 <_fstat_r>
 8004160:	2800      	cmp	r0, #0
 8004162:	dbec      	blt.n	800413e <__swhatbuf_r+0x12>
 8004164:	9901      	ldr	r1, [sp, #4]
 8004166:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800416a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800416e:	4259      	negs	r1, r3
 8004170:	4159      	adcs	r1, r3
 8004172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004176:	e7eb      	b.n	8004150 <__swhatbuf_r+0x24>

08004178 <__smakebuf_r>:
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800417c:	079d      	lsls	r5, r3, #30
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	d507      	bpl.n	8004194 <__smakebuf_r+0x1c>
 8004184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	2301      	movs	r3, #1
 800418e:	6163      	str	r3, [r4, #20]
 8004190:	b002      	add	sp, #8
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	ab01      	add	r3, sp, #4
 8004196:	466a      	mov	r2, sp
 8004198:	f7ff ffc8 	bl	800412c <__swhatbuf_r>
 800419c:	9900      	ldr	r1, [sp, #0]
 800419e:	4605      	mov	r5, r0
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7ff fa5d 	bl	8003660 <_malloc_r>
 80041a6:	b948      	cbnz	r0, 80041bc <__smakebuf_r+0x44>
 80041a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ac:	059a      	lsls	r2, r3, #22
 80041ae:	d4ef      	bmi.n	8004190 <__smakebuf_r+0x18>
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7e3      	b.n	8004184 <__smakebuf_r+0xc>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	6020      	str	r0, [r4, #0]
 80041c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	9b00      	ldr	r3, [sp, #0]
 80041c8:	6163      	str	r3, [r4, #20]
 80041ca:	9b01      	ldr	r3, [sp, #4]
 80041cc:	6120      	str	r0, [r4, #16]
 80041ce:	b15b      	cbz	r3, 80041e8 <__smakebuf_r+0x70>
 80041d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d4:	4630      	mov	r0, r6
 80041d6:	f000 f837 	bl	8004248 <_isatty_r>
 80041da:	b128      	cbz	r0, 80041e8 <__smakebuf_r+0x70>
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	431d      	orrs	r5, r3
 80041ec:	81a5      	strh	r5, [r4, #12]
 80041ee:	e7cf      	b.n	8004190 <__smakebuf_r+0x18>

080041f0 <memmove>:
 80041f0:	4288      	cmp	r0, r1
 80041f2:	b510      	push	{r4, lr}
 80041f4:	eb01 0402 	add.w	r4, r1, r2
 80041f8:	d902      	bls.n	8004200 <memmove+0x10>
 80041fa:	4284      	cmp	r4, r0
 80041fc:	4623      	mov	r3, r4
 80041fe:	d807      	bhi.n	8004210 <memmove+0x20>
 8004200:	1e43      	subs	r3, r0, #1
 8004202:	42a1      	cmp	r1, r4
 8004204:	d008      	beq.n	8004218 <memmove+0x28>
 8004206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800420a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800420e:	e7f8      	b.n	8004202 <memmove+0x12>
 8004210:	4402      	add	r2, r0
 8004212:	4601      	mov	r1, r0
 8004214:	428a      	cmp	r2, r1
 8004216:	d100      	bne.n	800421a <memmove+0x2a>
 8004218:	bd10      	pop	{r4, pc}
 800421a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800421e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004222:	e7f7      	b.n	8004214 <memmove+0x24>

08004224 <_fstat_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	; (8004244 <_fstat_r+0x20>)
 8004228:	2300      	movs	r3, #0
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	f7fc fcda 	bl	8000bea <_fstat>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d102      	bne.n	8004240 <_fstat_r+0x1c>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	b103      	cbz	r3, 8004240 <_fstat_r+0x1c>
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	200002dc 	.word	0x200002dc

08004248 <_isatty_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	; (8004264 <_isatty_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fcd9 	bl	8000c0a <_isatty>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_isatty_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_isatty_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200002dc 	.word	0x200002dc

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d06      	ldr	r5, [pc, #24]	; (8004284 <_sbrk_r+0x1c>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fce2 	bl	8000c3c <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	200002dc 	.word	0x200002dc

08004288 <_realloc_r>:
 8004288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428c:	4680      	mov	r8, r0
 800428e:	4614      	mov	r4, r2
 8004290:	460e      	mov	r6, r1
 8004292:	b921      	cbnz	r1, 800429e <_realloc_r+0x16>
 8004294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	4611      	mov	r1, r2
 800429a:	f7ff b9e1 	b.w	8003660 <_malloc_r>
 800429e:	b92a      	cbnz	r2, 80042ac <_realloc_r+0x24>
 80042a0:	f7ff f972 	bl	8003588 <_free_r>
 80042a4:	4625      	mov	r5, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ac:	f000 f81b 	bl	80042e6 <_malloc_usable_size_r>
 80042b0:	4284      	cmp	r4, r0
 80042b2:	4607      	mov	r7, r0
 80042b4:	d802      	bhi.n	80042bc <_realloc_r+0x34>
 80042b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042ba:	d812      	bhi.n	80042e2 <_realloc_r+0x5a>
 80042bc:	4621      	mov	r1, r4
 80042be:	4640      	mov	r0, r8
 80042c0:	f7ff f9ce 	bl	8003660 <_malloc_r>
 80042c4:	4605      	mov	r5, r0
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d0ed      	beq.n	80042a6 <_realloc_r+0x1e>
 80042ca:	42bc      	cmp	r4, r7
 80042cc:	4622      	mov	r2, r4
 80042ce:	4631      	mov	r1, r6
 80042d0:	bf28      	it	cs
 80042d2:	463a      	movcs	r2, r7
 80042d4:	f7ff f949 	bl	800356a <memcpy>
 80042d8:	4631      	mov	r1, r6
 80042da:	4640      	mov	r0, r8
 80042dc:	f7ff f954 	bl	8003588 <_free_r>
 80042e0:	e7e1      	b.n	80042a6 <_realloc_r+0x1e>
 80042e2:	4635      	mov	r5, r6
 80042e4:	e7df      	b.n	80042a6 <_realloc_r+0x1e>

080042e6 <_malloc_usable_size_r>:
 80042e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ea:	1f18      	subs	r0, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bfbc      	itt	lt
 80042f0:	580b      	ldrlt	r3, [r1, r0]
 80042f2:	18c0      	addlt	r0, r0, r3
 80042f4:	4770      	bx	lr
	...

080042f8 <_init>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr

08004304 <_fini>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr
